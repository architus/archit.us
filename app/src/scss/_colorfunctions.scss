@function color-adjust($color, $adjust: 0%) {
    @if $adjust == 0% {
        @return $color;
    } @else {
        @return scale-color($color, $lightness: $adjust);
    }
}

@function blend($color1, $color2, $mu: 0.5) {
    $c1R: red($color1);
    $c1G: green($color1);
    $c1B: blue($color1);
    $c1A: alpha($color1);

    $c2R: red($color2);
    $c2G: green($color2);
    $c2B: blue($color2);
    $c2A: alpha($color2);

    $muMinus: (1 - $mu);
    $r: ($c1R * $muMinus) + ($c2R * $mu);
    $g: ($c1G * $muMinus) + ($c2G * $mu);
    $b: ($c1B * $muMinus) + ($c2B * $mu);
    $a: ($c1A * $muMinus) + ($c2A * $mu);

    @return rgba($r, $g, $b, $a);
}

@mixin theme-property($property, $value, $theme) {
    .#{$theme}-mode & {
        #{$property}: $value;
    }
}

@mixin light($property: null, $value: null) {
    @if $property == null {
        .light-mode & {
            @content;
        }
    } @else {
        .light-mode & {
            #{$property}: $value;
        }
    }
}

@mixin dark($property: null, $value: null) {
    @if $property == null {
        .dark-mode & {
            @content;
        }
    } @else {
        .dark-mode & {
            #{$property}: $value;
        }
    }
}

@mixin theme-bg($theme, $color, $adjust: 0%) {
    @include theme-property(
        background-color,
        color-adjust($color, $adjust),
        $theme
    );
}

@mixin theme-fg($theme, $color, $adjust: 0%) {
    @include theme-property(color, color-adjust($color, $adjust), $theme);
}

@mixin theme-border(
    $theme,
    $color,
    $adjust: 0%,
    $border: 1px solid,
    $side: null
) {
    @if $side == null {
        @include theme-property(
            border,
            $border color-adjust($color, $adjust),
            $theme
        );
    } @else {
        @include theme-property(
            border-#{$side},
            $border color-adjust($color, $adjust),
            $theme
        );
    }
}
