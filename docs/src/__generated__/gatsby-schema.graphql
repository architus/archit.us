# Provides default value for input field.
directive @default(value: JSON!) on INPUT_FIELD_DEFINITION

# Add date formatting options.
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

# Link to node by foreign-key relation.
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer(
  # Don't add default resolvers to defined fields.
  noDefaultResolvers: Boolean
) on OBJECT

# Do not infer field types from field values.
directive @dontInfer(
  # Don't add default resolvers to defined fields.
  noDefaultResolvers: Boolean
) on OBJECT

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# Define parent-child relations between types. This is used to add `child*` or
# `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []

  # Specifies whether a parent can have multiple children of this type or not.
  many: Boolean! = false
) on OBJECT

# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

type BreadcrumbSegment {
  text: String!
  path: String
}

input BreadcrumbSegmentFilterInput {
  text: StringQueryOperatorInput
  path: StringQueryOperatorInput
}

input BreadcrumbSegmentFilterListInput {
  elemMatch: BreadcrumbSegmentFilterInput
}

type BuildMetadata implements Node {
  label: String!
  icon: String
  context: BuildMetadataContext!
  details: [BuildMetadataEntry!]!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type BuildMetadataConnection {
  totalCount: Int!
  edges: [BuildMetadataEdge!]!
  nodes: [BuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: BuildMetadataFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: BuildMetadataFieldsEnum!): [BuildMetadataGroupConnection!]!
}

type BuildMetadataContext {
  label: String!
  message: String
  icon: String
}

input BuildMetadataContextFilterInput {
  label: StringQueryOperatorInput
  message: StringQueryOperatorInput
  icon: StringQueryOperatorInput
}

type BuildMetadataEdge {
  next: BuildMetadata
  node: BuildMetadata!
  previous: BuildMetadata
}

type BuildMetadataEntry {
  type: String!
  label: String!
  href: String
  text: String
  content: String
}

input BuildMetadataEntryFilterInput {
  type: StringQueryOperatorInput
  label: StringQueryOperatorInput
  href: StringQueryOperatorInput
  text: StringQueryOperatorInput
  content: StringQueryOperatorInput
}

input BuildMetadataEntryFilterListInput {
  elemMatch: BuildMetadataEntryFilterInput
}

enum BuildMetadataFieldsEnum {
  label
  icon
  context___label
  context___message
  context___icon
  details
  details___type
  details___label
  details___href
  details___text
  details___content
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input BuildMetadataFilterInput {
  label: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  context: BuildMetadataContextFilterInput
  details: BuildMetadataEntryFilterListInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type BuildMetadataGroupConnection {
  totalCount: Int!
  edges: [BuildMetadataEdge!]!
  nodes: [BuildMetadata!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input BuildMetadataSortInput {
  fields: [BuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for
# representation of dates and times using the Gregorian calendar.
scalar Date

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type DocsPage implements Node {
  breadcrumb: [BreadcrumbSegment!]
  title: String!
  shortTitle: String!
  isOrphan: Boolean!
  noTOC: Boolean!
  noSequenceLinks: Boolean!
  badge: String
  originalPath: String
  history: History
  sideNav: NavigationTree!
  path: String!
  preorder: Int!
  lead(maxLength: Int): String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type DocsPageConnection {
  totalCount: Int!
  edges: [DocsPageEdge!]!
  nodes: [DocsPage!]!
  pageInfo: PageInfo!
  distinct(field: DocsPageFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: DocsPageFieldsEnum!): [DocsPageGroupConnection!]!
}

type DocsPageEdge {
  next: DocsPage
  node: DocsPage!
  previous: DocsPage
}

enum DocsPageFieldsEnum {
  breadcrumb
  breadcrumb___text
  breadcrumb___path
  title
  shortTitle
  isOrphan
  noTOC
  noSequenceLinks
  badge
  originalPath
  history___lastModified
  history___authors
  history___authors___name
  history___authors___avatarUrl
  history___authors___login
  history___authors___url
  sideNav___root
  sideNav___id
  sideNav___parent___id
  sideNav___parent___parent___id
  sideNav___parent___parent___children
  sideNav___parent___children
  sideNav___parent___children___id
  sideNav___parent___children___children
  sideNav___parent___internal___content
  sideNav___parent___internal___contentDigest
  sideNav___parent___internal___description
  sideNav___parent___internal___fieldOwners
  sideNav___parent___internal___ignoreType
  sideNav___parent___internal___mediaType
  sideNav___parent___internal___owner
  sideNav___parent___internal___type
  sideNav___children
  sideNav___children___id
  sideNav___children___parent___id
  sideNav___children___parent___children
  sideNav___children___children
  sideNav___children___children___id
  sideNav___children___children___children
  sideNav___children___internal___content
  sideNav___children___internal___contentDigest
  sideNav___children___internal___description
  sideNav___children___internal___fieldOwners
  sideNav___children___internal___ignoreType
  sideNav___children___internal___mediaType
  sideNav___children___internal___owner
  sideNav___children___internal___type
  sideNav___internal___content
  sideNav___internal___contentDigest
  sideNav___internal___description
  sideNav___internal___fieldOwners
  sideNav___internal___ignoreType
  sideNav___internal___mediaType
  sideNav___internal___owner
  sideNav___internal___type
  path
  preorder
  lead
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input DocsPageFilterInput {
  breadcrumb: BreadcrumbSegmentFilterListInput
  title: StringQueryOperatorInput
  shortTitle: StringQueryOperatorInput
  isOrphan: BooleanQueryOperatorInput
  noTOC: BooleanQueryOperatorInput
  noSequenceLinks: BooleanQueryOperatorInput
  badge: StringQueryOperatorInput
  originalPath: StringQueryOperatorInput
  history: HistoryFilterInput
  sideNav: NavigationTreeFilterInput
  path: StringQueryOperatorInput
  preorder: IntQueryOperatorInput
  lead: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type DocsPageGroupConnection {
  totalCount: Int!
  edges: [DocsPageEdge!]!
  nodes: [DocsPage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DocsPageSortInput {
  fields: [DocsPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  childMdx: Mdx
  blksize: Int
  blocks: Int

  # Copy file to static directory and return public url to it
  publicURL: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  childMdx___rawBody
  childMdx___fileAbsolutePath
  childMdx___frontmatter___title
  childMdx___frontmatter___shortTitle
  childMdx___frontmatter___overrideBreadcrumb
  childMdx___frontmatter___overrideNav
  childMdx___frontmatter___isRoot
  childMdx___frontmatter___childrenOrder
  childMdx___frontmatter___noBreadcrumb
  childMdx___frontmatter___noTOC
  childMdx___frontmatter___badge
  childMdx___frontmatter___noSequenceLinks
  childMdx___body
  childMdx___excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___headings___value @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___headings___depth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___html @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___mdxAST @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___timeToRead @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___wordCount___paragraphs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___wordCount___sentences @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___wordCount___words @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___breadcrumb @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___breadcrumb___text @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___breadcrumb___path @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___title @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___shortTitle @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___isOrphan @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___noTOC @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___noSequenceLinks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___badge @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___originalPath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___history___lastModified @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___history___authors @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___sideNav___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___sideNav___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___sideNav___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___path @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___preorder @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___lead @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___childDocsPage___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childMdx___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  blksize
  blocks
  publicURL
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  childMdx: MdxFilterInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  publicURL: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

type Frontmatter {
  title: String!
  shortTitle: String
  overrideBreadcrumb: String
  overrideNav: String
  isRoot: Boolean
  childrenOrder: [String]
  noBreadcrumb: Boolean
  noTOC: Boolean
  badge: String
  noSequenceLinks: Boolean
}

input FrontmatterFilterInput {
  title: StringQueryOperatorInput
  shortTitle: StringQueryOperatorInput
  overrideBreadcrumb: StringQueryOperatorInput
  overrideNav: StringQueryOperatorInput
  isRoot: BooleanQueryOperatorInput
  childrenOrder: StringQueryOperatorInput
  noBreadcrumb: BooleanQueryOperatorInput
  noTOC: BooleanQueryOperatorInput
  badge: StringQueryOperatorInput
  noSequenceLinks: BooleanQueryOperatorInput
}

# The query root of GitHub's GraphQL interface.
type GitHub {
  # Look up a code of conduct by its key
  codeOfConduct(
    # The code of conduct's key
    key: String!
  ): GitHub_CodeOfConduct

  # Look up a code of conduct by its key
  codesOfConduct: [GitHub_CodeOfConduct]

  # Look up an enterprise by URL slug.
  enterprise(
    # The enterprise URL slug.
    slug: String!

    # The enterprise invitation token.
    invitationToken: String
  ): GitHub_Enterprise

  # Look up a pending enterprise administrator invitation by invitee, enterprise and role.
  enterpriseAdministratorInvitation(
    # The login of the user invited to join the business.
    userLogin: String!

    # The slug of the enterprise the user was invited to join.
    enterpriseSlug: String!

    # The role for the business member invitation.
    role: GitHub_EnterpriseAdministratorRole!
  ): GitHub_EnterpriseAdministratorInvitation

  # Look up a pending enterprise administrator invitation by invitation token.
  enterpriseAdministratorInvitationByToken(
    # The invitation token sent with the invitation email.
    invitationToken: String!
  ): GitHub_EnterpriseAdministratorInvitation

  # Look up an open source license by its key
  license(
    # The license's downcased SPDX ID
    key: String!
  ): GitHub_License

  # Return a list of known open source licenses
  licenses: [GitHub_License]!

  # Get alphabetically sorted list of Marketplace categories
  marketplaceCategories(
    # Return only the specified categories.
    includeCategories: [String!]

    # Exclude categories with no listings.
    excludeEmpty: Boolean

    # Returns top level categories only, excluding any subcategories.
    excludeSubcategories: Boolean
  ): [GitHub_MarketplaceCategory!]!

  # Look up a Marketplace category by its slug.
  marketplaceCategory(
    # The URL slug of the category.
    slug: String!

    # Also check topic aliases for the category slug
    useTopicAliases: Boolean
  ): GitHub_MarketplaceCategory

  # Look up a single Marketplace listing
  marketplaceListing(
    # Select the listing that matches this slug. It's the short name of the listing used in its URL.
    slug: String!
  ): GitHub_MarketplaceListing

  # Look up Marketplace listings
  marketplaceListings(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Select only listings with the given category.
    categorySlug: String

    # Also check topic aliases for the category slug
    useTopicAliases: Boolean

    # Select listings to which user has admin access. If omitted, listings visible to the
    # viewer are returned.
    #
    viewerCanAdmin: Boolean

    # Select listings that can be administered by the specified user.
    adminId: ID

    # Select listings for products owned by the specified organization.
    organizationId: ID

    # Select listings visible to the viewer even if they are not approved. If omitted or
    # false, only approved listings will be returned.
    #
    allStates: Boolean

    # Select the listings with these slugs, if they are visible to the viewer.
    slugs: [String]

    # Select only listings where the primary category matches the given category slug.
    primaryCategoryOnly: Boolean = false

    # Select only listings that offer a free trial.
    withFreeTrialsOnly: Boolean = false
  ): GitHub_MarketplaceListingConnection!

  # Return information about the GitHub instance
  meta: GitHub_GitHubMetadata!

  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): GitHub_Node

  # Lookup nodes by a list of IDs.
  nodes(
    # The list of node IDs.
    ids: [ID!]!
  ): [GitHub_Node]!

  # Lookup a organization by login.
  organization(
    # The organization's login.
    login: String!
  ): GitHub_Organization

  # The client's rate limit information.
  rateLimit(
    # If true, calculate the cost for the query without evaluating it
    dryRun: Boolean = false
  ): GitHub_RateLimit

  # Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
  relay: Query!

  # Lookup a given repository by the owner and repository name.
  repository(
    # The login field of a user or organization
    owner: String!

    # The name of the repository
    name: String!
  ): GitHub_Repository

  # Lookup a repository owner (ie. either a User or an Organization) by login.
  repositoryOwner(
    # The username to lookup the owner by.
    login: String!
  ): GitHub_RepositoryOwner

  # Lookup resource by a URL.
  resource(
    # The URL.
    url: GitHub_URI!
  ): GitHub_UniformResourceLocatable

  # Perform a search across resources.
  search(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The search string to look for.
    query: String!

    # The types of search items to search within.
    type: GitHub_SearchType!
  ): GitHub_SearchResultItemConnection!

  # GitHub Security Advisories
  securityAdvisories(
    # Ordering options for the returned topics.
    orderBy: GitHub_SecurityAdvisoryOrder = {field: UPDATED_AT, direction: DESC}

    # Filter advisories by identifier, e.g. GHSA or CVE.
    identifier: GitHub_SecurityAdvisoryIdentifierFilter

    # Filter advisories to those published since a time in the past.
    publishedSince: GitHub_DateTime

    # Filter advisories to those updated since a time in the past.
    updatedSince: GitHub_DateTime

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_SecurityAdvisoryConnection!

  # Fetch a Security Advisory by its GHSA ID
  securityAdvisory(
    # GitHub Security Advisory ID.
    ghsaId: String!
  ): GitHub_SecurityAdvisory

  # Software Vulnerabilities documented by GitHub Security Advisories
  securityVulnerabilities(
    # Ordering options for the returned topics.
    orderBy: GitHub_SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    # An ecosystem to filter vulnerabilities by.
    ecosystem: GitHub_SecurityAdvisoryEcosystem

    # A package name to filter vulnerabilities by.
    package: String

    # A list of severities to filter vulnerabilities by.
    severities: [GitHub_SecurityAdvisorySeverity!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_SecurityVulnerabilityConnection!

  # Look up a single Sponsors Listing
  sponsorsListing(
    # Select the Sponsors listing which matches this slug
    slug: String!
  ): GitHub_SponsorsListing @deprecated(reason: "`Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.")

  # Look up a topic by name.
  topic(
    # The topic's name.
    name: String!
  ): GitHub_Topic

  # Lookup a user by login.
  user(
    # The user's login.
    login: String!
  ): GitHub_User

  # The currently authenticated user.
  viewer: GitHub_User!
}

# Autogenerated input type of AcceptEnterpriseAdministratorInvitation
input GitHub_AcceptEnterpriseAdministratorInvitationInput {
  # The id of the invitation being accepted
  invitationId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AcceptEnterpriseAdministratorInvitation
type GitHub_AcceptEnterpriseAdministratorInvitationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The invitation that was accepted.
  invitation: GitHub_EnterpriseAdministratorInvitation

  # A message confirming the result of accepting an administrator invitation.
  message: String
}

# Autogenerated input type of AcceptTopicSuggestion
input GitHub_AcceptTopicSuggestionInput {
  # The Node ID of the repository.
  repositoryId: ID!

  # The name of the suggested topic.
  name: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AcceptTopicSuggestion
type GitHub_AcceptTopicSuggestionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The accepted topic.
  topic: GitHub_Topic
}

# The possible capabilities for action executions setting.
enum GitHub_ActionExecutionCapabilitySetting {
  # All action executions are disabled.
  DISABLED

  # All action executions are enabled.
  ALL_ACTIONS

  # Only actions defined within the repo are allowed.
  LOCAL_ACTIONS_ONLY

  # Organization administrators action execution capabilities.
  NO_POLICY
}

# Represents an object which can take actions on GitHub. Typically a User or Bot.
interface GitHub_Actor {
  # A URL pointing to the actor's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # The username of the actor.
  login: String!

  # The HTTP path for this actor.
  resourcePath: GitHub_URI!

  # The HTTP URL for this actor.
  url: GitHub_URI!
}

# Location information for an actor
type GitHub_ActorLocation {
  # City
  city: String

  # Country name
  country: String

  # Country code
  countryCode: String

  # Region name
  region: String

  # Region or state code
  regionCode: String
}

# Autogenerated input type of AddAssigneesToAssignable
input GitHub_AddAssigneesToAssignableInput {
  # The id of the assignable object to add assignees to.
  assignableId: ID!

  # The id of users to add as assignees.
  assigneeIds: [ID!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddAssigneesToAssignable
type GitHub_AddAssigneesToAssignablePayload {
  # The item that was assigned.
  assignable: GitHub_Assignable

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of AddComment
input GitHub_AddCommentInput {
  # The Node ID of the subject to modify.
  subjectId: ID!

  # The contents of the comment.
  body: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddComment
type GitHub_AddCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The edge from the subject's comment connection.
  commentEdge: GitHub_IssueCommentEdge

  # The subject
  subject: GitHub_Node

  # The edge from the subject's timeline connection.
  timelineEdge: GitHub_IssueTimelineItemEdge
}

# Represents a 'added_to_project' event on a given issue or pull request.
type GitHub_AddedToProjectEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!
}

# Autogenerated input type of AddLabelsToLabelable
input GitHub_AddLabelsToLabelableInput {
  # The id of the labelable object to add labels to.
  labelableId: ID!

  # The ids of the labels to add.
  labelIds: [ID!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddLabelsToLabelable
type GitHub_AddLabelsToLabelablePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The item that was labeled.
  labelable: GitHub_Labelable
}

# Autogenerated input type of AddProjectCard
input GitHub_AddProjectCardInput {
  # The Node ID of the ProjectColumn.
  projectColumnId: ID!

  # The content of the card. Must be a member of the ProjectCardItem union
  contentId: ID

  # The note on the card.
  note: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddProjectCard
type GitHub_AddProjectCardPayload {
  # The edge from the ProjectColumn's card connection.
  cardEdge: GitHub_ProjectCardEdge

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The ProjectColumn
  projectColumn: GitHub_ProjectColumn
}

# Autogenerated input type of AddProjectColumn
input GitHub_AddProjectColumnInput {
  # The Node ID of the project.
  projectId: ID!

  # The name of the column.
  name: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddProjectColumn
type GitHub_AddProjectColumnPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The edge from the project's column connection.
  columnEdge: GitHub_ProjectColumnEdge

  # The project
  project: GitHub_Project
}

# Autogenerated input type of AddPullRequestReviewComment
input GitHub_AddPullRequestReviewCommentInput {
  # The node ID of the pull request reviewing
  pullRequestId: ID

  # The Node ID of the review to modify.
  pullRequestReviewId: ID

  # The SHA of the commit to comment on.
  commitOID: GitHub_GitObjectID

  # The text of the comment.
  body: String!

  # The relative path of the file to comment on.
  path: String

  # The line index in the diff to comment on.
  position: Int

  # The comment id to reply to.
  inReplyTo: ID

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddPullRequestReviewComment
type GitHub_AddPullRequestReviewCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The newly created comment.
  comment: GitHub_PullRequestReviewComment

  # The edge from the review's comment connection.
  commentEdge: GitHub_PullRequestReviewCommentEdge
}

# Autogenerated input type of AddPullRequestReview
input GitHub_AddPullRequestReviewInput {
  # The Node ID of the pull request to modify.
  pullRequestId: ID!

  # The commit OID the review pertains to.
  commitOID: GitHub_GitObjectID

  # The contents of the review body comment.
  body: String

  # The event to perform on the pull request review.
  event: GitHub_PullRequestReviewEvent

  # The review line comments.
  comments: [GitHub_DraftPullRequestReviewComment]

  # The review line comment threads.
  threads: [GitHub_DraftPullRequestReviewThread]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddPullRequestReview
type GitHub_AddPullRequestReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The newly created pull request review.
  pullRequestReview: GitHub_PullRequestReview

  # The edge from the pull request's review connection.
  reviewEdge: GitHub_PullRequestReviewEdge
}

# Autogenerated input type of AddPullRequestReviewThread
input GitHub_AddPullRequestReviewThreadInput {
  # Path to the file being commented on.
  path: String!

  # Body of the thread's first comment.
  body: String!

  # The Node ID of the review to modify.
  pullRequestReviewId: ID!

  # The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  line: Int!

  # The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  side: GitHub_DiffSide = RIGHT

  # The first line of the range to which the comment refers.
  startLine: Int

  # The side of the diff on which the start line resides.
  startSide: GitHub_DiffSide = RIGHT

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddPullRequestReviewThread
type GitHub_AddPullRequestReviewThreadPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The newly created thread.
  thread: GitHub_PullRequestReviewThread
}

# Autogenerated input type of AddReaction
input GitHub_AddReactionInput {
  # The Node ID of the subject to modify.
  subjectId: ID!

  # The name of the emoji to react with.
  content: GitHub_ReactionContent!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddReaction
type GitHub_AddReactionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The reaction object.
  reaction: GitHub_Reaction

  # The reactable subject.
  subject: GitHub_Reactable
}

# Autogenerated input type of AddStar
input GitHub_AddStarInput {
  # The Starrable ID to star.
  starrableId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of AddStar
type GitHub_AddStarPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The starrable.
  starrable: GitHub_Starrable
}

# A GitHub App.
type GitHub_App implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The description of the app.
  description: String
  id: ID!

  # The hex color code, without the leading '#', for the logo background.
  logoBackgroundColor: String!

  # A URL pointing to the app's logo.
  logoUrl(
    # The size of the resulting image.
    size: Int
  ): GitHub_URI!

  # The name of the app.
  name: String!

  # A slug based on the name of the app for use in URLs.
  slug: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The URL to the app's homepage.
  url: GitHub_URI!
}

# Autogenerated input type of ArchiveRepository
input GitHub_ArchiveRepositoryInput {
  # The ID of the repository to mark as archived.
  repositoryId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ArchiveRepository
type GitHub_ArchiveRepositoryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The repository that was marked as archived.
  repository: GitHub_Repository
}

# An object that can have users assigned to it.
interface GitHub_Assignable {
  # A list of Users assigned to this object.
  assignees(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!
}

# Represents an 'assigned' event on any assignable object.
type GitHub_AssignedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the assignable associated with the event.
  assignable: GitHub_Assignable!

  # Identifies the user or mannequin that was assigned.
  assignee: GitHub_Assignee

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the user who was assigned.
  user: GitHub_User @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

# Types that can be assigned to issues.
union GitHub_Assignee = GitHub_Bot | GitHub_Mannequin | GitHub_Organization | GitHub_User

# An entry in the audit log.
interface GitHub_AuditEntry {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Types that can initiate an audit log event.
union GitHub_AuditEntryActor = GitHub_Bot | GitHub_Organization | GitHub_User

# Ordering options for Audit Log connections.
input GitHub_AuditLogOrder {
  # The field to order Audit Logs by.
  field: GitHub_AuditLogOrderField

  # The ordering direction.
  direction: GitHub_OrderDirection
}

# Properties by which Audit Log connections can be ordered.
enum GitHub_AuditLogOrderField {
  # Order audit log entries by timestamp
  CREATED_AT
}

# Represents a 'automatic_base_change_failed' event on a given pull request.
type GitHub_AutomaticBaseChangeFailedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # The new base for this PR
  newBase: String!

  # The old base for this PR
  oldBase: String!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!
}

# Represents a 'automatic_base_change_succeeded' event on a given pull request.
type GitHub_AutomaticBaseChangeSucceededEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # The new base for this PR
  newBase: String!

  # The old base for this PR
  oldBase: String!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!
}

# Represents a 'base_ref_changed' event on a given issue or pull request.
type GitHub_BaseRefChangedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!
}

# Represents a 'base_ref_force_pushed' event on a given pull request.
type GitHub_BaseRefForcePushedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the after commit SHA for the 'base_ref_force_pushed' event.
  afterCommit: GitHub_Commit

  # Identifies the before commit SHA for the 'base_ref_force_pushed' event.
  beforeCommit: GitHub_Commit

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
  ref: GitHub_Ref
}

# Represents a Git blame.
type GitHub_Blame {
  # The list of ranges from a Git blame.
  ranges: [GitHub_BlameRange!]!
}

# Represents a range of information from a Git blame.
type GitHub_BlameRange {
  # Identifies the recency of the change, from 1 (new) to 10 (old). This is
  # calculated as a 2-quantile and determines the length of distance between the
  # median age of all the changes in the file and the recency of the current
  # range's change.
  age: Int!

  # Identifies the line author
  commit: GitHub_Commit!

  # The ending line for the range
  endingLine: Int!

  # The starting line for the range
  startingLine: Int!
}

# Represents a Git blob.
type GitHub_Blob implements GitHub_Node & GitHub_GitObject {
  # An abbreviated version of the Git object ID
  abbreviatedOid: String!

  # Byte size of Blob object
  byteSize: Int!

  # The HTTP path for this Git object
  commitResourcePath: GitHub_URI!

  # The HTTP URL for this Git object
  commitUrl: GitHub_URI!
  id: ID!

  # Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
  isBinary: Boolean

  # Indicates whether the contents is truncated
  isTruncated: Boolean!

  # The Git object ID
  oid: GitHub_GitObjectID!

  # The Repository the Git object belongs to
  repository: GitHub_Repository!

  # UTF8 text data or null if the Blob is binary
  text: String
}

# A special type of user which takes actions on behalf of GitHub Apps.
type GitHub_Bot implements GitHub_Node & GitHub_Actor & GitHub_UniformResourceLocatable {
  # A URL pointing to the GitHub App's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # The username of the actor.
  login: String!

  # The HTTP path for this bot
  resourcePath: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this bot
  url: GitHub_URI!
}

# A branch protection rule.
type GitHub_BranchProtectionRule implements GitHub_Node {
  # A list of conflicts matching branches protection rule and other branch protection rules
  branchProtectionRuleConflicts(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_BranchProtectionRuleConflictConnection!

  # The actor who created this branch protection rule.
  creator: GitHub_Actor

  # Identifies the primary key from the database.
  databaseId: Int

  # Will new commits pushed to matching branches dismiss pull request review approvals.
  dismissesStaleReviews: Boolean!
  id: ID!

  # Can admins overwrite branch protection.
  isAdminEnforced: Boolean!

  # Repository refs that are protected by this rule
  matchingRefs(
    # Filters refs with query on name
    query: String

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RefConnection!

  # Identifies the protection rule pattern.
  pattern: String!

  # A list push allowances for this branch protection rule.
  pushAllowances(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PushAllowanceConnection!

  # The repository associated with this branch protection rule.
  repository: GitHub_Repository

  # Number of approving reviews required to update matching branches.
  requiredApprovingReviewCount: Int

  # List of required status check contexts that must pass for commits to be accepted to matching branches.
  requiredStatusCheckContexts: [String]

  # Are approving reviews required to update matching branches.
  requiresApprovingReviews: Boolean!

  # Are reviews from code owners required to update matching branches.
  requiresCodeOwnerReviews: Boolean!

  # Are commits required to be signed.
  requiresCommitSignatures: Boolean!

  # Are status checks required to update matching branches.
  requiresStatusChecks: Boolean!

  # Are branches required to be up to date before merging.
  requiresStrictStatusChecks: Boolean!

  # Is pushing to matching branches restricted.
  restrictsPushes: Boolean!

  # Is dismissal of pull request reviews restricted.
  restrictsReviewDismissals: Boolean!

  # A list review dismissal allowances for this branch protection rule.
  reviewDismissalAllowances(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ReviewDismissalAllowanceConnection!
}

# A conflict between two branch protection rules.
type GitHub_BranchProtectionRuleConflict {
  # Identifies the branch protection rule.
  branchProtectionRule: GitHub_BranchProtectionRule

  # Identifies the conflicting branch protection rule.
  conflictingBranchProtectionRule: GitHub_BranchProtectionRule

  # Identifies the branch ref that has conflicting rules
  ref: GitHub_Ref
}

# The connection type for BranchProtectionRuleConflict.
type GitHub_BranchProtectionRuleConflictConnection {
  # A list of edges.
  edges: [GitHub_BranchProtectionRuleConflictEdge]

  # A list of nodes.
  nodes: [GitHub_BranchProtectionRuleConflict]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_BranchProtectionRuleConflictEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_BranchProtectionRuleConflict
}

# The connection type for BranchProtectionRule.
type GitHub_BranchProtectionRuleConnection {
  # A list of edges.
  edges: [GitHub_BranchProtectionRuleEdge]

  # A list of nodes.
  nodes: [GitHub_BranchProtectionRule]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_BranchProtectionRuleEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_BranchProtectionRule
}

# Autogenerated input type of CancelEnterpriseAdminInvitation
input GitHub_CancelEnterpriseAdminInvitationInput {
  # The Node ID of the pending enterprise administrator invitation.
  invitationId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CancelEnterpriseAdminInvitation
type GitHub_CancelEnterpriseAdminInvitationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The invitation that was canceled.
  invitation: GitHub_EnterpriseAdministratorInvitation

  # A message confirming the result of canceling an administrator invitation.
  message: String
}

# Autogenerated input type of ChangeUserStatus
input GitHub_ChangeUserStatusInput {
  # The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:.
  emoji: String

  # A short description of your current status.
  message: String

  # The ID of the organization whose members will be allowed to see the status. If
  # omitted, the status will be publicly visible.
  organizationId: ID

  # Whether this status should indicate you are not fully available on GitHub, e.g., you are away.
  limitedAvailability: Boolean = false

  # If set, the user status will not be shown after this date.
  expiresAt: GitHub_DateTime

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ChangeUserStatus
type GitHub_ChangeUserStatusPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Your updated status.
  status: GitHub_UserStatus
}

# Autogenerated input type of ClearLabelsFromLabelable
input GitHub_ClearLabelsFromLabelableInput {
  # The id of the labelable object to clear the labels from.
  labelableId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ClearLabelsFromLabelable
type GitHub_ClearLabelsFromLabelablePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The item that was unlabeled.
  labelable: GitHub_Labelable
}

# Autogenerated input type of CloneProject
input GitHub_CloneProjectInput {
  # The owner ID to create the project under.
  targetOwnerId: ID!

  # The source project to clone.
  sourceId: ID!

  # Whether or not to clone the source project's workflows.
  includeWorkflows: Boolean!

  # The name of the project.
  name: String!

  # The description of the project.
  body: String

  # The visibility of the project, defaults to false (private).
  public: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CloneProject
type GitHub_CloneProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The id of the JobStatus for populating cloned fields.
  jobStatusId: String

  # The new cloned project.
  project: GitHub_Project
}

# Autogenerated input type of CloneTemplateRepository
input GitHub_CloneTemplateRepositoryInput {
  # The Node ID of the template repository.
  repositoryId: ID!

  # The name of the new repository.
  name: String!

  # The ID of the owner for the new repository.
  ownerId: ID!

  # A short description of the new repository.
  description: String

  # Indicates the repository's visibility level.
  visibility: GitHub_RepositoryVisibility!

  # Whether to copy all branches from the template to the new repository. Defaults
  # to copying only the default branch of the template.
  includeAllBranches: Boolean = false

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CloneTemplateRepository
type GitHub_CloneTemplateRepositoryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new repository.
  repository: GitHub_Repository
}

# An object that can be closed
interface GitHub_Closable {
  # `true` if the object is closed (definition of closed may depend on type)
  closed: Boolean!

  # Identifies the date and time when the object was closed.
  closedAt: GitHub_DateTime
}

# Represents a 'closed' event on any `Closable`.
type GitHub_ClosedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Object that was closed.
  closable: GitHub_Closable!

  # Object which triggered the creation of this event.
  closer: GitHub_Closer

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # The HTTP path for this closed event.
  resourcePath: GitHub_URI!

  # The HTTP URL for this closed event.
  url: GitHub_URI!
}

# Autogenerated input type of CloseIssue
input GitHub_CloseIssueInput {
  # ID of the issue to be closed.
  issueId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CloseIssue
type GitHub_CloseIssuePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The issue that was closed.
  issue: GitHub_Issue
}

# Autogenerated input type of ClosePullRequest
input GitHub_ClosePullRequestInput {
  # ID of the pull request to be closed.
  pullRequestId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ClosePullRequest
type GitHub_ClosePullRequestPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The pull request that was closed.
  pullRequest: GitHub_PullRequest
}

# The object which triggered a `ClosedEvent`.
union GitHub_Closer = GitHub_Commit | GitHub_PullRequest

# The Code of Conduct for a repository
type GitHub_CodeOfConduct implements GitHub_Node {
  # The body of the Code of Conduct
  body: String
  id: ID!

  # The key for the Code of Conduct
  key: String!

  # The formal name of the Code of Conduct
  name: String!

  # The HTTP path for this Code of Conduct
  resourcePath: GitHub_URI

  # The HTTP URL for this Code of Conduct
  url: GitHub_URI
}

# Collaborators affiliation level with a subject.
enum GitHub_CollaboratorAffiliation {
  # All outside collaborators of an organization-owned subject.
  OUTSIDE

  # All collaborators with permissions to an organization-owned subject, regardless of organization membership status.
  DIRECT

  # All collaborators the authenticated user can see.
  ALL
}

# Represents a comment.
interface GitHub_Comment {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the subject of the comment.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # The body as Markdown.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body rendered to text.
  bodyText: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # The actor who edited the comment.
  editor: GitHub_Actor
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# A comment author association with repository.
enum GitHub_CommentAuthorAssociation {
  # Author is a member of the organization that owns the repository.
  MEMBER

  # Author is the owner of the repository.
  OWNER

  # Author has been invited to collaborate on the repository.
  COLLABORATOR

  # Author has previously committed to the repository.
  CONTRIBUTOR

  # Author has not previously committed to the repository.
  FIRST_TIME_CONTRIBUTOR

  # Author has not previously committed to GitHub.
  FIRST_TIMER

  # Author has no association with the repository.
  NONE
}

# The possible errors that will prevent a user from updating a comment.
enum GitHub_CommentCannotUpdateReason {
  # Unable to create comment because repository is archived.
  ARCHIVED

  # You must be the author or have write access to this repository to update this comment.
  INSUFFICIENT_ACCESS

  # Unable to create comment because issue is locked.
  LOCKED

  # You must be logged in to update this comment.
  LOGIN_REQUIRED

  # Repository is under maintenance.
  MAINTENANCE

  # At least one email address must be verified to update this comment.
  VERIFIED_EMAIL_REQUIRED

  # You cannot update this comment
  DENIED
}

# Represents a 'comment_deleted' event on a given issue or pull request.
type GitHub_CommentDeletedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!
}

# Represents a Git commit.
type GitHub_Commit implements GitHub_Node & GitHub_GitObject & GitHub_Subscribable & GitHub_UniformResourceLocatable {
  # An abbreviated version of the Git object ID
  abbreviatedOid: String!

  # The number of additions in this commit.
  additions: Int!

  # The pull requests associated with a commit
  associatedPullRequests(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for pull requests.
    orderBy: GitHub_PullRequestOrder = {field: CREATED_AT, direction: ASC}
  ): GitHub_PullRequestConnection

  # Authorship details of the commit.
  author: GitHub_GitActor

  # Check if the committer and the author match.
  authoredByCommitter: Boolean!

  # The datetime when this commit was authored.
  authoredDate: GitHub_DateTime!

  # Fetches `git blame` information.
  blame(
    # The file whose Git blame information you want.
    path: String!
  ): GitHub_Blame!

  # The number of changed files in this commit.
  changedFiles: Int!

  # Comments made on the commit.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_CommitCommentConnection!

  # The HTTP path for this Git object
  commitResourcePath: GitHub_URI!

  # The HTTP URL for this Git object
  commitUrl: GitHub_URI!

  # The datetime when this commit was committed.
  committedDate: GitHub_DateTime!

  # Check if commited via GitHub web UI.
  committedViaWeb: Boolean!

  # Committership details of the commit.
  committer: GitHub_GitActor

  # The number of deletions in this commit.
  deletions: Int!

  # The deployments associated with a commit.
  deployments(
    # Environments to list deployments for
    environments: [String!]

    # Ordering options for deployments returned from the connection.
    orderBy: GitHub_DeploymentOrder = {field: CREATED_AT, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_DeploymentConnection

  # The linear commit history starting from (and including) this commit, in the same order as `git log`.
  history(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If non-null, filters history to only show commits touching files under this path.
    path: String

    # If non-null, filters history to only show commits with matching authorship.
    author: GitHub_CommitAuthor

    # Allows specifying a beginning time or date for fetching commits.
    since: GitHub_GitTimestamp

    # Allows specifying an ending time or date for fetching commits.
    until: GitHub_GitTimestamp
  ): GitHub_CommitHistoryConnection!
  id: ID!

  # The Git commit message
  message: String!

  # The Git commit message body
  messageBody: String!

  # The commit message body rendered to HTML.
  messageBodyHTML: GitHub_HTML!

  # The Git commit message headline
  messageHeadline: String!

  # The commit message headline rendered to HTML.
  messageHeadlineHTML: GitHub_HTML!

  # The Git object ID
  oid: GitHub_GitObjectID!

  # The organization this commit was made on behalf of.
  onBehalfOf: GitHub_Organization

  # The parents of a commit.
  parents(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_CommitConnection!

  # The datetime when this commit was pushed.
  pushedDate: GitHub_DateTime

  # The Repository this commit belongs to
  repository: GitHub_Repository!

  # The HTTP path for this commit
  resourcePath: GitHub_URI!

  # Commit signing information, if present.
  signature: GitHub_GitSignature

  # Status information for this commit
  status: GitHub_Status

  # Check and Status rollup information for this commit.
  statusCheckRollup: GitHub_StatusCheckRollup

  # Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
  submodules(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_SubmoduleConnection!

  # Returns a URL to download a tarball archive for a repository.
  # Note: For private repositories, these links are temporary and expire after five minutes.
  tarballUrl: GitHub_URI!

  # Commit's root Tree
  tree: GitHub_Tree!

  # The HTTP path for the tree of this commit
  treeResourcePath: GitHub_URI!

  # The HTTP URL for the tree of this commit
  treeUrl: GitHub_URI!

  # The HTTP URL for this commit
  url: GitHub_URI!

  # Check if the viewer is able to change their subscription status for the repository.
  viewerCanSubscribe: Boolean!

  # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  viewerSubscription: GitHub_SubscriptionState

  # Returns a URL to download a zipball archive for a repository.
  # Note: For private repositories, these links are temporary and expire after five minutes.
  zipballUrl: GitHub_URI!
}

# Specifies an author for filtering Git commits.
input GitHub_CommitAuthor {
  # ID of a User to filter by. If non-null, only commits authored by this user
  # will be returned. This field takes precedence over emails.
  id: ID

  # Email addresses to filter by. Commits authored by any of the specified email addresses will be returned.
  emails: [String!]
}

# Represents a comment on a given Commit.
type GitHub_CommitComment implements GitHub_Node & GitHub_Comment & GitHub_Deletable & GitHub_Minimizable & GitHub_Updatable & GitHub_UpdatableComment & GitHub_Reactable & GitHub_RepositoryNode {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the subject of the comment.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # Identifies the comment body.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body rendered to text.
  bodyText: String!

  # Identifies the commit associated with the comment, if the commit exists.
  commit: GitHub_Commit

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The actor who edited the comment.
  editor: GitHub_Actor
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # Returns whether or not a comment has been minimized.
  isMinimized: Boolean!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # Returns why the comment was minimized.
  minimizedReason: String

  # Identifies the file path associated with the comment.
  path: String

  # Identifies the line position associated with the comment.
  position: Int

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The repository associated with this node.
  repository: GitHub_Repository!

  # The HTTP path permalink for this commit comment.
  resourcePath: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL permalink for this commit comment.
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!

  # Check if the current viewer can minimize this object.
  viewerCanMinimize: Boolean!

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# The connection type for CommitComment.
type GitHub_CommitCommentConnection {
  # A list of edges.
  edges: [GitHub_CommitCommentEdge]

  # A list of nodes.
  nodes: [GitHub_CommitComment]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_CommitCommentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_CommitComment
}

# A thread of comments on a commit.
type GitHub_CommitCommentThread implements GitHub_Node & GitHub_RepositoryNode {
  # The comments that exist in this thread.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_CommitCommentConnection!

  # The commit the comments were made on.
  commit: GitHub_Commit
  id: ID!

  # The file the comments were made on.
  path: String

  # The position in the diff for the commit that the comment was made on.
  position: Int

  # The repository associated with this node.
  repository: GitHub_Repository!
}

# The connection type for Commit.
type GitHub_CommitConnection {
  # A list of edges.
  edges: [GitHub_CommitEdge]

  # A list of nodes.
  nodes: [GitHub_Commit]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Ordering options for commit contribution connections.
input GitHub_CommitContributionOrder {
  # The field by which to order commit contributions.
  field: GitHub_CommitContributionOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which commit contribution connections can be ordered.
enum GitHub_CommitContributionOrderField {
  # Order commit contributions by when they were made.
  OCCURRED_AT

  # Order commit contributions by how many commits they represent.
  COMMIT_COUNT
}

# This aggregates commits made by a user within one repository.
type GitHub_CommitContributionsByRepository {
  # The commit contributions, each representing a day.
  contributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for commit contributions returned from the connection.
    orderBy: GitHub_CommitContributionOrder = {field: OCCURRED_AT, direction: DESC}
  ): GitHub_CreatedCommitContributionConnection!

  # The repository in which the commits were made.
  repository: GitHub_Repository!

  # The HTTP path for the user's commits to the repository in this time range.
  resourcePath: GitHub_URI!

  # The HTTP URL for the user's commits to the repository in this time range.
  url: GitHub_URI!
}

# An edge in a connection.
type GitHub_CommitEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Commit
}

# The connection type for Commit.
type GitHub_CommitHistoryConnection {
  # A list of edges.
  edges: [GitHub_CommitEdge]

  # A list of nodes.
  nodes: [GitHub_Commit]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a 'connected' event on a given issue or pull request.
type GitHub_ConnectedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Reference originated in a different repository.
  isCrossRepository: Boolean!

  # Issue or pull request that made the reference.
  source: GitHub_ReferencedSubject!

  # Issue or pull request which was connected.
  subject: GitHub_ReferencedSubject!
}

# Represents a contribution a user made on GitHub, such as opening an issue.
interface GitHub_Contribution {
  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# A calendar of contributions made on GitHub by a user.
type GitHub_ContributionCalendar {
  # A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
  colors: [String!]!

  # Determine if the color set was chosen because it's currently Halloween.
  isHalloween: Boolean!

  # A list of the months of contributions in this calendar.
  months: [GitHub_ContributionCalendarMonth!]!

  # The count of total contributions in the calendar.
  totalContributions: Int!

  # A list of the weeks of contributions in this calendar.
  weeks: [GitHub_ContributionCalendarWeek!]!
}

# Represents a single day of contributions on GitHub by a user.
type GitHub_ContributionCalendarDay {
  # The hex color code that represents how many contributions were made on this day compared to others in the calendar.
  color: String!

  # How many contributions were made by the user on this day.
  contributionCount: Int!

  # The day this square represents.
  date: GitHub_Date!

  # A number representing which day of the week this square represents, e.g., 1 is Monday.
  weekday: Int!
}

# A month of contributions in a user's contribution graph.
type GitHub_ContributionCalendarMonth {
  # The date of the first day of this month.
  firstDay: GitHub_Date!

  # The name of the month.
  name: String!

  # How many weeks started in this month.
  totalWeeks: Int!

  # The year the month occurred in.
  year: Int!
}

# A week of contributions in a user's contribution graph.
type GitHub_ContributionCalendarWeek {
  # The days of contributions in this week.
  contributionDays: [GitHub_ContributionCalendarDay!]!

  # The date of the earliest square in this week.
  firstDay: GitHub_Date!
}

# Ordering options for contribution connections.
input GitHub_ContributionOrder {
  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# A contributions collection aggregates contributions such as opened issues and commits created by a user.
type GitHub_ContributionsCollection {
  # Commit contributions made by the user, grouped by repository.
  commitContributionsByRepository(
    # How many repositories should be included.
    maxRepositories: Int = 25
  ): [GitHub_CommitContributionsByRepository!]!

  # A calendar of this user's contributions on GitHub.
  contributionCalendar: GitHub_ContributionCalendar!

  # The years the user has been making contributions with the most recent year first.
  contributionYears: [Int!]!

  # Determine if this collection's time span ends in the current month.
  #
  doesEndInCurrentMonth: Boolean!

  # The date of the first restricted contribution the user made in this time
  # period. Can only be non-null when the user has enabled private contribution counts.
  earliestRestrictedContributionDate: GitHub_Date

  # The ending date and time of this collection.
  endedAt: GitHub_DateTime!

  # The first issue the user opened on GitHub. This will be null if that issue was
  # opened outside the collection's time range and ignoreTimeRange is false. If
  # the issue is not visible but the user has opted to show private contributions,
  # a RestrictedContribution will be returned.
  firstIssueContribution: GitHub_CreatedIssueOrRestrictedContribution

  # The first pull request the user opened on GitHub. This will be null if that
  # pull request was opened outside the collection's time range and
  # ignoreTimeRange is not true. If the pull request is not visible but the user
  # has opted to show private contributions, a RestrictedContribution will be returned.
  firstPullRequestContribution: GitHub_CreatedPullRequestOrRestrictedContribution

  # The first repository the user created on GitHub. This will be null if that
  # first repository was created outside the collection's time range and
  # ignoreTimeRange is false. If the repository is not visible, then a
  # RestrictedContribution is returned.
  firstRepositoryContribution: GitHub_CreatedRepositoryOrRestrictedContribution

  # Does the user have any more activity in the timeline that occurred prior to the collection's time range?
  hasActivityInThePast: Boolean!

  # Determine if there are any contributions in this collection.
  hasAnyContributions: Boolean!

  # Determine if the user made any contributions in this time frame whose details
  # are not visible because they were made in a private repository. Can only be
  # true if the user enabled private contribution counts.
  hasAnyRestrictedContributions: Boolean!

  # Whether or not the collector's time span is all within the same day.
  isSingleDay: Boolean!

  # A list of issues the user opened.
  issueContributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Should the user's first issue ever be excluded from the result.
    excludeFirst: Boolean = false

    # Should the user's most commented issue be excluded from the result.
    excludePopular: Boolean = false

    # Ordering options for contributions returned from the connection.
    orderBy: GitHub_ContributionOrder = {direction: DESC}
  ): GitHub_CreatedIssueContributionConnection!

  # Issue contributions made by the user, grouped by repository.
  issueContributionsByRepository(
    # How many repositories should be included.
    maxRepositories: Int = 25

    # Should the user's first issue ever be excluded from the result.
    excludeFirst: Boolean = false

    # Should the user's most commented issue be excluded from the result.
    excludePopular: Boolean = false
  ): [GitHub_IssueContributionsByRepository!]!

  # When the user signed up for GitHub. This will be null if that sign up date
  # falls outside the collection's time range and ignoreTimeRange is false.
  joinedGitHubContribution: GitHub_JoinedGitHubContribution

  # The date of the most recent restricted contribution the user made in this time
  # period. Can only be non-null when the user has enabled private contribution counts.
  latestRestrictedContributionDate: GitHub_Date

  # When this collection's time range does not include any activity from the user, use this
  # to get a different collection from an earlier time range that does have activity.
  #
  mostRecentCollectionWithActivity: GitHub_ContributionsCollection

  # Returns a different contributions collection from an earlier time range than this one
  # that does not have any contributions.
  #
  mostRecentCollectionWithoutActivity: GitHub_ContributionsCollection

  # The issue the user opened on GitHub that received the most comments in the specified
  # time frame.
  #
  popularIssueContribution: GitHub_CreatedIssueContribution

  # The pull request the user opened on GitHub that received the most comments in the
  # specified time frame.
  #
  popularPullRequestContribution: GitHub_CreatedPullRequestContribution

  # Pull request contributions made by the user.
  pullRequestContributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Should the user's first pull request ever be excluded from the result.
    excludeFirst: Boolean = false

    # Should the user's most commented pull request be excluded from the result.
    excludePopular: Boolean = false

    # Ordering options for contributions returned from the connection.
    orderBy: GitHub_ContributionOrder = {direction: DESC}
  ): GitHub_CreatedPullRequestContributionConnection!

  # Pull request contributions made by the user, grouped by repository.
  pullRequestContributionsByRepository(
    # How many repositories should be included.
    maxRepositories: Int = 25

    # Should the user's first pull request ever be excluded from the result.
    excludeFirst: Boolean = false

    # Should the user's most commented pull request be excluded from the result.
    excludePopular: Boolean = false
  ): [GitHub_PullRequestContributionsByRepository!]!

  # Pull request review contributions made by the user.
  pullRequestReviewContributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for contributions returned from the connection.
    orderBy: GitHub_ContributionOrder = {direction: DESC}
  ): GitHub_CreatedPullRequestReviewContributionConnection!

  # Pull request review contributions made by the user, grouped by repository.
  pullRequestReviewContributionsByRepository(
    # How many repositories should be included.
    maxRepositories: Int = 25
  ): [GitHub_PullRequestReviewContributionsByRepository!]!

  # A list of repositories owned by the user that the user created in this time range.
  repositoryContributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Should the user's first repository ever be excluded from the result.
    excludeFirst: Boolean = false

    # Ordering options for contributions returned from the connection.
    orderBy: GitHub_ContributionOrder = {direction: DESC}
  ): GitHub_CreatedRepositoryContributionConnection!

  # A count of contributions made by the user that the viewer cannot access. Only
  # non-zero when the user has chosen to share their private contribution counts.
  restrictedContributionsCount: Int!

  # The beginning date and time of this collection.
  startedAt: GitHub_DateTime!

  # How many commits were made by the user in this time span.
  totalCommitContributions: Int!

  # How many issues the user opened.
  totalIssueContributions(
    # Should the user's first issue ever be excluded from this count.
    excludeFirst: Boolean = false

    # Should the user's most commented issue be excluded from this count.
    excludePopular: Boolean = false
  ): Int!

  # How many pull requests the user opened.
  totalPullRequestContributions(
    # Should the user's first pull request ever be excluded from this count.
    excludeFirst: Boolean = false

    # Should the user's most commented pull request be excluded from this count.
    excludePopular: Boolean = false
  ): Int!

  # How many pull request reviews the user left.
  totalPullRequestReviewContributions: Int!

  # How many different repositories the user committed to.
  totalRepositoriesWithContributedCommits: Int!

  # How many different repositories the user opened issues in.
  totalRepositoriesWithContributedIssues(
    # Should the user's first issue ever be excluded from this count.
    excludeFirst: Boolean = false

    # Should the user's most commented issue be excluded from this count.
    excludePopular: Boolean = false
  ): Int!

  # How many different repositories the user left pull request reviews in.
  totalRepositoriesWithContributedPullRequestReviews: Int!

  # How many different repositories the user opened pull requests in.
  totalRepositoriesWithContributedPullRequests(
    # Should the user's first pull request ever be excluded from this count.
    excludeFirst: Boolean = false

    # Should the user's most commented pull request be excluded from this count.
    excludePopular: Boolean = false
  ): Int!

  # How many repositories the user created.
  totalRepositoryContributions(
    # Should the user's first repository ever be excluded from this count.
    excludeFirst: Boolean = false
  ): Int!

  # The user who made the contributions in this collection.
  user: GitHub_User!
}

# Represents a 'converted_note_to_issue' event on a given issue or pull request.
type GitHub_ConvertedNoteToIssueEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!
}

# Autogenerated input type of ConvertProjectCardNoteToIssue
input GitHub_ConvertProjectCardNoteToIssueInput {
  # The ProjectCard ID to convert.
  projectCardId: ID!

  # The ID of the repository to create the issue in.
  repositoryId: ID!

  # The title of the newly created issue. Defaults to the card's note text.
  title: String

  # The body of the newly created issue.
  body: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ConvertProjectCardNoteToIssue
type GitHub_ConvertProjectCardNoteToIssuePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated ProjectCard.
  projectCard: GitHub_ProjectCard
}

# Represents a 'convert_to_draft' event on a given pull request.
type GitHub_ConvertToDraftEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # The HTTP path for this convert to draft event.
  resourcePath: GitHub_URI!

  # The HTTP URL for this convert to draft event.
  url: GitHub_URI!
}

# Autogenerated input type of CreateBranchProtectionRule
input GitHub_CreateBranchProtectionRuleInput {
  # The global relay id of the repository in which a new branch protection rule should be created in.
  repositoryId: ID!

  # The glob-like pattern used to determine matching branches.
  pattern: String!

  # Are approving reviews required to update matching branches.
  requiresApprovingReviews: Boolean

  # Number of approving reviews required to update matching branches.
  requiredApprovingReviewCount: Int

  # Are commits required to be signed.
  requiresCommitSignatures: Boolean

  # Can admins overwrite branch protection.
  isAdminEnforced: Boolean

  # Are status checks required to update matching branches.
  requiresStatusChecks: Boolean

  # Are branches required to be up to date before merging.
  requiresStrictStatusChecks: Boolean

  # Are reviews from code owners required to update matching branches.
  requiresCodeOwnerReviews: Boolean

  # Will new commits pushed to matching branches dismiss pull request review approvals.
  dismissesStaleReviews: Boolean

  # Is dismissal of pull request reviews restricted.
  restrictsReviewDismissals: Boolean

  # A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  reviewDismissalActorIds: [ID!]

  # Is pushing to matching branches restricted.
  restrictsPushes: Boolean

  # A list of User, Team or App IDs allowed to push to matching branches.
  pushActorIds: [ID!]

  # List of required status check contexts that must pass for commits to be accepted to matching branches.
  requiredStatusCheckContexts: [String!]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateBranchProtectionRule
type GitHub_CreateBranchProtectionRulePayload {
  # The newly created BranchProtectionRule.
  branchProtectionRule: GitHub_BranchProtectionRule

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Represents the contribution a user made by committing to a repository.
type GitHub_CreatedCommitContribution implements GitHub_Contribution {
  # How many commits were made on this day to this repository by the user.
  commitCount: Int!

  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The repository the user made a commit in.
  repository: GitHub_Repository!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# The connection type for CreatedCommitContribution.
type GitHub_CreatedCommitContributionConnection {
  # A list of edges.
  edges: [GitHub_CreatedCommitContributionEdge]

  # A list of nodes.
  nodes: [GitHub_CreatedCommitContribution]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of commits across days and repositories in the connection.
  #
  totalCount: Int!
}

# An edge in a connection.
type GitHub_CreatedCommitContributionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_CreatedCommitContribution
}

# Represents the contribution a user made on GitHub by opening an issue.
type GitHub_CreatedIssueContribution implements GitHub_Contribution {
  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # The issue that was opened.
  issue: GitHub_Issue!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# The connection type for CreatedIssueContribution.
type GitHub_CreatedIssueContributionConnection {
  # A list of edges.
  edges: [GitHub_CreatedIssueContributionEdge]

  # A list of nodes.
  nodes: [GitHub_CreatedIssueContribution]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_CreatedIssueContributionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_CreatedIssueContribution
}

# Represents either a issue the viewer can access or a restricted contribution.
union GitHub_CreatedIssueOrRestrictedContribution = GitHub_CreatedIssueContribution | GitHub_RestrictedContribution

# Represents the contribution a user made on GitHub by opening a pull request.
type GitHub_CreatedPullRequestContribution implements GitHub_Contribution {
  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The pull request that was opened.
  pullRequest: GitHub_PullRequest!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# The connection type for CreatedPullRequestContribution.
type GitHub_CreatedPullRequestContributionConnection {
  # A list of edges.
  edges: [GitHub_CreatedPullRequestContributionEdge]

  # A list of nodes.
  nodes: [GitHub_CreatedPullRequestContribution]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_CreatedPullRequestContributionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_CreatedPullRequestContribution
}

# Represents either a pull request the viewer can access or a restricted contribution.
union GitHub_CreatedPullRequestOrRestrictedContribution = GitHub_CreatedPullRequestContribution | GitHub_RestrictedContribution

# Represents the contribution a user made by leaving a review on a pull request.
type GitHub_CreatedPullRequestReviewContribution implements GitHub_Contribution {
  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The pull request the user reviewed.
  pullRequest: GitHub_PullRequest!

  # The review the user left on the pull request.
  pullRequestReview: GitHub_PullRequestReview!

  # The repository containing the pull request that the user reviewed.
  repository: GitHub_Repository!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# The connection type for CreatedPullRequestReviewContribution.
type GitHub_CreatedPullRequestReviewContributionConnection {
  # A list of edges.
  edges: [GitHub_CreatedPullRequestReviewContributionEdge]

  # A list of nodes.
  nodes: [GitHub_CreatedPullRequestReviewContribution]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_CreatedPullRequestReviewContributionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_CreatedPullRequestReviewContribution
}

# Represents the contribution a user made on GitHub by creating a repository.
type GitHub_CreatedRepositoryContribution implements GitHub_Contribution {
  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The repository that was created.
  repository: GitHub_Repository!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# The connection type for CreatedRepositoryContribution.
type GitHub_CreatedRepositoryContributionConnection {
  # A list of edges.
  edges: [GitHub_CreatedRepositoryContributionEdge]

  # A list of nodes.
  nodes: [GitHub_CreatedRepositoryContribution]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_CreatedRepositoryContributionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_CreatedRepositoryContribution
}

# Represents either a repository the viewer can access or a restricted contribution.
union GitHub_CreatedRepositoryOrRestrictedContribution = GitHub_CreatedRepositoryContribution | GitHub_RestrictedContribution

# Autogenerated input type of CreateEnterpriseOrganization
input GitHub_CreateEnterpriseOrganizationInput {
  # The ID of the enterprise owning the new organization.
  enterpriseId: ID!

  # The login of the new organization.
  login: String!

  # The profile name of the new organization.
  profileName: String!

  # The email used for sending billing receipts.
  billingEmail: String!

  # The logins for the administrators of the new organization.
  adminLogins: [String!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateEnterpriseOrganization
type GitHub_CreateEnterpriseOrganizationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise that owns the created organization.
  enterprise: GitHub_Enterprise

  # The organization that was created.
  organization: GitHub_Organization
}

# Autogenerated input type of CreateIpAllowListEntry
input GitHub_CreateIpAllowListEntryInput {
  # The ID of the owner for which to create the new IP allow list entry.
  ownerId: ID!

  # An IP address or range of addresses in CIDR notation.
  allowListValue: String!

  # An optional name for the IP allow list entry.
  name: String

  # Whether the IP allow list entry is active when an IP allow list is enabled.
  isActive: Boolean!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateIpAllowListEntry
type GitHub_CreateIpAllowListEntryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The IP allow list entry that was created.
  ipAllowListEntry: GitHub_IpAllowListEntry
}

# Autogenerated input type of CreateIssue
input GitHub_CreateIssueInput {
  # The Node ID of the repository.
  repositoryId: ID!

  # The title for the issue.
  title: String!

  # The body for the issue description.
  body: String

  # The Node ID for the user assignee for this issue.
  assigneeIds: [ID!]

  # The Node ID of the milestone for this issue.
  milestoneId: ID

  # An array of Node IDs of labels for this issue.
  labelIds: [ID!]

  # An array of Node IDs for projects associated with this issue.
  projectIds: [ID!]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateIssue
type GitHub_CreateIssuePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new issue.
  issue: GitHub_Issue
}

# Autogenerated input type of CreateProject
input GitHub_CreateProjectInput {
  # The owner ID to create the project under.
  ownerId: ID!

  # The name of project.
  name: String!

  # The description of project.
  body: String

  # The name of the GitHub-provided template.
  template: GitHub_ProjectTemplate

  # A list of repository IDs to create as linked repositories for the project
  repositoryIds: [ID!]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateProject
type GitHub_CreateProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new project.
  project: GitHub_Project
}

# Autogenerated input type of CreatePullRequest
input GitHub_CreatePullRequestInput {
  # The Node ID of the repository.
  repositoryId: ID!

  # The name of the branch you want your changes pulled into. This should be an existing branch
  # on the current repository. You cannot update the base branch on a pull request to point
  # to another repository.
  #
  baseRefName: String!

  # The name of the branch where your changes are implemented. For cross-repository pull requests
  # in the same network, namespace `head_ref_name` with a user like this: `username:branch`.
  #
  headRefName: String!

  # The title of the pull request.
  title: String!

  # The contents of the pull request.
  body: String

  # Indicates whether maintainers can modify the pull request.
  maintainerCanModify: Boolean = true

  # Indicates whether this pull request should be a draft.
  draft: Boolean = false

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreatePullRequest
type GitHub_CreatePullRequestPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new pull request.
  pullRequest: GitHub_PullRequest
}

# Autogenerated input type of CreateRef
input GitHub_CreateRefInput {
  # The Node ID of the Repository to create the Ref in.
  repositoryId: ID!

  # The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`).
  name: String!

  # The GitObjectID that the new Ref shall target. Must point to a commit.
  oid: GitHub_GitObjectID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateRef
type GitHub_CreateRefPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The newly created ref.
  ref: GitHub_Ref
}

# Autogenerated input type of CreateRepository
input GitHub_CreateRepositoryInput {
  # The name of the new repository.
  name: String!

  # The ID of the owner for the new repository.
  ownerId: ID

  # A short description of the new repository.
  description: String

  # Indicates the repository's visibility level.
  visibility: GitHub_RepositoryVisibility!

  # Whether this repository should be marked as a template such that anyone who
  # can access it can create new repositories with the same files and directory structure.
  template: Boolean = false

  # The URL for a web page about this repository.
  homepageUrl: GitHub_URI

  # Indicates if the repository should have the wiki feature enabled.
  hasWikiEnabled: Boolean = false

  # Indicates if the repository should have the issues feature enabled.
  hasIssuesEnabled: Boolean = true

  # When an organization is specified as the owner, this ID identifies the team
  # that should be granted access to the new repository.
  teamId: ID

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateRepository
type GitHub_CreateRepositoryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new repository.
  repository: GitHub_Repository
}

# Autogenerated input type of CreateTeamDiscussionComment
input GitHub_CreateTeamDiscussionCommentInput {
  # The ID of the discussion to which the comment belongs.
  discussionId: ID!

  # The content of the comment.
  body: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateTeamDiscussionComment
type GitHub_CreateTeamDiscussionCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new comment.
  teamDiscussionComment: GitHub_TeamDiscussionComment
}

# Autogenerated input type of CreateTeamDiscussion
input GitHub_CreateTeamDiscussionInput {
  # The ID of the team to which the discussion belongs.
  teamId: ID!

  # The title of the discussion.
  title: String!

  # The content of the discussion.
  body: String!

  # If true, restricts the visiblity of this discussion to team members and
  # organization admins. If false or not specified, allows any organization member
  # to view this discussion.
  private: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateTeamDiscussion
type GitHub_CreateTeamDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new discussion.
  teamDiscussion: GitHub_TeamDiscussion
}

# Represents a mention made by one issue or pull request to another.
type GitHub_CrossReferencedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Reference originated in a different repository.
  isCrossRepository: Boolean!

  # Identifies when the reference was made.
  referencedAt: GitHub_DateTime!

  # The HTTP path for this pull request.
  resourcePath: GitHub_URI!

  # Issue or pull request that made the reference.
  source: GitHub_ReferencedSubject!

  # Issue or pull request to which the reference was made.
  target: GitHub_ReferencedSubject!

  # The HTTP URL for this pull request.
  url: GitHub_URI!

  # Checks if the target will be closed when the source is merged.
  willCloseTarget: Boolean!
}

# An ISO-8601 encoded date string.
scalar GitHub_Date

# An ISO-8601 encoded UTC date string.
scalar GitHub_DateTime

# Autogenerated input type of DeclineTopicSuggestion
input GitHub_DeclineTopicSuggestionInput {
  # The Node ID of the repository.
  repositoryId: ID!

  # The name of the suggested topic.
  name: String!

  # The reason why the suggested topic is declined.
  reason: GitHub_TopicSuggestionDeclineReason!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeclineTopicSuggestion
type GitHub_DeclineTopicSuggestionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The declined topic.
  topic: GitHub_Topic
}

# The possible default permissions for repositories.
enum GitHub_DefaultRepositoryPermissionField {
  # No access
  NONE

  # Can read repos by default
  READ

  # Can read and write repos by default
  WRITE

  # Can read, write, and administrate repos by default
  ADMIN
}

# Entities that can be deleted.
interface GitHub_Deletable {
  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!
}

# Autogenerated input type of DeleteBranchProtectionRule
input GitHub_DeleteBranchProtectionRuleInput {
  # The global relay id of the branch protection rule to be deleted.
  branchProtectionRuleId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteBranchProtectionRule
type GitHub_DeleteBranchProtectionRulePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of DeleteDeployment
input GitHub_DeleteDeploymentInput {
  # The Node ID of the deployment to be deleted.
  id: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteDeployment
type GitHub_DeleteDeploymentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of DeleteIpAllowListEntry
input GitHub_DeleteIpAllowListEntryInput {
  # The ID of the IP allow list entry to delete.
  ipAllowListEntryId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteIpAllowListEntry
type GitHub_DeleteIpAllowListEntryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The IP allow list entry that was deleted.
  ipAllowListEntry: GitHub_IpAllowListEntry
}

# Autogenerated input type of DeleteIssueComment
input GitHub_DeleteIssueCommentInput {
  # The ID of the comment to delete.
  id: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteIssueComment
type GitHub_DeleteIssueCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of DeleteIssue
input GitHub_DeleteIssueInput {
  # The ID of the issue to delete.
  issueId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteIssue
type GitHub_DeleteIssuePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The repository the issue belonged to
  repository: GitHub_Repository
}

# Autogenerated input type of DeleteProjectCard
input GitHub_DeleteProjectCardInput {
  # The id of the card to delete.
  cardId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteProjectCard
type GitHub_DeleteProjectCardPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The column the deleted card was in.
  column: GitHub_ProjectColumn

  # The deleted card ID.
  deletedCardId: ID
}

# Autogenerated input type of DeleteProjectColumn
input GitHub_DeleteProjectColumnInput {
  # The id of the column to delete.
  columnId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteProjectColumn
type GitHub_DeleteProjectColumnPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The deleted column ID.
  deletedColumnId: ID

  # The project the deleted column was in.
  project: GitHub_Project
}

# Autogenerated input type of DeleteProject
input GitHub_DeleteProjectInput {
  # The Project ID to update.
  projectId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteProject
type GitHub_DeleteProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The repository or organization the project was removed from.
  owner: GitHub_ProjectOwner
}

# Autogenerated input type of DeletePullRequestReviewComment
input GitHub_DeletePullRequestReviewCommentInput {
  # The ID of the comment to delete.
  id: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeletePullRequestReviewComment
type GitHub_DeletePullRequestReviewCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The pull request review the deleted comment belonged to.
  pullRequestReview: GitHub_PullRequestReview
}

# Autogenerated input type of DeletePullRequestReview
input GitHub_DeletePullRequestReviewInput {
  # The Node ID of the pull request review to delete.
  pullRequestReviewId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeletePullRequestReview
type GitHub_DeletePullRequestReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The deleted pull request review.
  pullRequestReview: GitHub_PullRequestReview
}

# Autogenerated input type of DeleteRef
input GitHub_DeleteRefInput {
  # The Node ID of the Ref to be deleted.
  refId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteRef
type GitHub_DeleteRefPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of DeleteTeamDiscussionComment
input GitHub_DeleteTeamDiscussionCommentInput {
  # The ID of the comment to delete.
  id: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteTeamDiscussionComment
type GitHub_DeleteTeamDiscussionCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of DeleteTeamDiscussion
input GitHub_DeleteTeamDiscussionInput {
  # The discussion ID to delete.
  id: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteTeamDiscussion
type GitHub_DeleteTeamDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Represents a 'demilestoned' event on a given issue or pull request.
type GitHub_DemilestonedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the milestone title associated with the 'demilestoned' event.
  milestoneTitle: String!

  # Object referenced by event.
  subject: GitHub_MilestoneItem!
}

# Represents a 'deployed' event on a given pull request.
type GitHub_DeployedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The deployment associated with the 'deployed' event.
  deployment: GitHub_Deployment!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # The ref associated with the 'deployed' event.
  ref: GitHub_Ref
}

# A repository deploy key.
type GitHub_DeployKey implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # The deploy key.
  key: String!

  # Whether or not the deploy key is read only.
  readOnly: Boolean!

  # The deploy key title.
  title: String!

  # Whether or not the deploy key has been verified.
  verified: Boolean!
}

# The connection type for DeployKey.
type GitHub_DeployKeyConnection {
  # A list of edges.
  edges: [GitHub_DeployKeyEdge]

  # A list of nodes.
  nodes: [GitHub_DeployKey]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_DeployKeyEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_DeployKey
}

# Represents triggered deployment instance.
type GitHub_Deployment implements GitHub_Node {
  # Identifies the commit sha of the deployment.
  commit: GitHub_Commit

  # Identifies the oid of the deployment commit, even if the commit has been deleted.
  commitOid: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the actor who triggered the deployment.
  creator: GitHub_Actor!

  # Identifies the primary key from the database.
  databaseId: Int

  # The deployment description.
  description: String

  # The latest environment to which this deployment was made.
  environment: String
  id: ID!

  # The latest environment to which this deployment was made.
  latestEnvironment: String

  # The latest status of this deployment.
  latestStatus: GitHub_DeploymentStatus

  # The original environment to which this deployment was made.
  originalEnvironment: String

  # Extra information that a deployment system might need.
  payload: String

  # Identifies the Ref of the deployment, if the deployment was created by ref.
  ref: GitHub_Ref

  # Identifies the repository associated with the deployment.
  repository: GitHub_Repository!

  # The current state of the deployment.
  state: GitHub_DeploymentState

  # A list of statuses associated with the deployment.
  statuses(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_DeploymentStatusConnection

  # The deployment task.
  task: String

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!
}

# The connection type for Deployment.
type GitHub_DeploymentConnection {
  # A list of edges.
  edges: [GitHub_DeploymentEdge]

  # A list of nodes.
  nodes: [GitHub_Deployment]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_DeploymentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Deployment
}

# Represents a 'deployment_environment_changed' event on a given pull request.
type GitHub_DeploymentEnvironmentChangedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The deployment status that updated the deployment environment.
  deploymentStatus: GitHub_DeploymentStatus!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!
}

# Ordering options for deployment connections
input GitHub_DeploymentOrder {
  # The field to order deployments by.
  field: GitHub_DeploymentOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which deployment connections can be ordered.
enum GitHub_DeploymentOrderField {
  # Order collection by creation time
  CREATED_AT
}

# The possible states in which a deployment can be.
enum GitHub_DeploymentState {
  # The pending deployment was not updated after 30 minutes.
  ABANDONED

  # The deployment is currently active.
  ACTIVE

  # An inactive transient deployment.
  DESTROYED

  # The deployment experienced an error.
  ERROR

  # The deployment has failed.
  FAILURE

  # The deployment is inactive.
  INACTIVE

  # The deployment is pending.
  PENDING

  # The deployment has queued
  QUEUED

  # The deployment is in progress.
  IN_PROGRESS
}

# Describes the status of a given deployment attempt.
type GitHub_DeploymentStatus implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the actor who triggered the deployment.
  creator: GitHub_Actor!

  # Identifies the deployment associated with status.
  deployment: GitHub_Deployment!

  # Identifies the description of the deployment.
  description: String

  # Identifies the environment URL of the deployment.
  environmentUrl: GitHub_URI
  id: ID!

  # Identifies the log URL of the deployment.
  logUrl: GitHub_URI

  # Identifies the current state of the deployment.
  state: GitHub_DeploymentStatusState!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!
}

# The connection type for DeploymentStatus.
type GitHub_DeploymentStatusConnection {
  # A list of edges.
  edges: [GitHub_DeploymentStatusEdge]

  # A list of nodes.
  nodes: [GitHub_DeploymentStatus]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_DeploymentStatusEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_DeploymentStatus
}

# The possible states for a deployment status.
enum GitHub_DeploymentStatusState {
  # The deployment is pending.
  PENDING

  # The deployment was successful.
  SUCCESS

  # The deployment has failed.
  FAILURE

  # The deployment is inactive.
  INACTIVE

  # The deployment experienced an error.
  ERROR

  # The deployment is queued
  QUEUED

  # The deployment is in progress.
  IN_PROGRESS
}

# The possible sides of a diff.
enum GitHub_DiffSide {
  # The left side of the diff.
  LEFT

  # The right side of the diff.
  RIGHT
}

# Represents a 'disconnected' event on a given issue or pull request.
type GitHub_DisconnectedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Reference originated in a different repository.
  isCrossRepository: Boolean!

  # Issue or pull request from which the issue was disconnected.
  source: GitHub_ReferencedSubject!

  # Issue or pull request which was disconnected.
  subject: GitHub_ReferencedSubject!
}

# Autogenerated input type of DismissPullRequestReview
input GitHub_DismissPullRequestReviewInput {
  # The Node ID of the pull request review to modify.
  pullRequestReviewId: ID!

  # The contents of the pull request review dismissal message.
  message: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DismissPullRequestReview
type GitHub_DismissPullRequestReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The dismissed pull request review.
  pullRequestReview: GitHub_PullRequestReview
}

# Specifies a review comment to be left with a Pull Request Review.
input GitHub_DraftPullRequestReviewComment {
  # Path to the file being commented on.
  path: String!

  # Position in the file to leave a comment on.
  position: Int!

  # Body of the comment to leave.
  body: String!
}

# Specifies a review comment thread to be left with a Pull Request Review.
input GitHub_DraftPullRequestReviewThread {
  # Path to the file being commented on.
  path: String!

  # The line of the blob to which the thread refers. The end of the line range for multi-line comments.
  line: Int!

  # The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range.
  side: GitHub_DiffSide = RIGHT

  # The first line of the range to which the comment refers.
  startLine: Int

  # The side of the diff on which the start line resides.
  startSide: GitHub_DiffSide = RIGHT

  # Body of the comment to leave.
  body: String!
}

# An account to manage multiple organizations with consolidated policy and billing.
type GitHub_Enterprise implements GitHub_Node {
  # A URL pointing to the enterprise's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # Enterprise billing information visible to enterprise billing managers.
  billingInfo: GitHub_EnterpriseBillingInfo

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The description of the enterprise.
  description: String

  # The description of the enterprise as HTML.
  descriptionHTML: GitHub_HTML!
  id: ID!

  # The location of the enterprise.
  location: String

  # A list of users who are members of this enterprise.
  members(
    # Only return members within the organizations with these logins
    organizationLogins: [String!]

    # The search string to look for.
    query: String

    # Ordering options for members returned from the connection.
    orderBy: GitHub_EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    # The role of the user in the enterprise organization or server.
    role: GitHub_EnterpriseUserAccountMembershipRole

    # Only return members within the selected GitHub Enterprise deployment
    deployment: GitHub_EnterpriseUserDeployment

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseMemberConnection!

  # The name of the enterprise.
  name: String!

  # A list of organizations that belong to this enterprise.
  organizations(
    # The search string to look for.
    query: String

    # Ordering options for organizations returned from the connection.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_OrganizationConnection!

  # Enterprise information only visible to enterprise owners.
  ownerInfo: GitHub_EnterpriseOwnerInfo

  # The HTTP path for this enterprise.
  resourcePath: GitHub_URI!

  # The URL-friendly identifier for the enterprise.
  slug: String!

  # The HTTP URL for this enterprise.
  url: GitHub_URI!

  # A list of user accounts on this enterprise.
  userAccounts(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseUserAccountConnection!

  # Is the current viewer an admin of this enterprise?
  viewerIsAdmin: Boolean!

  # The URL of the enterprise website.
  websiteUrl: GitHub_URI
}

# The connection type for User.
type GitHub_EnterpriseAdministratorConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseAdministratorEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# A User who is an administrator of an enterprise.
type GitHub_EnterpriseAdministratorEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_User

  # The role of the administrator.
  role: GitHub_EnterpriseAdministratorRole!
}

# An invitation for a user to become an owner or billing manager of an enterprise.
type GitHub_EnterpriseAdministratorInvitation implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The email of the person who was invited to the enterprise.
  email: String

  # The enterprise the invitation is for.
  enterprise: GitHub_Enterprise!
  id: ID!

  # The user who was invited to the enterprise.
  invitee: GitHub_User

  # The user who created the invitation.
  inviter: GitHub_User

  # The invitee's pending role in the enterprise (owner or billing_manager).
  role: GitHub_EnterpriseAdministratorRole!
}

# The connection type for EnterpriseAdministratorInvitation.
type GitHub_EnterpriseAdministratorInvitationConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseAdministratorInvitationEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseAdministratorInvitation]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_EnterpriseAdministratorInvitationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_EnterpriseAdministratorInvitation
}

# Ordering options for enterprise administrator invitation connections
input GitHub_EnterpriseAdministratorInvitationOrder {
  # The field to order enterprise administrator invitations by.
  field: GitHub_EnterpriseAdministratorInvitationOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which enterprise administrator invitation connections can be ordered.
enum GitHub_EnterpriseAdministratorInvitationOrderField {
  # Order enterprise administrator member invitations by creation time
  CREATED_AT
}

# The possible administrator roles in an enterprise account.
enum GitHub_EnterpriseAdministratorRole {
  # Represents an owner of the enterprise account.
  OWNER

  # Represents a billing manager of the enterprise account.
  BILLING_MANAGER
}

# Metadata for an audit entry containing enterprise account information.
interface GitHub_EnterpriseAuditEntryData {
  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
}

# Enterprise billing information visible to enterprise billing managers and owners.
type GitHub_EnterpriseBillingInfo {
  # The number of licenseable users/emails across the enterprise.
  allLicensableUsersCount: Int!

  # The number of data packs used by all organizations owned by the enterprise.
  assetPacks: Int!

  # The number of available seats across all owned organizations based on the unique number of billable users.
  availableSeats: Int! @deprecated(reason: "`availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.")

  # The bandwidth quota in GB for all organizations owned by the enterprise.
  bandwidthQuota: Float!

  # The bandwidth usage in GB for all organizations owned by the enterprise.
  bandwidthUsage: Float!

  # The bandwidth usage as a percentage of the bandwidth quota.
  bandwidthUsagePercentage: Int!

  # The total seats across all organizations owned by the enterprise.
  seats: Int! @deprecated(reason: "`seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.")

  # The storage quota in GB for all organizations owned by the enterprise.
  storageQuota: Float!

  # The storage usage in GB for all organizations owned by the enterprise.
  storageUsage: Float!

  # The storage usage as a percentage of the storage quota.
  storageUsagePercentage: Int!

  # The number of available licenses across all owned organizations based on the unique number of billable users.
  totalAvailableLicenses: Int!

  # The total number of licenses allocated.
  totalLicenses: Int!
}

# The possible values for the enterprise default repository permission setting.
enum GitHub_EnterpriseDefaultRepositoryPermissionSettingValue {
  # Organizations in the enterprise choose default repository permissions for their members.
  NO_POLICY

  # Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories.
  ADMIN

  # Organization members will be able to clone, pull, and push all organization repositories.
  WRITE

  # Organization members will be able to clone and pull all organization repositories.
  READ

  # Organization members will only be able to clone and pull public repositories.
  NONE
}

# The possible values for an enabled/disabled enterprise setting.
enum GitHub_EnterpriseEnabledDisabledSettingValue {
  # The setting is enabled for organizations in the enterprise.
  ENABLED

  # The setting is disabled for organizations in the enterprise.
  DISABLED

  # There is no policy set for organizations in the enterprise.
  NO_POLICY
}

# The possible values for an enabled/no policy enterprise setting.
enum GitHub_EnterpriseEnabledSettingValue {
  # The setting is enabled for organizations in the enterprise.
  ENABLED

  # There is no policy set for organizations in the enterprise.
  NO_POLICY
}

# An identity provider configured to provision identities for an enterprise.
type GitHub_EnterpriseIdentityProvider implements GitHub_Node {
  # The digest algorithm used to sign SAML requests for the identity provider.
  digestMethod: GitHub_SamlDigestAlgorithm

  # The enterprise this identity provider belongs to.
  enterprise: GitHub_Enterprise

  # ExternalIdentities provisioned by this identity provider.
  externalIdentities(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ExternalIdentityConnection!
  id: ID!

  # The x509 certificate used by the identity provider to sign assertions and responses.
  idpCertificate: GitHub_X509Certificate

  # The Issuer Entity ID for the SAML identity provider.
  issuer: String

  # Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
  recoveryCodes: [String!]

  # The signature algorithm used to sign SAML requests for the identity provider.
  signatureMethod: GitHub_SamlSignatureAlgorithm

  # The URL endpoint for the identity provider's SAML SSO.
  ssoUrl: GitHub_URI
}

# An object that is a member of an enterprise.
union GitHub_EnterpriseMember = GitHub_EnterpriseUserAccount | GitHub_User

# The connection type for EnterpriseMember.
type GitHub_EnterpriseMemberConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseMemberEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseMember]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# A User who is a member of an enterprise through one or more organizations.
type GitHub_EnterpriseMemberEdge {
  # A cursor for use in pagination.
  cursor: String!

  # Whether the user does not have a license for the enterprise.
  isUnlicensed: Boolean!

  # The item at the end of the edge.
  node: GitHub_EnterpriseMember
}

# Ordering options for enterprise member connections.
input GitHub_EnterpriseMemberOrder {
  # The field to order enterprise members by.
  field: GitHub_EnterpriseMemberOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which enterprise member connections can be ordered.
enum GitHub_EnterpriseMemberOrderField {
  # Order enterprise members by login
  LOGIN

  # Order enterprise members by creation time
  CREATED_AT
}

# The possible values for the enterprise members can create repositories setting.
enum GitHub_EnterpriseMembersCanCreateRepositoriesSettingValue {
  # Organization administrators choose whether to allow members to create repositories.
  NO_POLICY

  # Members will be able to create public and private repositories.
  ALL

  # Members will be able to create only public repositories.
  PUBLIC

  # Members will be able to create only private repositories.
  PRIVATE

  # Members will not be able to create public or private repositories.
  DISABLED
}

# The possible values for the members can make purchases setting.
enum GitHub_EnterpriseMembersCanMakePurchasesSettingValue {
  # The setting is enabled for organizations in the enterprise.
  ENABLED

  # The setting is disabled for organizations in the enterprise.
  DISABLED
}

# The connection type for Organization.
type GitHub_EnterpriseOrganizationMembershipConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseOrganizationMembershipEdge]

  # A list of nodes.
  nodes: [GitHub_Organization]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An enterprise organization that a user is a member of.
type GitHub_EnterpriseOrganizationMembershipEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Organization

  # The role of the user in the enterprise membership.
  role: GitHub_EnterpriseUserAccountMembershipRole!
}

# The connection type for User.
type GitHub_EnterpriseOutsideCollaboratorConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseOutsideCollaboratorEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# A User who is an outside collaborator of an enterprise through one or more organizations.
type GitHub_EnterpriseOutsideCollaboratorEdge {
  # A cursor for use in pagination.
  cursor: String!

  # Whether the outside collaborator does not have a license for the enterprise.
  isUnlicensed: Boolean!

  # The item at the end of the edge.
  node: GitHub_User

  # The enterprise organization repositories this user is a member of.
  repositories(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for repositories.
    orderBy: GitHub_RepositoryOrder = {field: NAME, direction: ASC}
  ): GitHub_EnterpriseRepositoryInfoConnection!
}

# Enterprise information only visible to enterprise owners.
type GitHub_EnterpriseOwnerInfo {
  # A list of enterprise organizations configured with the provided action execution capabilities setting value.
  actionExecutionCapabilitySettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # A list of all of the administrators for this enterprise.
  admins(
    # The search string to look for.
    query: String

    # The role to filter by.
    role: GitHub_EnterpriseAdministratorRole

    # Ordering options for administrators returned from the connection.
    orderBy: GitHub_EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseAdministratorConnection!

  # A list of users in the enterprise who currently have two-factor authentication disabled.
  affiliatedUsersWithTwoFactorDisabled(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
  affiliatedUsersWithTwoFactorDisabledExist: Boolean!

  # The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
  allowPrivateRepositoryForkingSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided private repository forking setting value.
  allowPrivateRepositoryForkingSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for base repository permissions for organizations in this enterprise.
  defaultRepositoryPermissionSetting: GitHub_EnterpriseDefaultRepositoryPermissionSettingValue!

  # A list of enterprise organizations configured with the provided default repository permission.
  defaultRepositoryPermissionSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The permission to find organizations for.
    value: GitHub_DefaultRepositoryPermissionField!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # Enterprise Server installations owned by the enterprise.
  enterpriseServerInstallations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Whether or not to only return installations discovered via GitHub Connect.
    connectedOnly: Boolean = false

    # Ordering options for Enterprise Server installations returned.
    orderBy: GitHub_EnterpriseServerInstallationOrder = {field: HOST_NAME, direction: ASC}
  ): GitHub_EnterpriseServerInstallationConnection!

  # The setting value for whether the enterprise has an IP allow list enabled.
  ipAllowListEnabledSetting: GitHub_IpAllowListEnabledSettingValue!

  # The IP addresses that are allowed to access resources owned by the enterprise.
  ipAllowListEntries(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for IP allow list entries returned.
    orderBy: GitHub_IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): GitHub_IpAllowListEntryConnection!

  # Whether or not the default repository permission is currently being updated.
  isUpdatingDefaultRepositoryPermission: Boolean!

  # Whether the two-factor authentication requirement is currently being enforced.
  isUpdatingTwoFactorRequirement: Boolean!

  # The setting value for whether organization members with admin permissions on a
  # repository can change repository visibility.
  membersCanChangeRepositoryVisibilitySetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided can change repository visibility setting value.
  membersCanChangeRepositoryVisibilitySettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether members of organizations in the enterprise can create internal repositories.
  membersCanCreateInternalRepositoriesSetting: Boolean

  # The setting value for whether members of organizations in the enterprise can create private repositories.
  membersCanCreatePrivateRepositoriesSetting: Boolean

  # The setting value for whether members of organizations in the enterprise can create public repositories.
  membersCanCreatePublicRepositoriesSetting: Boolean

  # The setting value for whether members of organizations in the enterprise can create repositories.
  membersCanCreateRepositoriesSetting: GitHub_EnterpriseMembersCanCreateRepositoriesSettingValue

  # A list of enterprise organizations configured with the provided repository creation setting value.
  membersCanCreateRepositoriesSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting to find organizations for.
    value: GitHub_OrganizationMembersCanCreateRepositoriesSettingValue!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether members with admin permissions for repositories can delete issues.
  membersCanDeleteIssuesSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided members can delete issues setting value.
  membersCanDeleteIssuesSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
  membersCanDeleteRepositoriesSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided members can delete repositories setting value.
  membersCanDeleteRepositoriesSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether members of organizations in the enterprise can invite outside collaborators.
  membersCanInviteCollaboratorsSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided members can invite collaborators setting value.
  membersCanInviteCollaboratorsSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
  membersCanMakePurchasesSetting: GitHub_EnterpriseMembersCanMakePurchasesSettingValue!

  # The setting value for whether members with admin permissions for repositories can update protected branches.
  membersCanUpdateProtectedBranchesSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided members can update protected branches setting value.
  membersCanUpdateProtectedBranchesSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether members can view dependency insights.
  membersCanViewDependencyInsightsSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided members can view dependency insights setting value.
  membersCanViewDependencyInsightsSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether organization projects are enabled for organizations in this enterprise.
  organizationProjectsSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided organization projects setting value.
  organizationProjectsSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # A list of outside collaborators across the repositories in the enterprise.
  outsideCollaborators(
    # The login of one specific outside collaborator.
    login: String

    # The search string to look for.
    query: String

    # Ordering options for outside collaborators returned from the connection.
    orderBy: GitHub_EnterpriseMemberOrder = {field: LOGIN, direction: ASC}

    # Only return outside collaborators on repositories with this visibility.
    visibility: GitHub_RepositoryVisibility

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseOutsideCollaboratorConnection!

  # A list of pending administrator invitations for the enterprise.
  pendingAdminInvitations(
    # The search string to look for.
    query: String

    # Ordering options for pending enterprise administrator invitations returned from the connection.
    orderBy: GitHub_EnterpriseAdministratorInvitationOrder = {field: CREATED_AT, direction: DESC}

    # The role to filter by.
    role: GitHub_EnterpriseAdministratorRole

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseAdministratorInvitationConnection!

  # A list of pending collaborator invitations across the repositories in the enterprise.
  pendingCollaboratorInvitations(
    # The search string to look for.
    query: String

    # Ordering options for pending repository collaborator invitations returned from the connection.
    orderBy: GitHub_RepositoryInvitationOrder = {field: CREATED_AT, direction: DESC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RepositoryInvitationConnection!

  # A list of pending collaborators across the repositories in the enterprise.
  pendingCollaborators(
    # The search string to look for.
    query: String

    # Ordering options for pending repository collaborator invitations returned from the connection.
    orderBy: GitHub_RepositoryInvitationOrder = {field: CREATED_AT, direction: DESC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterprisePendingCollaboratorConnection! @deprecated(reason: "Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.")

  # A list of pending member invitations for organizations in the enterprise.
  pendingMemberInvitations(
    # The search string to look for.
    query: String

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterprisePendingMemberInvitationConnection!

  # The setting value for whether repository projects are enabled in this enterprise.
  repositoryProjectsSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided repository projects setting value.
  repositoryProjectsSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The SAML Identity Provider for the enterprise.
  samlIdentityProvider: GitHub_EnterpriseIdentityProvider

  # A list of enterprise organizations configured with the SAML single sign-on setting value.
  samlIdentityProviderSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: GitHub_IdentityProviderConfigurationState!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether team discussions are enabled for organizations in this enterprise.
  teamDiscussionsSetting: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A list of enterprise organizations configured with the provided team discussions setting value.
  teamDiscussionsSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!

  # The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
  twoFactorRequiredSetting: GitHub_EnterpriseEnabledSettingValue!

  # A list of enterprise organizations configured with the two-factor authentication setting value.
  twoFactorRequiredSettingOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The setting value to find organizations for.
    value: Boolean!

    # Ordering options for organizations with this setting.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}
  ): GitHub_OrganizationConnection!
}

# The connection type for User.
type GitHub_EnterprisePendingCollaboratorConnection {
  # A list of edges.
  edges: [GitHub_EnterprisePendingCollaboratorEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# A user with an invitation to be a collaborator on a repository owned by an organization in an enterprise.
type GitHub_EnterprisePendingCollaboratorEdge {
  # A cursor for use in pagination.
  cursor: String!

  # Whether the invited collaborator does not have a license for the enterprise.
  isUnlicensed: Boolean!

  # The item at the end of the edge.
  node: GitHub_User

  # The enterprise organization repositories this user is a member of.
  repositories(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for repositories.
    orderBy: GitHub_RepositoryOrder = {field: NAME, direction: ASC}
  ): GitHub_EnterpriseRepositoryInfoConnection!
}

# The connection type for OrganizationInvitation.
type GitHub_EnterprisePendingMemberInvitationConnection {
  # A list of edges.
  edges: [GitHub_EnterprisePendingMemberInvitationEdge]

  # A list of nodes.
  nodes: [GitHub_OrganizationInvitation]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!

  # Identifies the total count of unique users in the connection.
  totalUniqueUserCount: Int!
}

# An invitation to be a member in an enterprise organization.
type GitHub_EnterprisePendingMemberInvitationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # Whether the invitation has a license for the enterprise.
  isUnlicensed: Boolean!

  # The item at the end of the edge.
  node: GitHub_OrganizationInvitation
}

# A subset of repository information queryable from an enterprise.
type GitHub_EnterpriseRepositoryInfo implements GitHub_Node {
  id: ID!

  # Identifies if the repository is private.
  isPrivate: Boolean!

  # The repository's name.
  name: String!

  # The repository's name with owner.
  nameWithOwner: String!
}

# The connection type for EnterpriseRepositoryInfo.
type GitHub_EnterpriseRepositoryInfoConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseRepositoryInfoEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseRepositoryInfo]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_EnterpriseRepositoryInfoEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_EnterpriseRepositoryInfo
}

# An Enterprise Server installation.
type GitHub_EnterpriseServerInstallation implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The customer name to which the Enterprise Server installation belongs.
  customerName: String!

  # The host name of the Enterprise Server installation.
  hostName: String!
  id: ID!

  # Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
  isConnected: Boolean!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # User accounts on this Enterprise Server installation.
  userAccounts(
    # Ordering options for Enterprise Server user accounts returned from the connection.
    orderBy: GitHub_EnterpriseServerUserAccountOrder = {field: LOGIN, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseServerUserAccountConnection!

  # User accounts uploads for the Enterprise Server installation.
  userAccountsUploads(
    # Ordering options for Enterprise Server user accounts uploads returned from the connection.
    orderBy: GitHub_EnterpriseServerUserAccountsUploadOrder = {field: CREATED_AT, direction: DESC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseServerUserAccountsUploadConnection!
}

# The connection type for EnterpriseServerInstallation.
type GitHub_EnterpriseServerInstallationConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseServerInstallationEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseServerInstallation]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_EnterpriseServerInstallationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_EnterpriseServerInstallation
}

# Ordering options for Enterprise Server installation connections.
input GitHub_EnterpriseServerInstallationOrder {
  # The field to order Enterprise Server installations by.
  field: GitHub_EnterpriseServerInstallationOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which Enterprise Server installation connections can be ordered.
enum GitHub_EnterpriseServerInstallationOrderField {
  # Order Enterprise Server installations by host name
  HOST_NAME

  # Order Enterprise Server installations by customer name
  CUSTOMER_NAME

  # Order Enterprise Server installations by creation time
  CREATED_AT
}

# A user account on an Enterprise Server installation.
type GitHub_EnterpriseServerUserAccount implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # User emails belonging to this user account.
  emails(
    # Ordering options for Enterprise Server user account emails returned from the connection.
    orderBy: GitHub_EnterpriseServerUserAccountEmailOrder = {field: EMAIL, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseServerUserAccountEmailConnection!

  # The Enterprise Server installation on which this user account exists.
  enterpriseServerInstallation: GitHub_EnterpriseServerInstallation!
  id: ID!

  # Whether the user account is a site administrator on the Enterprise Server installation.
  isSiteAdmin: Boolean!

  # The login of the user account on the Enterprise Server installation.
  login: String!

  # The profile name of the user account on the Enterprise Server installation.
  profileName: String

  # The date and time when the user account was created on the Enterprise Server installation.
  remoteCreatedAt: GitHub_DateTime!

  # The ID of the user account on the Enterprise Server installation.
  remoteUserId: Int!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!
}

# The connection type for EnterpriseServerUserAccount.
type GitHub_EnterpriseServerUserAccountConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseServerUserAccountEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseServerUserAccount]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_EnterpriseServerUserAccountEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_EnterpriseServerUserAccount
}

# An email belonging to a user account on an Enterprise Server installation.
type GitHub_EnterpriseServerUserAccountEmail implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The email address.
  email: String!
  id: ID!

  # Indicates whether this is the primary email of the associated user account.
  isPrimary: Boolean!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The user account to which the email belongs.
  userAccount: GitHub_EnterpriseServerUserAccount!
}

# The connection type for EnterpriseServerUserAccountEmail.
type GitHub_EnterpriseServerUserAccountEmailConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseServerUserAccountEmailEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseServerUserAccountEmail]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_EnterpriseServerUserAccountEmailEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_EnterpriseServerUserAccountEmail
}

# Ordering options for Enterprise Server user account email connections.
input GitHub_EnterpriseServerUserAccountEmailOrder {
  # The field to order emails by.
  field: GitHub_EnterpriseServerUserAccountEmailOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which Enterprise Server user account email connections can be ordered.
enum GitHub_EnterpriseServerUserAccountEmailOrderField {
  # Order emails by email
  EMAIL
}

# Ordering options for Enterprise Server user account connections.
input GitHub_EnterpriseServerUserAccountOrder {
  # The field to order user accounts by.
  field: GitHub_EnterpriseServerUserAccountOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which Enterprise Server user account connections can be ordered.
enum GitHub_EnterpriseServerUserAccountOrderField {
  # Order user accounts by login
  LOGIN

  # Order user accounts by creation time on the Enterprise Server installation
  REMOTE_CREATED_AT
}

# A user accounts upload from an Enterprise Server installation.
type GitHub_EnterpriseServerUserAccountsUpload implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The enterprise to which this upload belongs.
  enterprise: GitHub_Enterprise!

  # The Enterprise Server installation for which this upload was generated.
  enterpriseServerInstallation: GitHub_EnterpriseServerInstallation!
  id: ID!

  # The name of the file uploaded.
  name: String!

  # The synchronization state of the upload
  syncState: GitHub_EnterpriseServerUserAccountsUploadSyncState!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!
}

# The connection type for EnterpriseServerUserAccountsUpload.
type GitHub_EnterpriseServerUserAccountsUploadConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseServerUserAccountsUploadEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseServerUserAccountsUpload]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_EnterpriseServerUserAccountsUploadEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_EnterpriseServerUserAccountsUpload
}

# Ordering options for Enterprise Server user accounts upload connections.
input GitHub_EnterpriseServerUserAccountsUploadOrder {
  # The field to order user accounts uploads by.
  field: GitHub_EnterpriseServerUserAccountsUploadOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which Enterprise Server user accounts upload connections can be ordered.
enum GitHub_EnterpriseServerUserAccountsUploadOrderField {
  # Order user accounts uploads by creation time
  CREATED_AT
}

# Synchronization state of the Enterprise Server user accounts upload
enum GitHub_EnterpriseServerUserAccountsUploadSyncState {
  # The synchronization of the upload is pending.
  PENDING

  # The synchronization of the upload succeeded.
  SUCCESS

  # The synchronization of the upload failed.
  FAILURE
}

# An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type GitHub_EnterpriseUserAccount implements GitHub_Node & GitHub_Actor {
  # A URL pointing to the enterprise user account's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The enterprise in which this user account exists.
  enterprise: GitHub_Enterprise!
  id: ID!

  # An identifier for the enterprise user account, a login or email address
  login: String!

  # The name of the enterprise user account
  name: String

  # A list of enterprise organizations this user is a member of.
  organizations(
    # The search string to look for.
    query: String

    # Ordering options for organizations returned from the connection.
    orderBy: GitHub_OrganizationOrder = {field: LOGIN, direction: ASC}

    # The role of the user in the enterprise organization.
    role: GitHub_EnterpriseUserAccountMembershipRole

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_EnterpriseOrganizationMembershipConnection!

  # The HTTP path for this user.
  resourcePath: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this user.
  url: GitHub_URI!

  # The user within the enterprise.
  user: GitHub_User
}

# The connection type for EnterpriseUserAccount.
type GitHub_EnterpriseUserAccountConnection {
  # A list of edges.
  edges: [GitHub_EnterpriseUserAccountEdge]

  # A list of nodes.
  nodes: [GitHub_EnterpriseUserAccount]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_EnterpriseUserAccountEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_EnterpriseUserAccount
}

# The possible roles for enterprise membership.
enum GitHub_EnterpriseUserAccountMembershipRole {
  # The user is a member of the enterprise membership.
  MEMBER

  # The user is an owner of the enterprise membership.
  OWNER
}

# The possible GitHub Enterprise deployments where this user can exist.
enum GitHub_EnterpriseUserDeployment {
  # The user is part of a GitHub Enterprise Cloud deployment.
  CLOUD

  # The user is part of a GitHub Enterprise Server deployment.
  SERVER
}

# An external identity provisioned by SAML SSO or SCIM.
type GitHub_ExternalIdentity implements GitHub_Node {
  # The GUID for this identity
  guid: String!
  id: ID!

  # Organization invitation for this SCIM-provisioned external identity
  organizationInvitation: GitHub_OrganizationInvitation

  # SAML Identity attributes
  samlIdentity: GitHub_ExternalIdentitySamlAttributes

  # SCIM Identity attributes
  scimIdentity: GitHub_ExternalIdentityScimAttributes

  # User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
  user: GitHub_User
}

# The connection type for ExternalIdentity.
type GitHub_ExternalIdentityConnection {
  # A list of edges.
  edges: [GitHub_ExternalIdentityEdge]

  # A list of nodes.
  nodes: [GitHub_ExternalIdentity]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_ExternalIdentityEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_ExternalIdentity
}

# SAML attributes for the External Identity
type GitHub_ExternalIdentitySamlAttributes {
  # The NameID of the SAML identity
  nameId: String
}

# SCIM attributes for the External Identity
type GitHub_ExternalIdentityScimAttributes {
  # The userName of the SCIM identity
  username: String
}

# The connection type for User.
type GitHub_FollowerConnection {
  # A list of edges.
  edges: [GitHub_UserEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# The connection type for User.
type GitHub_FollowingConnection {
  # A list of edges.
  edges: [GitHub_UserEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Autogenerated input type of FollowUser
input GitHub_FollowUserInput {
  # ID of the user to follow.
  userId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of FollowUser
type GitHub_FollowUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The user that was followed.
  user: GitHub_User
}

# A funding platform link for a repository.
type GitHub_FundingLink {
  # The funding platform this link is for.
  platform: GitHub_FundingPlatform!

  # The configured URL for this funding link.
  url: GitHub_URI!
}

# The possible funding platforms for repository funding links.
enum GitHub_FundingPlatform {
  # GitHub funding platform.
  GITHUB

  # Patreon funding platform.
  PATREON

  # Open Collective funding platform.
  OPEN_COLLECTIVE

  # Ko-fi funding platform.
  KO_FI

  # Tidelift funding platform.
  TIDELIFT

  # Community Bridge funding platform.
  COMMUNITY_BRIDGE

  # Liberapay funding platform.
  LIBERAPAY

  # IssueHunt funding platform.
  ISSUEHUNT

  # Otechie funding platform.
  OTECHIE

  # Custom funding platform.
  CUSTOM
}

# A generic hovercard context with a message and icon
type GitHub_GenericHovercardContext implements GitHub_HovercardContext {
  # A string describing this context
  message: String!

  # An octicon to accompany this context
  octicon: String!
}

# A Gist.
type GitHub_Gist implements GitHub_Node & GitHub_Starrable & GitHub_UniformResourceLocatable {
  # A list of comments associated with the gist
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_GistCommentConnection!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The gist description.
  description: String

  # The files in this gist.
  files(
    # The maximum number of files to return.
    limit: Int = 10

    # The oid of the files to return
    oid: GitHub_GitObjectID
  ): [GitHub_GistFile]

  # A list of forks associated with the gist
  forks(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for gists returned from the connection
    orderBy: GitHub_GistOrder
  ): GitHub_GistConnection!
  id: ID!

  # Identifies if the gist is a fork.
  isFork: Boolean!

  # Whether the gist is public or not.
  isPublic: Boolean!

  # The gist name.
  name: String!

  # The gist owner.
  owner: GitHub_RepositoryOwner

  # Identifies when the gist was last pushed to.
  pushedAt: GitHub_DateTime

  # The HTML path to this resource.
  resourcePath: GitHub_URI!

  # A list of users who have starred this starrable.
  stargazers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Order for connection
    orderBy: GitHub_StarOrder
  ): GitHub_StargazerConnection!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this Gist.
  url: GitHub_URI!

  # Returns a boolean indicating whether the viewing user has starred this starrable.
  viewerHasStarred: Boolean!
}

# Represents a comment on an Gist.
type GitHub_GistComment implements GitHub_Node & GitHub_Comment & GitHub_Deletable & GitHub_Minimizable & GitHub_Updatable & GitHub_UpdatableComment {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the gist.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # Identifies the comment body.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body rendered to text.
  bodyText: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The actor who edited the comment.
  editor: GitHub_Actor

  # The associated gist.
  gist: GitHub_Gist!
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # Returns whether or not a comment has been minimized.
  isMinimized: Boolean!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # Returns why the comment was minimized.
  minimizedReason: String

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!

  # Check if the current viewer can minimize this object.
  viewerCanMinimize: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# The connection type for GistComment.
type GitHub_GistCommentConnection {
  # A list of edges.
  edges: [GitHub_GistCommentEdge]

  # A list of nodes.
  nodes: [GitHub_GistComment]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_GistCommentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_GistComment
}

# The connection type for Gist.
type GitHub_GistConnection {
  # A list of edges.
  edges: [GitHub_GistEdge]

  # A list of nodes.
  nodes: [GitHub_Gist]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_GistEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Gist
}

# A file in a gist.
type GitHub_GistFile {
  # The file name encoded to remove characters that are invalid in URL paths.
  encodedName: String

  # The gist file encoding.
  encoding: String

  # The file extension from the file name.
  extension: String

  # Indicates if this file is an image.
  isImage: Boolean!

  # Whether the file's contents were truncated.
  isTruncated: Boolean!

  # The programming language this file is written in.
  language: GitHub_Language

  # The gist file name.
  name: String

  # The gist file size in bytes.
  size: Int

  # UTF8 text data or null if the file is binary
  text(
    # Optionally truncate the returned file to this length.
    truncate: Int
  ): String
}

# Ordering options for gist connections
input GitHub_GistOrder {
  # The field to order repositories by.
  field: GitHub_GistOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which gist connections can be ordered.
enum GitHub_GistOrderField {
  # Order gists by creation time
  CREATED_AT

  # Order gists by update time
  UPDATED_AT

  # Order gists by push time
  PUSHED_AT
}

# The privacy of a Gist
enum GitHub_GistPrivacy {
  # Public
  PUBLIC

  # Secret
  SECRET

  # Gists that are public and secret
  ALL
}

# Represents an actor in a Git commit (ie. an author or committer).
type GitHub_GitActor {
  # A URL pointing to the author's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # The timestamp of the Git action (authoring or committing).
  date: GitHub_GitTimestamp

  # The email in the Git commit.
  email: String

  # The name in the Git commit.
  name: String

  # The GitHub user corresponding to the email field. Null if no such user exists.
  user: GitHub_User
}

# Represents information about the GitHub instance.
type GitHub_GitHubMetadata {
  # Returns a String that's a SHA of `github-services`
  gitHubServicesSha: GitHub_GitObjectID!

  # IP addresses that users connect to for git operations
  gitIpAddresses: [String!]

  # IP addresses that service hooks are sent from
  hookIpAddresses: [String!]

  # IP addresses that the importer connects from
  importerIpAddresses: [String!]

  # Whether or not users are verified
  isPasswordAuthenticationVerifiable: Boolean!

  # IP addresses for GitHub Pages' A records
  pagesIpAddresses: [String!]
}

# Represents a Git object.
interface GitHub_GitObject {
  # An abbreviated version of the Git object ID
  abbreviatedOid: String!

  # The HTTP path for this Git object
  commitResourcePath: GitHub_URI!

  # The HTTP URL for this Git object
  commitUrl: GitHub_URI!
  id: ID!

  # The Git object ID
  oid: GitHub_GitObjectID!

  # The Repository the Git object belongs to
  repository: GitHub_Repository!
}

# A Git object ID.
scalar GitHub_GitObjectID

# Information about a signature (GPG or S/MIME) on a Commit or Tag.
interface GitHub_GitSignature {
  # Email used to sign this object.
  email: String!

  # True if the signature is valid and verified by GitHub.
  isValid: Boolean!

  # Payload for GPG signing object. Raw ODB object without the signature header.
  payload: String!

  # ASCII-armored signature header from object.
  signature: String!

  # GitHub user corresponding to the email signing this commit.
  signer: GitHub_User

  # The state of this signature. `VALID` if signature is valid and verified by
  # GitHub, otherwise represents reason why signature is considered invalid.
  state: GitHub_GitSignatureState!

  # True if the signature was made with GitHub's signing key.
  wasSignedByGitHub: Boolean!
}

# The state of a Git signature.
enum GitHub_GitSignatureState {
  # Valid signature and verified by GitHub
  VALID

  # Invalid signature
  INVALID

  # Malformed signature
  MALFORMED_SIG

  # Key used for signing not known to GitHub
  UNKNOWN_KEY

  # Invalid email used for signing
  BAD_EMAIL

  # Email used for signing unverified on GitHub
  UNVERIFIED_EMAIL

  # Email used for signing not known to GitHub
  NO_USER

  # Unknown signature type
  UNKNOWN_SIG_TYPE

  # Unsigned
  UNSIGNED

  # Internal error - the GPG verification service is unavailable at the moment
  GPGVERIFY_UNAVAILABLE

  # Internal error - the GPG verification service misbehaved
  GPGVERIFY_ERROR

  # The usage flags for the key that signed this don't allow signing
  NOT_SIGNING_KEY

  # Signing key expired
  EXPIRED_KEY

  # Valid signature, pending certificate revocation checking
  OCSP_PENDING

  # Valid siganture, though certificate revocation check failed
  OCSP_ERROR

  # The signing certificate or its chain could not be verified
  BAD_CERT

  # One or more certificates in chain has been revoked
  OCSP_REVOKED
}

# Git SSH string
scalar GitHub_GitSSHRemote

# An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC.
scalar GitHub_GitTimestamp

# Represents a GPG signature on a Commit or Tag.
type GitHub_GpgSignature implements GitHub_GitSignature {
  # Email used to sign this object.
  email: String!

  # True if the signature is valid and verified by GitHub.
  isValid: Boolean!

  # Hex-encoded ID of the key that signed this object.
  keyId: String

  # Payload for GPG signing object. Raw ODB object without the signature header.
  payload: String!

  # ASCII-armored signature header from object.
  signature: String!

  # GitHub user corresponding to the email signing this commit.
  signer: GitHub_User

  # The state of this signature. `VALID` if signature is valid and verified by
  # GitHub, otherwise represents reason why signature is considered invalid.
  state: GitHub_GitSignatureState!

  # True if the signature was made with GitHub's signing key.
  wasSignedByGitHub: Boolean!
}

# Represents a 'head_ref_deleted' event on a given pull request.
type GitHub_HeadRefDeletedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the Ref associated with the `head_ref_deleted` event.
  headRef: GitHub_Ref

  # Identifies the name of the Ref associated with the `head_ref_deleted` event.
  headRefName: String!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!
}

# Represents a 'head_ref_force_pushed' event on a given pull request.
type GitHub_HeadRefForcePushedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the after commit SHA for the 'head_ref_force_pushed' event.
  afterCommit: GitHub_Commit

  # Identifies the before commit SHA for the 'head_ref_force_pushed' event.
  beforeCommit: GitHub_Commit

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
  ref: GitHub_Ref
}

# Represents a 'head_ref_restored' event on a given pull request.
type GitHub_HeadRefRestoredEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!
}

# Detail needed to display a hovercard for a user
type GitHub_Hovercard {
  # Each of the contexts for this hovercard
  contexts: [GitHub_HovercardContext!]!
}

# An individual line of a hovercard
interface GitHub_HovercardContext {
  # A string describing this context
  message: String!

  # An octicon to accompany this context
  octicon: String!
}

# A string containing HTML code.
scalar GitHub_HTML

# The possible states in which authentication can be configured with an identity provider.
enum GitHub_IdentityProviderConfigurationState {
  # Authentication with an identity provider is configured and enforced.
  ENFORCED

  # Authentication with an identity provider is configured but not enforced.
  CONFIGURED

  # Authentication with an identity provider is not configured.
  UNCONFIGURED
}

# Autogenerated input type of InviteEnterpriseAdmin
input GitHub_InviteEnterpriseAdminInput {
  # The ID of the enterprise to which you want to invite an administrator.
  enterpriseId: ID!

  # The login of a user to invite as an administrator.
  invitee: String

  # The email of the person to invite as an administrator.
  email: String

  # The role of the administrator.
  role: GitHub_EnterpriseAdministratorRole

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of InviteEnterpriseAdmin
type GitHub_InviteEnterpriseAdminPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The created enterprise administrator invitation.
  invitation: GitHub_EnterpriseAdministratorInvitation
}

# The possible values for the IP allow list enabled setting.
enum GitHub_IpAllowListEnabledSettingValue {
  # The setting is enabled for the owner.
  ENABLED

  # The setting is disabled for the owner.
  DISABLED
}

# An IP address or range of addresses that is allowed to access an owner's resources.
type GitHub_IpAllowListEntry implements GitHub_Node {
  # A single IP address or range of IP addresses in CIDR notation.
  allowListValue: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Whether the entry is currently active.
  isActive: Boolean!

  # The name of the IP allow list entry.
  name: String

  # The owner of the IP allow list entry.
  owner: GitHub_IpAllowListOwner!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!
}

# The connection type for IpAllowListEntry.
type GitHub_IpAllowListEntryConnection {
  # A list of edges.
  edges: [GitHub_IpAllowListEntryEdge]

  # A list of nodes.
  nodes: [GitHub_IpAllowListEntry]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_IpAllowListEntryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_IpAllowListEntry
}

# Ordering options for IP allow list entry connections.
input GitHub_IpAllowListEntryOrder {
  # The field to order IP allow list entries by.
  field: GitHub_IpAllowListEntryOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which IP allow list entry connections can be ordered.
enum GitHub_IpAllowListEntryOrderField {
  # Order IP allow list entries by creation time.
  CREATED_AT

  # Order IP allow list entries by the allow list value.
  ALLOW_LIST_VALUE
}

# Types that can own an IP allow list.
union GitHub_IpAllowListOwner = GitHub_Enterprise | GitHub_Organization

# An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type GitHub_Issue implements GitHub_Node & GitHub_Assignable & GitHub_Closable & GitHub_Comment & GitHub_Updatable & GitHub_UpdatableComment & GitHub_Labelable & GitHub_Lockable & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Subscribable & GitHub_UniformResourceLocatable {
  # Reason that the conversation was locked.
  activeLockReason: GitHub_LockReason

  # A list of Users assigned to this object.
  assignees(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the subject of the comment.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # Identifies the body of the issue.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # Identifies the body of the issue rendered to text.
  bodyText: String!

  # `true` if the object is closed (definition of closed may depend on type)
  closed: Boolean!

  # Identifies the date and time when the object was closed.
  closedAt: GitHub_DateTime

  # A list of comments associated with the Issue.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueCommentConnection!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The actor who edited the comment.
  editor: GitHub_Actor

  # The hovercard information for this issue
  hovercard(
    # Whether or not to include notification contexts
    includeNotificationContexts: Boolean = true
  ): GitHub_Hovercard!
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # A list of labels associated with the object.
  labels(
    # Ordering options for labels returned from the connection.
    orderBy: GitHub_LabelOrder = {field: CREATED_AT, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_LabelConnection

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # `true` if the object is locked
  locked: Boolean!

  # Identifies the milestone associated with the issue.
  milestone: GitHub_Milestone

  # Identifies the issue number.
  number: Int!

  # A list of Users that are participating in the Issue conversation.
  participants(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # List of project cards associated with this issue.
  projectCards(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # A list of archived states to filter the cards by
    archivedStates: [GitHub_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHub_ProjectCardConnection!

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The repository associated with this node.
  repository: GitHub_Repository!

  # The HTTP path for this issue
  resourcePath: GitHub_URI!

  # Identifies the state of the issue.
  state: GitHub_IssueState!

  # A list of events, comments, commits, etc. associated with the issue.
  timeline(
    # Allows filtering timeline events by a `since` timestamp.
    since: GitHub_DateTime

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueTimelineConnection! @deprecated(reason: "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.")

  # A list of events, comments, commits, etc. associated with the issue.
  timelineItems(
    # Filter timeline items by a `since` timestamp.
    since: GitHub_DateTime

    # Skips the first _n_ elements in the list.
    skip: Int

    # Filter timeline items by type.
    itemTypes: [GitHub_IssueTimelineItemsItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueTimelineItemsConnection!

  # Identifies the issue title.
  title: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this issue
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the viewer is able to change their subscription status for the repository.
  viewerCanSubscribe: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!

  # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  viewerSubscription: GitHub_SubscriptionState
}

# Represents a comment on an Issue.
type GitHub_IssueComment implements GitHub_Node & GitHub_Comment & GitHub_Deletable & GitHub_Minimizable & GitHub_Updatable & GitHub_UpdatableComment & GitHub_Reactable & GitHub_RepositoryNode {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the subject of the comment.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # The body as Markdown.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body rendered to text.
  bodyText: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The actor who edited the comment.
  editor: GitHub_Actor
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # Returns whether or not a comment has been minimized.
  isMinimized: Boolean!

  # Identifies the issue associated with the comment.
  issue: GitHub_Issue!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # Returns why the comment was minimized.
  minimizedReason: String

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # Returns the pull request associated with the comment, if this comment was made on a
  # pull request.
  #
  pullRequest: GitHub_PullRequest

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The repository associated with this node.
  repository: GitHub_Repository!

  # The HTTP path for this issue comment
  resourcePath: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this issue comment
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!

  # Check if the current viewer can minimize this object.
  viewerCanMinimize: Boolean!

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# The connection type for IssueComment.
type GitHub_IssueCommentConnection {
  # A list of edges.
  edges: [GitHub_IssueCommentEdge]

  # A list of nodes.
  nodes: [GitHub_IssueComment]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_IssueCommentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_IssueComment
}

# The connection type for Issue.
type GitHub_IssueConnection {
  # A list of edges.
  edges: [GitHub_IssueEdge]

  # A list of nodes.
  nodes: [GitHub_Issue]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# This aggregates issues opened by a user within one repository.
type GitHub_IssueContributionsByRepository {
  # The issue contributions.
  contributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for contributions returned from the connection.
    orderBy: GitHub_ContributionOrder = {direction: DESC}
  ): GitHub_CreatedIssueContributionConnection!

  # The repository in which the issues were opened.
  repository: GitHub_Repository!
}

# An edge in a connection.
type GitHub_IssueEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Issue
}

# Ways in which to filter lists of issues.
input GitHub_IssueFilters {
  # List issues assigned to given name. Pass in `null` for issues with no assigned
  # user, and `*` for issues assigned to any user.
  assignee: String

  # List issues created by given name.
  createdBy: String

  # List issues where the list of label names exist on the issue.
  labels: [String!]

  # List issues where the given name is mentioned in the issue.
  mentioned: String

  # List issues by given milestone argument. If an string representation of an
  # integer is passed, it should refer to a milestone by its number field. Pass in
  # `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.
  milestone: String

  # List issues that have been updated at or after the given date.
  since: GitHub_DateTime

  # List issues filtered by the list of states given.
  states: [GitHub_IssueState!]

  # List issues subscribed to by viewer.
  viewerSubscribed: Boolean = false
}

# Ways in which lists of issues can be ordered upon return.
input GitHub_IssueOrder {
  # The field in which to order issues by.
  field: GitHub_IssueOrderField!

  # The direction in which to order issues by the specified field.
  direction: GitHub_OrderDirection!
}

# Properties by which issue connections can be ordered.
enum GitHub_IssueOrderField {
  # Order issues by creation time
  CREATED_AT

  # Order issues by update time
  UPDATED_AT

  # Order issues by comment count
  COMMENTS
}

# Used for return value of Repository.issueOrPullRequest.
union GitHub_IssueOrPullRequest = GitHub_Issue | GitHub_PullRequest

# The possible states of an issue.
enum GitHub_IssueState {
  # An issue that is still open
  OPEN

  # An issue that has been closed
  CLOSED
}

# The connection type for IssueTimelineItem.
type GitHub_IssueTimelineConnection {
  # A list of edges.
  edges: [GitHub_IssueTimelineItemEdge]

  # A list of nodes.
  nodes: [GitHub_IssueTimelineItem]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An item in an issue timeline
union GitHub_IssueTimelineItem = GitHub_AssignedEvent | GitHub_ClosedEvent | GitHub_Commit | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MilestonedEvent | GitHub_ReferencedEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_SubscribedEvent | GitHub_TransferredEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

# An edge in a connection.
type GitHub_IssueTimelineItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_IssueTimelineItem
}

# An item in an issue timeline
union GitHub_IssueTimelineItems = GitHub_AddedToProjectEvent | GitHub_AssignedEvent | GitHub_ClosedEvent | GitHub_CommentDeletedEvent | GitHub_ConnectedEvent | GitHub_ConvertedNoteToIssueEvent | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_DisconnectedEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MarkedAsDuplicateEvent | GitHub_MentionedEvent | GitHub_MilestonedEvent | GitHub_MovedColumnsInProjectEvent | GitHub_PinnedEvent | GitHub_ReferencedEvent | GitHub_RemovedFromProjectEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_SubscribedEvent | GitHub_TransferredEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnmarkedAsDuplicateEvent | GitHub_UnpinnedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

# The connection type for IssueTimelineItems.
type GitHub_IssueTimelineItemsConnection {
  # A list of edges.
  edges: [GitHub_IssueTimelineItemsEdge]

  # Identifies the count of items after applying `before` and `after` filters.
  filteredCount: Int!

  # A list of nodes.
  nodes: [GitHub_IssueTimelineItems]

  # Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  pageCount: Int!

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!

  # Identifies the date and time when the timeline was last updated.
  updatedAt: GitHub_DateTime!
}

# An edge in a connection.
type GitHub_IssueTimelineItemsEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_IssueTimelineItems
}

# The possible item types found in a timeline.
enum GitHub_IssueTimelineItemsItemType {
  # Represents a comment on an Issue.
  ISSUE_COMMENT

  # Represents a mention made by one issue or pull request to another.
  CROSS_REFERENCED_EVENT

  # Represents a 'added_to_project' event on a given issue or pull request.
  ADDED_TO_PROJECT_EVENT

  # Represents an 'assigned' event on any assignable object.
  ASSIGNED_EVENT

  # Represents a 'closed' event on any `Closable`.
  CLOSED_EVENT

  # Represents a 'comment_deleted' event on a given issue or pull request.
  COMMENT_DELETED_EVENT

  # Represents a 'connected' event on a given issue or pull request.
  CONNECTED_EVENT

  # Represents a 'converted_note_to_issue' event on a given issue or pull request.
  CONVERTED_NOTE_TO_ISSUE_EVENT

  # Represents a 'demilestoned' event on a given issue or pull request.
  DEMILESTONED_EVENT

  # Represents a 'disconnected' event on a given issue or pull request.
  DISCONNECTED_EVENT

  # Represents a 'labeled' event on a given issue or pull request.
  LABELED_EVENT

  # Represents a 'locked' event on a given issue or pull request.
  LOCKED_EVENT

  # Represents a 'marked_as_duplicate' event on a given issue or pull request.
  MARKED_AS_DUPLICATE_EVENT

  # Represents a 'mentioned' event on a given issue or pull request.
  MENTIONED_EVENT

  # Represents a 'milestoned' event on a given issue or pull request.
  MILESTONED_EVENT

  # Represents a 'moved_columns_in_project' event on a given issue or pull request.
  MOVED_COLUMNS_IN_PROJECT_EVENT

  # Represents a 'pinned' event on a given issue or pull request.
  PINNED_EVENT

  # Represents a 'referenced' event on a given `ReferencedSubject`.
  REFERENCED_EVENT

  # Represents a 'removed_from_project' event on a given issue or pull request.
  REMOVED_FROM_PROJECT_EVENT

  # Represents a 'renamed' event on a given issue or pull request
  RENAMED_TITLE_EVENT

  # Represents a 'reopened' event on any `Closable`.
  REOPENED_EVENT

  # Represents a 'subscribed' event on a given `Subscribable`.
  SUBSCRIBED_EVENT

  # Represents a 'transferred' event on a given issue or pull request.
  TRANSFERRED_EVENT

  # Represents an 'unassigned' event on any assignable object.
  UNASSIGNED_EVENT

  # Represents an 'unlabeled' event on a given issue or pull request.
  UNLABELED_EVENT

  # Represents an 'unlocked' event on a given issue or pull request.
  UNLOCKED_EVENT

  # Represents a 'user_blocked' event on a given user.
  USER_BLOCKED_EVENT

  # Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  UNMARKED_AS_DUPLICATE_EVENT

  # Represents an 'unpinned' event on a given issue or pull request.
  UNPINNED_EVENT

  # Represents an 'unsubscribed' event on a given `Subscribable`.
  UNSUBSCRIBED_EVENT
}

# Represents a user signing up for a GitHub account.
type GitHub_JoinedGitHubContribution implements GitHub_Contribution {
  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# A label for categorizing Issues or Milestones with a given Repository.
type GitHub_Label implements GitHub_Node {
  # Identifies the label color.
  color: String!

  # Identifies the date and time when the label was created.
  createdAt: GitHub_DateTime

  # A brief description of this label.
  description: String
  id: ID!

  # Indicates whether or not this is a default label.
  isDefault: Boolean!

  # A list of issues associated with this label.
  issues(
    # Ordering options for issues returned from the connection.
    orderBy: GitHub_IssueOrder

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # A list of states to filter the issues by.
    states: [GitHub_IssueState!]

    # Filtering options for issues returned from the connection.
    filterBy: GitHub_IssueFilters

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueConnection!

  # Identifies the label name.
  name: String!

  # A list of pull requests associated with this label.
  pullRequests(
    # A list of states to filter the pull requests by.
    states: [GitHub_PullRequestState!]

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # The head ref name to filter the pull requests by.
    headRefName: String

    # The base ref name to filter the pull requests by.
    baseRefName: String

    # Ordering options for pull requests returned from the connection.
    orderBy: GitHub_IssueOrder

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestConnection!

  # The repository associated with this label.
  repository: GitHub_Repository!

  # The HTTP path for this label.
  resourcePath: GitHub_URI!

  # Identifies the date and time when the label was last updated.
  updatedAt: GitHub_DateTime

  # The HTTP URL for this label.
  url: GitHub_URI!
}

# An object that can have labels assigned to it.
interface GitHub_Labelable {
  # A list of labels associated with the object.
  labels(
    # Ordering options for labels returned from the connection.
    orderBy: GitHub_LabelOrder = {field: CREATED_AT, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_LabelConnection
}

# The connection type for Label.
type GitHub_LabelConnection {
  # A list of edges.
  edges: [GitHub_LabelEdge]

  # A list of nodes.
  nodes: [GitHub_Label]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a 'labeled' event on a given issue or pull request.
type GitHub_LabeledEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the label associated with the 'labeled' event.
  label: GitHub_Label!

  # Identifies the `Labelable` associated with the event.
  labelable: GitHub_Labelable!
}

# An edge in a connection.
type GitHub_LabelEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Label
}

# Ways in which lists of labels can be ordered upon return.
input GitHub_LabelOrder {
  # The field in which to order labels by.
  field: GitHub_LabelOrderField!

  # The direction in which to order labels by the specified field.
  direction: GitHub_OrderDirection!
}

# Properties by which label connections can be ordered.
enum GitHub_LabelOrderField {
  # Order labels by name 
  NAME

  # Order labels by creation time
  CREATED_AT
}

# Represents a given language found in repositories.
type GitHub_Language implements GitHub_Node {
  # The color defined for the current language.
  color: String
  id: ID!

  # The name of the current language.
  name: String!
}

# A list of languages associated with the parent.
type GitHub_LanguageConnection {
  # A list of edges.
  edges: [GitHub_LanguageEdge]

  # A list of nodes.
  nodes: [GitHub_Language]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!

  # The total size in bytes of files written in that language.
  totalSize: Int!
}

# Represents the language of a repository.
type GitHub_LanguageEdge {
  cursor: String!
  node: GitHub_Language!

  # The number of bytes of code written in the language.
  size: Int!
}

# Ordering options for language connections.
input GitHub_LanguageOrder {
  # The field to order languages by.
  field: GitHub_LanguageOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which language connections can be ordered.
enum GitHub_LanguageOrderField {
  # Order languages by the size of all files containing the language
  SIZE
}

# A repository's open source license
type GitHub_License implements GitHub_Node {
  # The full text of the license
  body: String!

  # The conditions set by the license
  conditions: [GitHub_LicenseRule]!

  # A human-readable description of the license
  description: String

  # Whether the license should be featured
  featured: Boolean!

  # Whether the license should be displayed in license pickers
  hidden: Boolean!
  id: ID!

  # Instructions on how to implement the license
  implementation: String

  # The lowercased SPDX ID of the license
  key: String!

  # The limitations set by the license
  limitations: [GitHub_LicenseRule]!

  # The license full name specified by <https://spdx.org/licenses>
  name: String!

  # Customary short name if applicable (e.g, GPLv3)
  nickname: String

  # The permissions set by the license
  permissions: [GitHub_LicenseRule]!

  # Whether the license is a pseudo-license placeholder (e.g., other, no-license)
  pseudoLicense: Boolean!

  # Short identifier specified by <https://spdx.org/licenses>
  spdxId: String

  # URL to the license on <https://choosealicense.com>
  url: GitHub_URI
}

# Describes a License's conditions, permissions, and limitations
type GitHub_LicenseRule {
  # A description of the rule
  description: String!

  # The machine-readable rule key
  key: String!

  # The human-readable rule label
  label: String!
}

# Autogenerated input type of LinkRepositoryToProject
input GitHub_LinkRepositoryToProjectInput {
  # The ID of the Project to link to a Repository
  projectId: ID!

  # The ID of the Repository to link to a Project.
  repositoryId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of LinkRepositoryToProject
type GitHub_LinkRepositoryToProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The linked Project.
  project: GitHub_Project

  # The linked Repository.
  repository: GitHub_Repository
}

# An object that can be locked.
interface GitHub_Lockable {
  # Reason that the conversation was locked.
  activeLockReason: GitHub_LockReason

  # `true` if the object is locked
  locked: Boolean!
}

# Represents a 'locked' event on a given issue or pull request.
type GitHub_LockedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Reason that the conversation was locked (optional).
  lockReason: GitHub_LockReason

  # Object that was locked.
  lockable: GitHub_Lockable!
}

# Autogenerated input type of LockLockable
input GitHub_LockLockableInput {
  # ID of the issue or pull request to be locked.
  lockableId: ID!

  # A reason for why the issue or pull request will be locked.
  lockReason: GitHub_LockReason

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of LockLockable
type GitHub_LockLockablePayload {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The item that was locked.
  lockedRecord: GitHub_Lockable
}

# The possible reasons that an issue or pull request was locked.
enum GitHub_LockReason {
  # The issue or pull request was locked because the conversation was off-topic.
  OFF_TOPIC

  # The issue or pull request was locked because the conversation was too heated.
  TOO_HEATED

  # The issue or pull request was locked because the conversation was resolved.
  RESOLVED

  # The issue or pull request was locked because the conversation was spam.
  SPAM
}

# A placeholder user for attribution of imported data on GitHub.
type GitHub_Mannequin implements GitHub_Node & GitHub_Actor & GitHub_UniformResourceLocatable {
  # A URL pointing to the GitHub App's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The mannequin's email on the source instance.
  email: String
  id: ID!

  # The username of the actor.
  login: String!

  # The HTML path to this resource.
  resourcePath: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The URL to this resource.
  url: GitHub_URI!
}

# Represents a 'marked_as_duplicate' event on a given issue or pull request.
type GitHub_MarkedAsDuplicateEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!
}

# A public description of a Marketplace category.
type GitHub_MarketplaceCategory implements GitHub_Node {
  # The category's description.
  description: String

  # The technical description of how apps listed in this category work with GitHub.
  howItWorks: String
  id: ID!

  # The category's name.
  name: String!

  # How many Marketplace listings have this as their primary category.
  primaryListingCount: Int!

  # The HTTP path for this Marketplace category.
  resourcePath: GitHub_URI!

  # How many Marketplace listings have this as their secondary category.
  secondaryListingCount: Int!

  # The short name of the category used in its URL.
  slug: String!

  # The HTTP URL for this Marketplace category.
  url: GitHub_URI!
}

# A listing in the GitHub integration marketplace.
type GitHub_MarketplaceListing implements GitHub_Node {
  # The GitHub App this listing represents.
  app: GitHub_App

  # URL to the listing owner's company site.
  companyUrl: GitHub_URI

  # The HTTP path for configuring access to the listing's integration or OAuth app
  configurationResourcePath: GitHub_URI!

  # The HTTP URL for configuring access to the listing's integration or OAuth app
  configurationUrl: GitHub_URI!

  # URL to the listing's documentation.
  documentationUrl: GitHub_URI

  # The listing's detailed description.
  extendedDescription: String

  # The listing's detailed description rendered to HTML.
  extendedDescriptionHTML: GitHub_HTML!

  # The listing's introductory description.
  fullDescription: String!

  # The listing's introductory description rendered to HTML.
  fullDescriptionHTML: GitHub_HTML!

  # Does this listing have any plans with a free trial?
  hasPublishedFreeTrialPlans: Boolean!

  # Does this listing have a terms of service link?
  hasTermsOfService: Boolean!

  # A technical description of how this app works with GitHub.
  howItWorks: String

  # The listing's technical description rendered to HTML.
  howItWorksHTML: GitHub_HTML!
  id: ID!

  # URL to install the product to the viewer's account or organization.
  installationUrl: GitHub_URI

  # Whether this listing's app has been installed for the current viewer
  installedForViewer: Boolean!

  # Whether this listing has been removed from the Marketplace.
  isArchived: Boolean!

  # Whether this listing is still an editable draft that has not been submitted
  # for review and is not publicly visible in the Marketplace.
  isDraft: Boolean!

  # Whether the product this listing represents is available as part of a paid plan.
  isPaid: Boolean!

  # Whether this listing has been approved for display in the Marketplace.
  isPublic: Boolean!

  # Whether this listing has been rejected by GitHub for display in the Marketplace.
  isRejected: Boolean!

  # Whether this listing has been approved for unverified display in the Marketplace.
  isUnverified: Boolean!

  # Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
  isUnverifiedPending: Boolean!

  # Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  isVerificationPendingFromDraft: Boolean!

  # Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
  isVerificationPendingFromUnverified: Boolean!

  # Whether this listing has been approved for verified display in the Marketplace.
  isVerified: Boolean!

  # The hex color code, without the leading '#', for the logo background.
  logoBackgroundColor: String!

  # URL for the listing's logo image.
  logoUrl(
    # The size in pixels of the resulting square image.
    size: Int = 400
  ): GitHub_URI

  # The listing's full name.
  name: String!

  # The listing's very short description without a trailing period or ampersands.
  normalizedShortDescription: String!

  # URL to the listing's detailed pricing.
  pricingUrl: GitHub_URI

  # The category that best describes the listing.
  primaryCategory: GitHub_MarketplaceCategory!

  # URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
  privacyPolicyUrl: GitHub_URI!

  # The HTTP path for the Marketplace listing.
  resourcePath: GitHub_URI!

  # The URLs for the listing's screenshots.
  screenshotUrls: [String]!

  # An alternate category that describes the listing.
  secondaryCategory: GitHub_MarketplaceCategory

  # The listing's very short description.
  shortDescription: String!

  # The short name of the listing used in its URL.
  slug: String!

  # URL to the listing's status page.
  statusUrl: GitHub_URI

  # An email address for support for this listing's app.
  supportEmail: String

  # Either a URL or an email address for support for this listing's app, may
  # return an empty string for listings that do not require a support URL.
  supportUrl: GitHub_URI!

  # URL to the listing's terms of service.
  termsOfServiceUrl: GitHub_URI

  # The HTTP URL for the Marketplace listing.
  url: GitHub_URI!

  # Can the current viewer add plans for this Marketplace listing.
  viewerCanAddPlans: Boolean!

  # Can the current viewer approve this Marketplace listing.
  viewerCanApprove: Boolean!

  # Can the current viewer delist this Marketplace listing.
  viewerCanDelist: Boolean!

  # Can the current viewer edit this Marketplace listing.
  viewerCanEdit: Boolean!

  # Can the current viewer edit the primary and secondary category of this
  # Marketplace listing.
  #
  viewerCanEditCategories: Boolean!

  # Can the current viewer edit the plans for this Marketplace listing.
  viewerCanEditPlans: Boolean!

  # Can the current viewer return this Marketplace listing to draft state
  # so it becomes editable again.
  #
  viewerCanRedraft: Boolean!

  # Can the current viewer reject this Marketplace listing by returning it to
  # an editable draft state or rejecting it entirely.
  #
  viewerCanReject: Boolean!

  # Can the current viewer request this listing be reviewed for display in
  # the Marketplace as verified.
  #
  viewerCanRequestApproval: Boolean!

  # Indicates whether the current user has an active subscription to this Marketplace listing.
  #
  viewerHasPurchased: Boolean!

  # Indicates if the current user has purchased a subscription to this Marketplace listing
  # for all of the organizations the user owns.
  #
  viewerHasPurchasedForAllOrganizations: Boolean!

  # Does the current viewer role allow them to administer this Marketplace listing.
  #
  viewerIsListingAdmin: Boolean!
}

# Look up Marketplace Listings
type GitHub_MarketplaceListingConnection {
  # A list of edges.
  edges: [GitHub_MarketplaceListingEdge]

  # A list of nodes.
  nodes: [GitHub_MarketplaceListing]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_MarketplaceListingEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_MarketplaceListing
}

# Autogenerated input type of MarkPullRequestReadyForReview
input GitHub_MarkPullRequestReadyForReviewInput {
  # ID of the pull request to be marked as ready for review.
  pullRequestId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of MarkPullRequestReadyForReview
type GitHub_MarkPullRequestReadyForReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The pull request that is ready for review.
  pullRequest: GitHub_PullRequest
}

# Audit log entry for a members_can_delete_repos.clear event.
type GitHub_MembersCanDeleteReposClearAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a members_can_delete_repos.disable event.
type GitHub_MembersCanDeleteReposDisableAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a members_can_delete_repos.enable event.
type GitHub_MembersCanDeleteReposEnableAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Entities that have members who can set status messages.
interface GitHub_MemberStatusable {
  # Get the status messages members of this entity have set that are either public or visible only to the organization.
  memberStatuses(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for user statuses returned from the connection.
    orderBy: GitHub_UserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHub_UserStatusConnection!
}

# Represents a 'mentioned' event on a given issue or pull request.
type GitHub_MentionedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!
}

# Whether or not a PullRequest can be merged.
enum GitHub_MergeableState {
  # The pull request can be merged.
  MERGEABLE

  # The pull request cannot be merged due to merge conflicts.
  CONFLICTING

  # The mergeability of the pull request is still being calculated.
  UNKNOWN
}

# Autogenerated input type of MergeBranch
input GitHub_MergeBranchInput {
  # The Node ID of the Repository containing the base branch that will be modified.
  repositoryId: ID!

  # The name of the base branch that the provided head will be merged into.
  base: String!

  # The head to merge into the base branch. This can be a branch name or a commit GitObjectID.
  head: String!

  # Message to use for the merge commit. If omitted, a default will be used.
  commitMessage: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of MergeBranch
type GitHub_MergeBranchPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The resulting merge Commit.
  mergeCommit: GitHub_Commit
}

# Represents a 'merged' event on a given pull request.
type GitHub_MergedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the commit associated with the `merge` event.
  commit: GitHub_Commit

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the Ref associated with the `merge` event.
  mergeRef: GitHub_Ref

  # Identifies the name of the Ref associated with the `merge` event.
  mergeRefName: String!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # The HTTP path for this merged event.
  resourcePath: GitHub_URI!

  # The HTTP URL for this merged event.
  url: GitHub_URI!
}

# Autogenerated input type of MergePullRequest
input GitHub_MergePullRequestInput {
  # ID of the pull request to be merged.
  pullRequestId: ID!

  # Commit headline to use for the merge commit; if omitted, a default message will be used.
  commitHeadline: String

  # Commit body to use for the merge commit; if omitted, a default message will be used
  commitBody: String

  # OID that the pull request head ref must match to allow merge; if omitted, no check is performed.
  expectedHeadOid: GitHub_GitObjectID

  # The merge method to use. If omitted, defaults to 'MERGE'
  mergeMethod: GitHub_PullRequestMergeMethod = MERGE

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of MergePullRequest
type GitHub_MergePullRequestPayload {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The pull request that was merged.
  pullRequest: GitHub_PullRequest
}

# Represents a Milestone object on a given repository.
type GitHub_Milestone implements GitHub_Node & GitHub_Closable & GitHub_UniformResourceLocatable {
  # `true` if the object is closed (definition of closed may depend on type)
  closed: Boolean!

  # Identifies the date and time when the object was closed.
  closedAt: GitHub_DateTime

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the actor who created the milestone.
  creator: GitHub_Actor

  # Identifies the description of the milestone.
  description: String

  # Identifies the due date of the milestone.
  dueOn: GitHub_DateTime
  id: ID!

  # Just for debugging on review-lab
  issuePrioritiesDebug: String!

  # A list of issues associated with the milestone.
  issues(
    # Ordering options for issues returned from the connection.
    orderBy: GitHub_IssueOrder

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # A list of states to filter the issues by.
    states: [GitHub_IssueState!]

    # Filtering options for issues returned from the connection.
    filterBy: GitHub_IssueFilters

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueConnection!

  # Identifies the number of the milestone.
  number: Int!

  # A list of pull requests associated with the milestone.
  pullRequests(
    # A list of states to filter the pull requests by.
    states: [GitHub_PullRequestState!]

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # The head ref name to filter the pull requests by.
    headRefName: String

    # The base ref name to filter the pull requests by.
    baseRefName: String

    # Ordering options for pull requests returned from the connection.
    orderBy: GitHub_IssueOrder

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestConnection!

  # The repository associated with this milestone.
  repository: GitHub_Repository!

  # The HTTP path for this milestone
  resourcePath: GitHub_URI!

  # Identifies the state of the milestone.
  state: GitHub_MilestoneState!

  # Identifies the title of the milestone.
  title: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this milestone
  url: GitHub_URI!
}

# The connection type for Milestone.
type GitHub_MilestoneConnection {
  # A list of edges.
  edges: [GitHub_MilestoneEdge]

  # A list of nodes.
  nodes: [GitHub_Milestone]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a 'milestoned' event on a given issue or pull request.
type GitHub_MilestonedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the milestone title associated with the 'milestoned' event.
  milestoneTitle: String!

  # Object referenced by event.
  subject: GitHub_MilestoneItem!
}

# An edge in a connection.
type GitHub_MilestoneEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Milestone
}

# Types that can be inside a Milestone.
union GitHub_MilestoneItem = GitHub_Issue | GitHub_PullRequest

# Ordering options for milestone connections.
input GitHub_MilestoneOrder {
  # The field to order milestones by.
  field: GitHub_MilestoneOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which milestone connections can be ordered.
enum GitHub_MilestoneOrderField {
  # Order milestones by when they are due.
  DUE_DATE

  # Order milestones by when they were created.
  CREATED_AT

  # Order milestones by when they were last updated.
  UPDATED_AT

  # Order milestones by their number.
  NUMBER
}

# The possible states of a milestone.
enum GitHub_MilestoneState {
  # A milestone that is still open.
  OPEN

  # A milestone that has been closed.
  CLOSED
}

# Entities that can be minimized.
interface GitHub_Minimizable {
  # Returns whether or not a comment has been minimized.
  isMinimized: Boolean!

  # Returns why the comment was minimized.
  minimizedReason: String

  # Check if the current viewer can minimize this object.
  viewerCanMinimize: Boolean!
}

# Autogenerated input type of MinimizeComment
input GitHub_MinimizeCommentInput {
  # The Node ID of the subject to modify.
  subjectId: ID!

  # The classification of comment
  classifier: GitHub_ReportedContentClassifiers!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of MinimizeComment
type GitHub_MinimizeCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The comment that was minimized.
  minimizedComment: GitHub_Minimizable
}

# Represents a 'moved_columns_in_project' event on a given issue or pull request.
type GitHub_MovedColumnsInProjectEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!
}

# Autogenerated input type of MoveProjectCard
input GitHub_MoveProjectCardInput {
  # The id of the card to move.
  cardId: ID!

  # The id of the column to move it into.
  columnId: ID!

  # Place the new card after the card with this id. Pass null to place it at the top.
  afterCardId: ID

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of MoveProjectCard
type GitHub_MoveProjectCardPayload {
  # The new edge of the moved card.
  cardEdge: GitHub_ProjectCardEdge

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of MoveProjectColumn
input GitHub_MoveProjectColumnInput {
  # The id of the column to move.
  columnId: ID!

  # Place the new column after the column with this id. Pass null to place it at the front.
  afterColumnId: ID

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of MoveProjectColumn
type GitHub_MoveProjectColumnPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The new edge of the moved column.
  columnEdge: GitHub_ProjectColumnEdge
}

# An object with an ID.
interface GitHub_Node {
  # ID of the object.
  id: ID!
}

# Metadata for an audit entry with action oauth_application.*
interface GitHub_OauthApplicationAuditEntryData {
  # The name of the OAuth Application.
  oauthApplicationName: String

  # The HTTP path for the OAuth Application
  oauthApplicationResourcePath: GitHub_URI

  # The HTTP URL for the OAuth Application
  oauthApplicationUrl: GitHub_URI
}

# Audit log entry for a oauth_application.create event.
type GitHub_OauthApplicationCreateAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OauthApplicationAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The application URL of the OAuth Application.
  applicationUrl: GitHub_URI

  # The callback URL of the OAuth Application.
  callbackUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The name of the OAuth Application.
  oauthApplicationName: String

  # The HTTP path for the OAuth Application
  oauthApplicationResourcePath: GitHub_URI

  # The HTTP URL for the OAuth Application
  oauthApplicationUrl: GitHub_URI

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The rate limit of the OAuth Application.
  rateLimit: Int

  # The state of the OAuth Application.
  state: GitHub_OauthApplicationCreateAuditEntryState

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The state of an OAuth Application when it was created.
enum GitHub_OauthApplicationCreateAuditEntryState {
  # The OAuth Application was active and allowed to have OAuth Accesses.
  ACTIVE

  # The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns.
  SUSPENDED

  # The OAuth Application was in the process of being deleted.
  PENDING_DELETION
}

# The corresponding operation type for the action
enum GitHub_OperationType {
  # An existing resource was accessed
  ACCESS

  # A resource performed an authentication event
  AUTHENTICATION

  # A new resource was created
  CREATE

  # An existing resource was modified
  MODIFY

  # An existing resource was removed
  REMOVE

  # An existing resource was restored
  RESTORE

  # An existing resource was transferred between multiple resources
  TRANSFER
}

# Possible directions in which to order a list of items when provided an `orderBy` argument.
enum GitHub_OrderDirection {
  # Specifies an ascending order for a given `orderBy` argument.
  ASC

  # Specifies a descending order for a given `orderBy` argument.
  DESC
}

# Audit log entry for a org.add_billing_manager
type GitHub_OrgAddBillingManagerAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The email address used to invite a billing manager for the organization.
  invitationEmail: String

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.add_member
type GitHub_OrgAddMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The permission level of the member added to the organization.
  permission: GitHub_OrgAddMemberAuditEntryPermission

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The permissions available to members on an Organization.
enum GitHub_OrgAddMemberAuditEntryPermission {
  # Can read and clone repositories.
  READ

  # Can read, clone, push, and add collaborators to repositories.
  ADMIN
}

# An account on GitHub, with one or more owners, that has repositories, members and teams.
type GitHub_Organization implements GitHub_Node & GitHub_Actor & GitHub_PackageOwner & GitHub_ProjectOwner & GitHub_RepositoryOwner & GitHub_UniformResourceLocatable & GitHub_MemberStatusable & GitHub_ProfileOwner & GitHub_Sponsorable {
  # Determine if this repository owner has any items that can be pinned to their profile.
  anyPinnableItems(
    # Filter to only a particular kind of pinnable item.
    type: GitHub_PinnableItemType
  ): Boolean!

  # Audit log entries of the organization
  auditLog(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The query string to filter audit entries
    query: String

    # Ordering options for the returned audit log entries.
    orderBy: GitHub_AuditLogOrder = {field: CREATED_AT, direction: DESC}
  ): GitHub_OrganizationAuditEntryConnection!

  # A URL pointing to the organization's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The organization's public profile description.
  description: String

  # The organization's public profile description rendered to HTML.
  descriptionHTML: String

  # The organization's public email.
  email: String
  id: ID!

  # The setting value for whether the organization has an IP allow list enabled.
  ipAllowListEnabledSetting: GitHub_IpAllowListEnabledSettingValue!

  # The IP addresses that are allowed to access resources owned by the organization.
  ipAllowListEntries(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for IP allow list entries returned.
    orderBy: GitHub_IpAllowListEntryOrder = {field: ALLOW_LIST_VALUE, direction: ASC}
  ): GitHub_IpAllowListEntryConnection!

  # Whether the organization has verified its profile email and website.
  isVerified: Boolean!

  # Showcases a selection of repositories and gists that the profile owner has
  # either curated or that have been selected automatically based on popularity.
  itemShowcase: GitHub_ProfileItemShowcase!

  # The organization's public profile location.
  location: String

  # The organization's login name.
  login: String!

  # Get the status messages members of this entity have set that are either public or visible only to the organization.
  memberStatuses(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for user statuses returned from the connection.
    orderBy: GitHub_UserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHub_UserStatusConnection!

  # A list of users who are members of this organization.
  membersWithRole(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_OrganizationMemberConnection!

  # The organization's public profile name.
  name: String

  # The HTTP path creating a new team
  newTeamResourcePath: GitHub_URI!

  # The HTTP URL creating a new team
  newTeamUrl: GitHub_URI!

  # The billing email for the organization.
  organizationBillingEmail: String

  # A list of packages under the owner.
  packages(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Find packages by their names.
    names: [String]

    # Find packages in a repository by ID.
    repositoryId: ID

    # Filter registry package by type.
    packageType: GitHub_PackageType

    # Ordering of the returned packages.
    orderBy: GitHub_PackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHub_PackageConnection!

  # A list of users who have been invited to join this organization.
  pendingMembers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # A list of repositories and gists this profile owner can pin to their profile.
  pinnableItems(
    # Filter the types of pinnable items that are returned.
    types: [GitHub_PinnableItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PinnableItemConnection!

  # A list of repositories and gists this profile owner has pinned to their profile
  pinnedItems(
    # Filter the types of pinned items that are returned.
    types: [GitHub_PinnableItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PinnableItemConnection!

  # Returns how many more items this profile owner can pin to their profile.
  pinnedItemsRemaining: Int!

  # Find project by number.
  project(
    # The project number to find.
    number: Int!
  ): GitHub_Project

  # A list of projects under the owner.
  projects(
    # Ordering options for projects returned from the connection
    orderBy: GitHub_ProjectOrder

    # Query to search projects by, currently only searching by name.
    search: String

    # A list of states to filter the projects by.
    states: [GitHub_ProjectState!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ProjectConnection!

  # The HTTP path listing organization's projects
  projectsResourcePath: GitHub_URI!

  # The HTTP URL listing organization's projects
  projectsUrl: GitHub_URI!

  # A list of repositories that the user owns.
  repositories(
    # If non-null, filters repositories according to privacy
    privacy: GitHub_RepositoryPrivacy

    # Ordering options for repositories returned from the connection
    orderBy: GitHub_RepositoryOrder

    # Array of viewer's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # current viewer owns.
    affiliations: [GitHub_RepositoryAffiliation]

    # Array of owner's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # organization or user being viewed owns.
    ownerAffiliations: [GitHub_RepositoryAffiliation] = [OWNER, COLLABORATOR]

    # If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If non-null, filters repositories according to whether they are forks of another repository
    isFork: Boolean
  ): GitHub_RepositoryConnection!

  # Find Repository.
  repository(
    # Name of Repository to find.
    name: String!
  ): GitHub_Repository

  # When true the organization requires all members, billing managers, and outside
  # collaborators to enable two-factor authentication.
  requiresTwoFactorAuthentication: Boolean

  # The HTTP path for this organization.
  resourcePath: GitHub_URI!

  # The Organization's SAML identity providers
  samlIdentityProvider: GitHub_OrganizationIdentityProvider

  # The GitHub Sponsors listing for this user.
  sponsorsListing: GitHub_SponsorsListing

  # This object's sponsorships as the maintainer.
  sponsorshipsAsMaintainer(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Whether or not to include private sponsorships in the result set
    includePrivate: Boolean = false

    # Ordering options for sponsorships returned from this connection. If left
    # blank, the sponsorships will be ordered based on relevancy to the viewer.
    orderBy: GitHub_SponsorshipOrder
  ): GitHub_SponsorshipConnection!

  # This object's sponsorships as the sponsor.
  sponsorshipsAsSponsor(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for sponsorships returned from this connection. If left
    # blank, the sponsorships will be ordered based on relevancy to the viewer.
    orderBy: GitHub_SponsorshipOrder
  ): GitHub_SponsorshipConnection!

  # Find an organization's team by its slug.
  team(
    # The name or slug of the team to find.
    slug: String!
  ): GitHub_Team

  # A list of teams in this organization.
  teams(
    # If non-null, filters teams according to privacy
    privacy: GitHub_TeamPrivacy

    # If non-null, filters teams according to whether the viewer is an admin or member on team
    role: GitHub_TeamRole

    # If non-null, filters teams with query on team name and team slug
    query: String

    # User logins to filter by
    userLogins: [String!]

    # Ordering options for teams returned from the connection
    orderBy: GitHub_TeamOrder

    # If true, filters teams that are mapped to an LDAP Group (Enterprise only)
    ldapMapped: Boolean

    # If true, restrict to only root teams
    rootTeamsOnly: Boolean = false

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_TeamConnection!

  # The HTTP path listing organization's teams
  teamsResourcePath: GitHub_URI!

  # The HTTP URL listing organization's teams
  teamsUrl: GitHub_URI!

  # The organization's Twitter username.
  twitterUsername: String

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this organization.
  url: GitHub_URI!

  # Organization is adminable by the viewer.
  viewerCanAdminister: Boolean!

  # Can the viewer pin repositories and gists to the profile?
  viewerCanChangePinnedItems: Boolean!

  # Can the current viewer create new projects on this owner.
  viewerCanCreateProjects: Boolean!

  # Viewer can create repositories on this organization
  viewerCanCreateRepositories: Boolean!

  # Viewer can create teams on this organization.
  viewerCanCreateTeams: Boolean!

  # Viewer is an active member of this organization.
  viewerIsAMember: Boolean!

  # The organization's public profile URL.
  websiteUrl: GitHub_URI
}

# An audit entry in an organization audit log.
union GitHub_OrganizationAuditEntry = GitHub_MembersCanDeleteReposClearAuditEntry | GitHub_MembersCanDeleteReposDisableAuditEntry | GitHub_MembersCanDeleteReposEnableAuditEntry | GitHub_OauthApplicationCreateAuditEntry | GitHub_OrgAddBillingManagerAuditEntry | GitHub_OrgAddMemberAuditEntry | GitHub_OrgBlockUserAuditEntry | GitHub_OrgConfigDisableCollaboratorsOnlyAuditEntry | GitHub_OrgConfigEnableCollaboratorsOnlyAuditEntry | GitHub_OrgCreateAuditEntry | GitHub_OrgDisableOauthAppRestrictionsAuditEntry | GitHub_OrgDisableSamlAuditEntry | GitHub_OrgDisableTwoFactorRequirementAuditEntry | GitHub_OrgEnableOauthAppRestrictionsAuditEntry | GitHub_OrgEnableSamlAuditEntry | GitHub_OrgEnableTwoFactorRequirementAuditEntry | GitHub_OrgInviteMemberAuditEntry | GitHub_OrgInviteToBusinessAuditEntry | GitHub_OrgOauthAppAccessApprovedAuditEntry | GitHub_OrgOauthAppAccessDeniedAuditEntry | GitHub_OrgOauthAppAccessRequestedAuditEntry | GitHub_OrgRemoveBillingManagerAuditEntry | GitHub_OrgRemoveMemberAuditEntry | GitHub_OrgRemoveOutsideCollaboratorAuditEntry | GitHub_OrgRestoreMemberAuditEntry | GitHub_OrgUnblockUserAuditEntry | GitHub_OrgUpdateDefaultRepositoryPermissionAuditEntry | GitHub_OrgUpdateMemberAuditEntry | GitHub_OrgUpdateMemberRepositoryCreationPermissionAuditEntry | GitHub_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | GitHub_PrivateRepositoryForkingDisableAuditEntry | GitHub_PrivateRepositoryForkingEnableAuditEntry | GitHub_RepoAccessAuditEntry | GitHub_RepoAddMemberAuditEntry | GitHub_RepoAddTopicAuditEntry | GitHub_RepoArchivedAuditEntry | GitHub_RepoChangeMergeSettingAuditEntry | GitHub_RepoConfigDisableAnonymousGitAccessAuditEntry | GitHub_RepoConfigDisableCollaboratorsOnlyAuditEntry | GitHub_RepoConfigDisableContributorsOnlyAuditEntry | GitHub_RepoConfigDisableSockpuppetDisallowedAuditEntry | GitHub_RepoConfigEnableAnonymousGitAccessAuditEntry | GitHub_RepoConfigEnableCollaboratorsOnlyAuditEntry | GitHub_RepoConfigEnableContributorsOnlyAuditEntry | GitHub_RepoConfigEnableSockpuppetDisallowedAuditEntry | GitHub_RepoConfigLockAnonymousGitAccessAuditEntry | GitHub_RepoConfigUnlockAnonymousGitAccessAuditEntry | GitHub_RepoCreateAuditEntry | GitHub_RepoDestroyAuditEntry | GitHub_RepoRemoveMemberAuditEntry | GitHub_RepoRemoveTopicAuditEntry | GitHub_RepositoryVisibilityChangeDisableAuditEntry | GitHub_RepositoryVisibilityChangeEnableAuditEntry | GitHub_TeamAddMemberAuditEntry | GitHub_TeamAddRepositoryAuditEntry | GitHub_TeamChangeParentTeamAuditEntry | GitHub_TeamRemoveMemberAuditEntry | GitHub_TeamRemoveRepositoryAuditEntry

# The connection type for OrganizationAuditEntry.
type GitHub_OrganizationAuditEntryConnection {
  # A list of edges.
  edges: [GitHub_OrganizationAuditEntryEdge]

  # A list of nodes.
  nodes: [GitHub_OrganizationAuditEntry]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Metadata for an audit entry with action org.*
interface GitHub_OrganizationAuditEntryData {
  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI
}

# An edge in a connection.
type GitHub_OrganizationAuditEntryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_OrganizationAuditEntry
}

# The connection type for Organization.
type GitHub_OrganizationConnection {
  # A list of edges.
  edges: [GitHub_OrganizationEdge]

  # A list of nodes.
  nodes: [GitHub_Organization]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_OrganizationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Organization
}

# An Identity Provider configured to provision SAML and SCIM identities for Organizations
type GitHub_OrganizationIdentityProvider implements GitHub_Node {
  # The digest algorithm used to sign SAML requests for the Identity Provider.
  digestMethod: GitHub_URI

  # External Identities provisioned by this Identity Provider
  externalIdentities(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ExternalIdentityConnection!
  id: ID!

  # The x509 certificate used by the Identity Provder to sign assertions and responses.
  idpCertificate: GitHub_X509Certificate

  # The Issuer Entity ID for the SAML Identity Provider
  issuer: String

  # Organization this Identity Provider belongs to
  organization: GitHub_Organization

  # The signature algorithm used to sign SAML requests for the Identity Provider.
  signatureMethod: GitHub_URI

  # The URL endpoint for the Identity Provider's SAML SSO.
  ssoUrl: GitHub_URI
}

# An Invitation for a user to an organization.
type GitHub_OrganizationInvitation implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The email address of the user invited to the organization.
  email: String
  id: ID!

  # The type of invitation that was sent (e.g. email, user).
  invitationType: GitHub_OrganizationInvitationType!

  # The user who was invited to the organization.
  invitee: GitHub_User

  # The user who created the invitation.
  inviter: GitHub_User!

  # The organization the invite is for
  organization: GitHub_Organization!

  # The user's pending role in the organization (e.g. member, owner).
  role: GitHub_OrganizationInvitationRole!
}

# The connection type for OrganizationInvitation.
type GitHub_OrganizationInvitationConnection {
  # A list of edges.
  edges: [GitHub_OrganizationInvitationEdge]

  # A list of nodes.
  nodes: [GitHub_OrganizationInvitation]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_OrganizationInvitationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_OrganizationInvitation
}

# The possible organization invitation roles.
enum GitHub_OrganizationInvitationRole {
  # The user is invited to be a direct member of the organization.
  DIRECT_MEMBER

  # The user is invited to be an admin of the organization.
  ADMIN

  # The user is invited to be a billing manager of the organization.
  BILLING_MANAGER

  # The user's previous role will be reinstated.
  REINSTATE
}

# The possible organization invitation types.
enum GitHub_OrganizationInvitationType {
  # The invitation was to an existing user.
  USER

  # The invitation was to an email address.
  EMAIL
}

# The connection type for User.
type GitHub_OrganizationMemberConnection {
  # A list of edges.
  edges: [GitHub_OrganizationMemberEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a user within an organization.
type GitHub_OrganizationMemberEdge {
  # A cursor for use in pagination.
  cursor: String!

  # Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
  hasTwoFactorEnabled: Boolean

  # The item at the end of the edge.
  node: GitHub_User

  # The role this user has in the organization.
  role: GitHub_OrganizationMemberRole
}

# The possible roles within an organization for its members.
enum GitHub_OrganizationMemberRole {
  # The user is a member of the organization.
  MEMBER

  # The user is an administrator of the organization.
  ADMIN
}

# The possible values for the members can create repositories setting on an organization.
enum GitHub_OrganizationMembersCanCreateRepositoriesSettingValue {
  # Members will be able to create public and private repositories.
  ALL

  # Members will be able to create only private repositories.
  PRIVATE

  # Members will not be able to create public or private repositories.
  DISABLED
}

# Ordering options for organization connections.
input GitHub_OrganizationOrder {
  # The field to order organizations by.
  field: GitHub_OrganizationOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which organization connections can be ordered.
enum GitHub_OrganizationOrderField {
  # Order organizations by creation time
  CREATED_AT

  # Order organizations by login
  LOGIN
}

# An organization list hovercard context
type GitHub_OrganizationsHovercardContext implements GitHub_HovercardContext {
  # A string describing this context
  message: String!

  # An octicon to accompany this context
  octicon: String!

  # Organizations this user is a member of that are relevant
  relevantOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_OrganizationConnection!

  # The total number of organizations this user is in
  totalOrganizationCount: Int!
}

# An organization teams hovercard context
type GitHub_OrganizationTeamsHovercardContext implements GitHub_HovercardContext {
  # A string describing this context
  message: String!

  # An octicon to accompany this context
  octicon: String!

  # Teams in this organization the user is a member of that are relevant
  relevantTeams(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_TeamConnection!

  # The path for the full team list for this user
  teamsResourcePath: GitHub_URI!

  # The URL for the full team list for this user
  teamsUrl: GitHub_URI!

  # The total number of teams the user is on in the organization
  totalTeamCount: Int!
}

# Audit log entry for a org.block_user
type GitHub_OrgBlockUserAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The blocked user.
  blockedUser: GitHub_User

  # The username of the blocked user.
  blockedUserName: String

  # The HTTP path for the blocked user.
  blockedUserResourcePath: GitHub_URI

  # The HTTP URL for the blocked user.
  blockedUserUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.config.disable_collaborators_only event.
type GitHub_OrgConfigDisableCollaboratorsOnlyAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.config.enable_collaborators_only event.
type GitHub_OrgConfigEnableCollaboratorsOnlyAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.create event.
type GitHub_OrgCreateAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The billing plan for the Organization.
  billingPlan: GitHub_OrgCreateAuditEntryBillingPlan

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The billing plans available for organizations.
enum GitHub_OrgCreateAuditEntryBillingPlan {
  # Free Plan
  FREE

  # Team Plan
  BUSINESS

  # Enterprise Cloud Plan
  BUSINESS_PLUS

  # Legacy Unlimited Plan
  UNLIMITED

  # Tiered Per Seat Plan
  TIERED_PER_SEAT
}

# Audit log entry for a org.disable_oauth_app_restrictions event.
type GitHub_OrgDisableOauthAppRestrictionsAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.disable_saml event.
type GitHub_OrgDisableSamlAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The SAML provider's digest algorithm URL.
  digestMethodUrl: GitHub_URI
  id: ID!

  # The SAML provider's issuer URL.
  issuerUrl: GitHub_URI

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The SAML provider's signature algorithm URL.
  signatureMethodUrl: GitHub_URI

  # The SAML provider's single sign-on URL.
  singleSignOnUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.disable_two_factor_requirement event.
type GitHub_OrgDisableTwoFactorRequirementAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.enable_oauth_app_restrictions event.
type GitHub_OrgEnableOauthAppRestrictionsAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.enable_saml event.
type GitHub_OrgEnableSamlAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The SAML provider's digest algorithm URL.
  digestMethodUrl: GitHub_URI
  id: ID!

  # The SAML provider's issuer URL.
  issuerUrl: GitHub_URI

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The SAML provider's signature algorithm URL.
  signatureMethodUrl: GitHub_URI

  # The SAML provider's single sign-on URL.
  singleSignOnUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.enable_two_factor_requirement event.
type GitHub_OrgEnableTwoFactorRequirementAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.invite_member event.
type GitHub_OrgInviteMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The email address of the organization invitation.
  email: String
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The organization invitation.
  organizationInvitation: GitHub_OrganizationInvitation

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.invite_to_business event.
type GitHub_OrgInviteToBusinessAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.oauth_app_access_approved event.
type GitHub_OrgOauthAppAccessApprovedAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OauthApplicationAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The name of the OAuth Application.
  oauthApplicationName: String

  # The HTTP path for the OAuth Application
  oauthApplicationResourcePath: GitHub_URI

  # The HTTP URL for the OAuth Application
  oauthApplicationUrl: GitHub_URI

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.oauth_app_access_denied event.
type GitHub_OrgOauthAppAccessDeniedAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OauthApplicationAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The name of the OAuth Application.
  oauthApplicationName: String

  # The HTTP path for the OAuth Application
  oauthApplicationResourcePath: GitHub_URI

  # The HTTP URL for the OAuth Application
  oauthApplicationUrl: GitHub_URI

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.oauth_app_access_requested event.
type GitHub_OrgOauthAppAccessRequestedAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OauthApplicationAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The name of the OAuth Application.
  oauthApplicationName: String

  # The HTTP path for the OAuth Application
  oauthApplicationResourcePath: GitHub_URI

  # The HTTP URL for the OAuth Application
  oauthApplicationUrl: GitHub_URI

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.remove_billing_manager event.
type GitHub_OrgRemoveBillingManagerAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The reason for the billing manager being removed.
  reason: GitHub_OrgRemoveBillingManagerAuditEntryReason

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The reason a billing manager was removed from an Organization.
enum GitHub_OrgRemoveBillingManagerAuditEntryReason {
  # The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  # SAML external identity missing
  SAML_EXTERNAL_IDENTITY_MISSING

  # SAML SSO enforcement requires an external identity
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
}

# Audit log entry for a org.remove_member event.
type GitHub_OrgRemoveMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The types of membership the member has with the organization.
  membershipTypes: [GitHub_OrgRemoveMemberAuditEntryMembershipType!]

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The reason for the member being removed.
  reason: GitHub_OrgRemoveMemberAuditEntryReason

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The type of membership a user has with an Organization.
enum GitHub_OrgRemoveMemberAuditEntryMembershipType {
  # A direct member is a user that is a member of the Organization.
  DIRECT_MEMBER

  # Organization administrators have full access and can change several settings,
  # including the names of repositories that belong to the Organization and Owners
  # team membership. In addition, organization admins can delete the organization
  # and all of its repositories.
  ADMIN

  # A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  BILLING_MANAGER

  # An unaffiliated collaborator is a person who is not a member of the
  # Organization and does not have access to any repositories in the Organization.
  UNAFFILIATED

  # An outside collaborator is a person who isn't explicitly a member of the
  # Organization, but who has Read, Write, or Admin permissions to one or more
  # repositories in the organization.
  OUTSIDE_COLLABORATOR
}

# The reason a member was removed from an Organization.
enum GitHub_OrgRemoveMemberAuditEntryReason {
  # The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  # SAML external identity missing
  SAML_EXTERNAL_IDENTITY_MISSING

  # SAML SSO enforcement requires an external identity
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY

  # User account has been deleted
  USER_ACCOUNT_DELETED

  # User was removed from organization during account recovery
  TWO_FACTOR_ACCOUNT_RECOVERY
}

# Audit log entry for a org.remove_outside_collaborator event.
type GitHub_OrgRemoveOutsideCollaboratorAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The types of membership the outside collaborator has with the organization.
  membershipTypes: [GitHub_OrgRemoveOutsideCollaboratorAuditEntryMembershipType!]

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The reason for the outside collaborator being removed from the Organization.
  reason: GitHub_OrgRemoveOutsideCollaboratorAuditEntryReason

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The type of membership a user has with an Organization.
enum GitHub_OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  # An outside collaborator is a person who isn't explicitly a member of the
  # Organization, but who has Read, Write, or Admin permissions to one or more
  # repositories in the organization.
  OUTSIDE_COLLABORATOR

  # An unaffiliated collaborator is a person who is not a member of the
  # Organization and does not have access to any repositories in the organization.
  UNAFFILIATED

  # A billing manager is a user who manages the billing settings for the Organization, such as updating payment information.
  BILLING_MANAGER
}

# The reason an outside collaborator was removed from an Organization.
enum GitHub_OrgRemoveOutsideCollaboratorAuditEntryReason {
  # The organization required 2FA of its billing managers and this user did not have 2FA enabled.
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE

  # SAML external identity missing
  SAML_EXTERNAL_IDENTITY_MISSING
}

# Audit log entry for a org.restore_member event.
type GitHub_OrgRestoreMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The number of custom email routings for the restored member.
  restoredCustomEmailRoutingsCount: Int

  # The number of issue assignemnts for the restored member.
  restoredIssueAssignmentsCount: Int

  # Restored organization membership objects.
  restoredMemberships: [GitHub_OrgRestoreMemberAuditEntryMembership!]

  # The number of restored memberships.
  restoredMembershipsCount: Int

  # The number of repositories of the restored member.
  restoredRepositoriesCount: Int

  # The number of starred repositories for the restored member.
  restoredRepositoryStarsCount: Int

  # The number of watched repositories for the restored member.
  restoredRepositoryWatchesCount: Int

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Types of memberships that can be restored for an Organization member.
union GitHub_OrgRestoreMemberAuditEntryMembership = GitHub_OrgRestoreMemberMembershipOrganizationAuditEntryData | GitHub_OrgRestoreMemberMembershipRepositoryAuditEntryData | GitHub_OrgRestoreMemberMembershipTeamAuditEntryData

# Metadata for an organization membership for org.restore_member actions
type GitHub_OrgRestoreMemberMembershipOrganizationAuditEntryData implements GitHub_OrganizationAuditEntryData {
  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI
}

# Metadata for a repository membership for org.restore_member actions
type GitHub_OrgRestoreMemberMembershipRepositoryAuditEntryData implements GitHub_RepositoryAuditEntryData {
  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI
}

# Metadata for a team membership for org.restore_member actions
type GitHub_OrgRestoreMemberMembershipTeamAuditEntryData implements GitHub_TeamAuditEntryData {
  # The team associated with the action
  team: GitHub_Team

  # The name of the team
  teamName: String

  # The HTTP path for this team
  teamResourcePath: GitHub_URI

  # The HTTP URL for this team
  teamUrl: GitHub_URI
}

# Audit log entry for a org.unblock_user
type GitHub_OrgUnblockUserAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The user being unblocked by the organization.
  blockedUser: GitHub_User

  # The username of the blocked user.
  blockedUserName: String

  # The HTTP path for the blocked user.
  blockedUserResourcePath: GitHub_URI

  # The HTTP URL for the blocked user.
  blockedUserUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a org.update_default_repository_permission
type GitHub_OrgUpdateDefaultRepositoryPermissionAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The new default repository permission level for the organization.
  permission: GitHub_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  # The former default repository permission level for the organization.
  permissionWas: GitHub_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The default permission a repository can have in an Organization.
enum GitHub_OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  # Can read and clone repositories.
  READ

  # Can read, clone and push to repositories.
  WRITE

  # Can read, clone, push, and add collaborators to repositories.
  ADMIN

  # No default permission value.
  NONE
}

# Audit log entry for a org.update_member event.
type GitHub_OrgUpdateMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The new member permission level for the organization.
  permission: GitHub_OrgUpdateMemberAuditEntryPermission

  # The former member permission level for the organization.
  permissionWas: GitHub_OrgUpdateMemberAuditEntryPermission

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The permissions available to members on an Organization.
enum GitHub_OrgUpdateMemberAuditEntryPermission {
  # Can read and clone repositories.
  READ

  # Can read, clone, push, and add collaborators to repositories.
  ADMIN
}

# Audit log entry for a org.update_member_repository_creation_permission event.
type GitHub_OrgUpdateMemberRepositoryCreationPermissionAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # Can members create repositories in the organization.
  canCreateRepositories: Boolean

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI

  # The permission for visibility level of repositories for this organization.
  visibility: GitHub_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
}

# The permissions available for repository creation on an Organization.
enum GitHub_OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  # All organization members are restricted from creating any repositories.
  ALL

  # All organization members are restricted from creating public repositories.
  PUBLIC
}

# Audit log entry for a org.update_member_repository_invitation_permission event.
type GitHub_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # Can outside collaborators be invited to repositories in the organization.
  canInviteOutsideCollaboratorsToRepositories: Boolean

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Information for an uploaded package.
type GitHub_Package implements GitHub_Node {
  id: ID!

  # Find the latest version for the package.
  latestVersion: GitHub_PackageVersion

  # Identifies the name of the package.
  name: String!

  # Identifies the type of the package.
  packageType: GitHub_PackageType!

  # The repository this package belongs to.
  repository: GitHub_Repository

  # Statistics about package activity.
  statistics: GitHub_PackageStatistics

  # Find package version by version string.
  version(
    # The package version.
    version: String!
  ): GitHub_PackageVersion

  # list of versions for this package
  versions(
    # Ordering of the returned packages.
    orderBy: GitHub_PackageVersionOrder = {field: CREATED_AT, direction: DESC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PackageVersionConnection!
}

# The connection type for Package.
type GitHub_PackageConnection {
  # A list of edges.
  edges: [GitHub_PackageEdge]

  # A list of nodes.
  nodes: [GitHub_Package]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PackageEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Package
}

# A file in a package version.
type GitHub_PackageFile implements GitHub_Node {
  id: ID!

  # MD5 hash of the file.
  md5: String

  # Name of the file.
  name: String!

  # The package version this file belongs to.
  packageVersion: GitHub_PackageVersion

  # SHA1 hash of the file.
  sha1: String

  # SHA256 hash of the file.
  sha256: String

  # Size of the file in bytes.
  size: Int

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # URL to download the asset.
  url: GitHub_URI
}

# The connection type for PackageFile.
type GitHub_PackageFileConnection {
  # A list of edges.
  edges: [GitHub_PackageFileEdge]

  # A list of nodes.
  nodes: [GitHub_PackageFile]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PackageFileEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PackageFile
}

# Ways in which lists of package files can be ordered upon return.
input GitHub_PackageFileOrder {
  # The field in which to order package files by.
  field: GitHub_PackageFileOrderField

  # The direction in which to order package files by the specified field.
  direction: GitHub_OrderDirection
}

# Properties by which package file connections can be ordered.
enum GitHub_PackageFileOrderField {
  # Order package files by creation time
  CREATED_AT
}

# Ways in which lists of packages can be ordered upon return.
input GitHub_PackageOrder {
  # The field in which to order packages by.
  field: GitHub_PackageOrderField

  # The direction in which to order packages by the specified field.
  direction: GitHub_OrderDirection
}

# Properties by which package connections can be ordered.
enum GitHub_PackageOrderField {
  # Order packages by creation time
  CREATED_AT
}

# Represents an owner of a package.
interface GitHub_PackageOwner {
  id: ID!

  # A list of packages under the owner.
  packages(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Find packages by their names.
    names: [String]

    # Find packages in a repository by ID.
    repositoryId: ID

    # Filter registry package by type.
    packageType: GitHub_PackageType

    # Ordering of the returned packages.
    orderBy: GitHub_PackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHub_PackageConnection!
}

# Represents a object that contains package activity statistics such as downloads.
type GitHub_PackageStatistics {
  # Number of times the package was downloaded since it was created.
  downloadsTotalCount: Int!
}

# A version tag contains the mapping between a tag name and a version.
type GitHub_PackageTag implements GitHub_Node {
  id: ID!

  # Identifies the tag name of the version.
  name: String!

  # Version that the tag is associated with.
  version: GitHub_PackageVersion
}

# The possible types of a package.
enum GitHub_PackageType {
  # An npm package.
  NPM

  # A rubygems package.
  RUBYGEMS

  # A maven package.
  MAVEN

  # A docker image.
  DOCKER

  # A debian package.
  DEBIAN

  # A nuget package.
  NUGET

  # A python package.
  PYPI
}

# Information about a specific package version.
type GitHub_PackageVersion implements GitHub_Node {
  # List of files associated with this package version
  files(
    # Ordering of the returned package files.
    orderBy: GitHub_PackageFileOrder = {field: CREATED_AT, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PackageFileConnection!
  id: ID!

  # The package associated with this version.
  package: GitHub_Package

  # The platform this version was built for.
  platform: String

  # Whether or not this version is a pre-release.
  preRelease: Boolean!

  # The README of this package version.
  readme: String

  # The release associated with this package version.
  release: GitHub_Release

  # Statistics about package activity.
  statistics: GitHub_PackageVersionStatistics

  # The package version summary.
  summary: String

  # The version string.
  version: String!
}

# The connection type for PackageVersion.
type GitHub_PackageVersionConnection {
  # A list of edges.
  edges: [GitHub_PackageVersionEdge]

  # A list of nodes.
  nodes: [GitHub_PackageVersion]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PackageVersionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PackageVersion
}

# Ways in which lists of package versions can be ordered upon return.
input GitHub_PackageVersionOrder {
  # The field in which to order package versions by.
  field: GitHub_PackageVersionOrderField

  # The direction in which to order package versions by the specified field.
  direction: GitHub_OrderDirection
}

# Properties by which package version connections can be ordered.
enum GitHub_PackageVersionOrderField {
  # Order package versions by creation time
  CREATED_AT
}

# Represents a object that contains package version activity statistics such as downloads.
type GitHub_PackageVersionStatistics {
  # Number of times the package was downloaded since it was created.
  downloadsTotalCount: Int!
}

# Information about pagination in a connection.
type GitHub_PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

# Types that can grant permissions on a repository to a user
union GitHub_PermissionGranter = GitHub_Organization | GitHub_Repository | GitHub_Team

# A level of permission and source for a user's access to a repository.
type GitHub_PermissionSource {
  # The organization the repository belongs to.
  organization: GitHub_Organization!

  # The level of access this source has granted to the user.
  permission: GitHub_DefaultRepositoryPermissionField!

  # The source of this permission.
  source: GitHub_PermissionGranter!
}

# Types that can be pinned to a profile page.
union GitHub_PinnableItem = GitHub_Gist | GitHub_Repository

# The connection type for PinnableItem.
type GitHub_PinnableItemConnection {
  # A list of edges.
  edges: [GitHub_PinnableItemEdge]

  # A list of nodes.
  nodes: [GitHub_PinnableItem]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PinnableItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PinnableItem
}

# Represents items that can be pinned to a profile page or dashboard.
enum GitHub_PinnableItemType {
  # A repository.
  REPOSITORY

  # A gist.
  GIST

  # An issue.
  ISSUE

  # A project.
  PROJECT

  # A pull request.
  PULL_REQUEST

  # A user.
  USER

  # An organization.
  ORGANIZATION

  # A team.
  TEAM
}

# Represents a 'pinned' event on a given issue or pull request.
type GitHub_PinnedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the issue associated with the event.
  issue: GitHub_Issue!
}

# An ISO-8601 encoded UTC date string with millisecond precison.
scalar GitHub_PreciseDateTime

# Audit log entry for a private_repository_forking.disable event.
type GitHub_PrivateRepositoryForkingDisableAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a private_repository_forking.enable event.
type GitHub_PrivateRepositoryForkingEnableAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# A curatable list of repositories relating to a repository owner, which defaults
# to showing the most popular repositories they own.
type GitHub_ProfileItemShowcase {
  # Whether or not the owner has pinned any repositories or gists.
  hasPinnedItems: Boolean!

  # The repositories and gists in the showcase. If the profile owner has any
  # pinned items, those will be returned. Otherwise, the profile owner's popular
  # repositories will be returned.
  items(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PinnableItemConnection!
}

# Represents any entity on GitHub that has a profile page.
interface GitHub_ProfileOwner {
  # Determine if this repository owner has any items that can be pinned to their profile.
  anyPinnableItems(
    # Filter to only a particular kind of pinnable item.
    type: GitHub_PinnableItemType
  ): Boolean!

  # The public profile email.
  email: String
  id: ID!

  # Showcases a selection of repositories and gists that the profile owner has
  # either curated or that have been selected automatically based on popularity.
  itemShowcase: GitHub_ProfileItemShowcase!

  # The public profile location.
  location: String

  # The username used to login.
  login: String!

  # The public profile name.
  name: String

  # A list of repositories and gists this profile owner can pin to their profile.
  pinnableItems(
    # Filter the types of pinnable items that are returned.
    types: [GitHub_PinnableItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PinnableItemConnection!

  # A list of repositories and gists this profile owner has pinned to their profile
  pinnedItems(
    # Filter the types of pinned items that are returned.
    types: [GitHub_PinnableItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PinnableItemConnection!

  # Returns how many more items this profile owner can pin to their profile.
  pinnedItemsRemaining: Int!

  # Can the viewer pin repositories and gists to the profile?
  viewerCanChangePinnedItems: Boolean!

  # The public profile website URL.
  websiteUrl: GitHub_URI
}

# Projects manage issues, pull requests and notes within a project owner.
type GitHub_Project implements GitHub_Node & GitHub_Closable & GitHub_Updatable {
  # The project's description body.
  body: String

  # The projects description body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # `true` if the object is closed (definition of closed may depend on type)
  closed: Boolean!

  # Identifies the date and time when the object was closed.
  closedAt: GitHub_DateTime

  # List of columns in the project
  columns(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ProjectColumnConnection!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The actor who originally created the project.
  creator: GitHub_Actor

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # The project's name.
  name: String!

  # The project's number.
  number: Int!

  # The project's owner. Currently limited to repositories, organizations, and users.
  owner: GitHub_ProjectOwner!

  # List of pending cards in this project
  pendingCards(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # A list of archived states to filter the cards by
    archivedStates: [GitHub_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHub_ProjectCardConnection!

  # The HTTP path for this project
  resourcePath: GitHub_URI!

  # Whether the project is open or closed.
  state: GitHub_ProjectState!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this project
  url: GitHub_URI!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!
}

# A card in a project.
type GitHub_ProjectCard implements GitHub_Node {
  # The project column this card is associated under. A card may only belong to one
  # project column at a time. The column field will be null if the card is created
  # in a pending state and has yet to be associated with a column. Once cards are
  # associated with a column, they will not become pending in the future.
  #
  column: GitHub_ProjectColumn

  # The card content item
  content: GitHub_ProjectCardItem

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The actor who created this card
  creator: GitHub_Actor

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # Whether the card is archived
  isArchived: Boolean!

  # The card note
  note: String

  # The project that contains this card.
  project: GitHub_Project!

  # The HTTP path for this card
  resourcePath: GitHub_URI!

  # The state of ProjectCard
  state: GitHub_ProjectCardState

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this card
  url: GitHub_URI!
}

# The possible archived states of a project card.
enum GitHub_ProjectCardArchivedState {
  # A project card that is archived
  ARCHIVED

  # A project card that is not archived
  NOT_ARCHIVED
}

# The connection type for ProjectCard.
type GitHub_ProjectCardConnection {
  # A list of edges.
  edges: [GitHub_ProjectCardEdge]

  # A list of nodes.
  nodes: [GitHub_ProjectCard]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_ProjectCardEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_ProjectCard
}

# Types that can be inside Project Cards.
union GitHub_ProjectCardItem = GitHub_Issue | GitHub_PullRequest

# Various content states of a ProjectCard
enum GitHub_ProjectCardState {
  # The card has content only.
  CONTENT_ONLY

  # The card has a note only.
  NOTE_ONLY

  # The card is redacted.
  REDACTED
}

# A column inside a project.
type GitHub_ProjectColumn implements GitHub_Node {
  # List of cards in the column
  cards(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # A list of archived states to filter the cards by
    archivedStates: [GitHub_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHub_ProjectCardConnection!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # The project column's name.
  name: String!

  # The project that contains this column.
  project: GitHub_Project!

  # The semantic purpose of the column
  purpose: GitHub_ProjectColumnPurpose

  # The HTTP path for this project column
  resourcePath: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this project column
  url: GitHub_URI!
}

# The connection type for ProjectColumn.
type GitHub_ProjectColumnConnection {
  # A list of edges.
  edges: [GitHub_ProjectColumnEdge]

  # A list of nodes.
  nodes: [GitHub_ProjectColumn]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_ProjectColumnEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_ProjectColumn
}

# The semantic purpose of the column - todo, in progress, or done.
enum GitHub_ProjectColumnPurpose {
  # The column contains cards still to be worked on
  TODO

  # The column contains cards which are currently being worked on
  IN_PROGRESS

  # The column contains cards which are complete
  DONE
}

# A list of projects associated with the owner.
type GitHub_ProjectConnection {
  # A list of edges.
  edges: [GitHub_ProjectEdge]

  # A list of nodes.
  nodes: [GitHub_Project]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_ProjectEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Project
}

# Ways in which lists of projects can be ordered upon return.
input GitHub_ProjectOrder {
  # The field in which to order projects by.
  field: GitHub_ProjectOrderField!

  # The direction in which to order projects by the specified field.
  direction: GitHub_OrderDirection!
}

# Properties by which project connections can be ordered.
enum GitHub_ProjectOrderField {
  # Order projects by creation time
  CREATED_AT

  # Order projects by update time
  UPDATED_AT

  # Order projects by name
  NAME
}

# Represents an owner of a Project.
interface GitHub_ProjectOwner {
  id: ID!

  # Find project by number.
  project(
    # The project number to find.
    number: Int!
  ): GitHub_Project

  # A list of projects under the owner.
  projects(
    # Ordering options for projects returned from the connection
    orderBy: GitHub_ProjectOrder

    # Query to search projects by, currently only searching by name.
    search: String

    # A list of states to filter the projects by.
    states: [GitHub_ProjectState!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ProjectConnection!

  # The HTTP path listing owners projects
  projectsResourcePath: GitHub_URI!

  # The HTTP URL listing owners projects
  projectsUrl: GitHub_URI!

  # Can the current viewer create new projects on this owner.
  viewerCanCreateProjects: Boolean!
}

# State of the project; either 'open' or 'closed'
enum GitHub_ProjectState {
  # The project is open.
  OPEN

  # The project is closed.
  CLOSED
}

# GitHub-provided templates for Projects
enum GitHub_ProjectTemplate {
  # Create a board with columns for To do, In progress and Done.
  BASIC_KANBAN

  # Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns.
  AUTOMATED_KANBAN_V2

  # Create a board with triggers to automatically move cards across columns with review automation.
  AUTOMATED_REVIEWS_KANBAN

  # Create a board to triage and prioritize bugs with To do, priority, and Done columns.
  BUG_TRIAGE
}

# A user's public key.
type GitHub_PublicKey implements GitHub_Node {
  # The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
  accessedAt: GitHub_DateTime

  # Identifies the date and time when the key was created. Keys created before
  # March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
  createdAt: GitHub_DateTime

  # The fingerprint for this PublicKey.
  fingerprint: String!
  id: ID!

  # Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
  isReadOnly: Boolean

  # The public key string.
  key: String!

  # Identifies the date and time when the key was updated. Keys created before
  # March 5th, 2014 may have inaccurate values. Values will be null for keys not
  # owned by the user.
  updatedAt: GitHub_DateTime
}

# The connection type for PublicKey.
type GitHub_PublicKeyConnection {
  # A list of edges.
  edges: [GitHub_PublicKeyEdge]

  # A list of nodes.
  nodes: [GitHub_PublicKey]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PublicKeyEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PublicKey
}

# A repository pull request.
type GitHub_PullRequest implements GitHub_Node & GitHub_Assignable & GitHub_Closable & GitHub_Comment & GitHub_Updatable & GitHub_UpdatableComment & GitHub_Labelable & GitHub_Lockable & GitHub_Reactable & GitHub_RepositoryNode & GitHub_Subscribable & GitHub_UniformResourceLocatable {
  # Reason that the conversation was locked.
  activeLockReason: GitHub_LockReason

  # The number of additions in this pull request.
  additions: Int!

  # A list of Users assigned to this object.
  assignees(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the subject of the comment.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # Identifies the base Ref associated with the pull request.
  baseRef: GitHub_Ref

  # Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
  baseRefName: String!

  # Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
  baseRefOid: GitHub_GitObjectID!

  # The repository associated with this pull request's base Ref.
  baseRepository: GitHub_Repository

  # The body as Markdown.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body rendered to text.
  bodyText: String!

  # The number of changed files in this pull request.
  changedFiles: Int!

  # The HTTP path for the checks of this pull request.
  checksResourcePath: GitHub_URI!

  # The HTTP URL for the checks of this pull request.
  checksUrl: GitHub_URI!

  # `true` if the pull request is closed
  closed: Boolean!

  # Identifies the date and time when the object was closed.
  closedAt: GitHub_DateTime

  # A list of comments associated with the pull request.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueCommentConnection!

  # A list of commits present in this pull request's head branch not present in the base branch.
  commits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestCommitConnection!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The number of deletions in this pull request.
  deletions: Int!

  # The actor who edited this pull request's body.
  editor: GitHub_Actor

  # Lists the files changed within this pull request.
  files(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestChangedFileConnection

  # Identifies the head Ref associated with the pull request.
  headRef: GitHub_Ref

  # Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
  headRefName: String!

  # Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
  headRefOid: GitHub_GitObjectID!

  # The repository associated with this pull request's head Ref.
  headRepository: GitHub_Repository

  # The owner of the repository associated with this pull request's head Ref.
  headRepositoryOwner: GitHub_RepositoryOwner

  # The hovercard information for this issue
  hovercard(
    # Whether or not to include notification contexts
    includeNotificationContexts: Boolean = true
  ): GitHub_Hovercard!
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # The head and base repositories are different.
  isCrossRepository: Boolean!

  # Identifies if the pull request is a draft.
  isDraft: Boolean!

  # A list of labels associated with the object.
  labels(
    # Ordering options for labels returned from the connection.
    orderBy: GitHub_LabelOrder = {field: CREATED_AT, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_LabelConnection

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # `true` if the pull request is locked
  locked: Boolean!

  # Indicates whether maintainers can modify the pull request.
  maintainerCanModify: Boolean!

  # The commit that was created when this pull request was merged.
  mergeCommit: GitHub_Commit

  # Whether or not the pull request can be merged based on the existence of merge conflicts.
  mergeable: GitHub_MergeableState!

  # Whether or not the pull request was merged.
  merged: Boolean!

  # The date and time that the pull request was merged.
  mergedAt: GitHub_DateTime

  # The actor who merged the pull request.
  mergedBy: GitHub_Actor

  # Identifies the milestone associated with the pull request.
  milestone: GitHub_Milestone

  # Identifies the pull request number.
  number: Int!

  # A list of Users that are participating in the Pull Request conversation.
  participants(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # The permalink to the pull request.
  permalink: GitHub_URI!

  # The commit that GitHub automatically generated to test if this pull request
  # could be merged. This field will not return a value if the pull request is
  # merged, or if the test merge commit is still being generated. See the
  # `mergeable` field for more details on the mergeability of the pull request.
  potentialMergeCommit: GitHub_Commit

  # List of project cards associated with this pull request.
  projectCards(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # A list of archived states to filter the cards by
    archivedStates: [GitHub_ProjectCardArchivedState] = [ARCHIVED, NOT_ARCHIVED]
  ): GitHub_ProjectCardConnection!

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The repository associated with this node.
  repository: GitHub_Repository!

  # The HTTP path for this pull request.
  resourcePath: GitHub_URI!

  # The HTTP path for reverting this pull request.
  revertResourcePath: GitHub_URI!

  # The HTTP URL for reverting this pull request.
  revertUrl: GitHub_URI!

  # The current status of this pull request with respect to code review.
  reviewDecision: GitHub_PullRequestReviewDecision

  # A list of review requests associated with the pull request.
  reviewRequests(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ReviewRequestConnection

  # The list of all review threads for this pull request.
  reviewThreads(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestReviewThreadConnection!

  # A list of reviews associated with the pull request.
  reviews(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # A list of states to filter the reviews.
    states: [GitHub_PullRequestReviewState!]

    # Filter by author of the review.
    author: String
  ): GitHub_PullRequestReviewConnection

  # Identifies the state of the pull request.
  state: GitHub_PullRequestState!

  # A list of reviewer suggestions based on commit history and past review comments.
  suggestedReviewers: [GitHub_SuggestedReviewer]!

  # A list of events, comments, commits, etc. associated with the pull request.
  timeline(
    # Allows filtering timeline events by a `since` timestamp.
    since: GitHub_DateTime

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestTimelineConnection! @deprecated(reason: "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.")

  # A list of events, comments, commits, etc. associated with the pull request.
  timelineItems(
    # Filter timeline items by a `since` timestamp.
    since: GitHub_DateTime

    # Skips the first _n_ elements in the list.
    skip: Int

    # Filter timeline items by type.
    itemTypes: [GitHub_PullRequestTimelineItemsItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestTimelineItemsConnection!

  # Identifies the pull request title.
  title: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this pull request.
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Whether or not the viewer can apply suggestion.
  viewerCanApplySuggestion: Boolean!

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the viewer is able to change their subscription status for the repository.
  viewerCanSubscribe: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!

  # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  viewerSubscription: GitHub_SubscriptionState
}

# A file changed in a pull request.
type GitHub_PullRequestChangedFile {
  # The number of additions to the file.
  additions: Int!

  # The number of deletions to the file.
  deletions: Int!

  # The path of the file.
  path: String!
}

# The connection type for PullRequestChangedFile.
type GitHub_PullRequestChangedFileConnection {
  # A list of edges.
  edges: [GitHub_PullRequestChangedFileEdge]

  # A list of nodes.
  nodes: [GitHub_PullRequestChangedFile]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PullRequestChangedFileEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequestChangedFile
}

# Represents a Git commit part of a pull request.
type GitHub_PullRequestCommit implements GitHub_Node & GitHub_UniformResourceLocatable {
  # The Git commit object
  commit: GitHub_Commit!
  id: ID!

  # The pull request this commit belongs to
  pullRequest: GitHub_PullRequest!

  # The HTTP path for this pull request commit
  resourcePath: GitHub_URI!

  # The HTTP URL for this pull request commit
  url: GitHub_URI!
}

# Represents a commit comment thread part of a pull request.
type GitHub_PullRequestCommitCommentThread implements GitHub_Node & GitHub_RepositoryNode {
  # The comments that exist in this thread.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_CommitCommentConnection!

  # The commit the comments were made on.
  commit: GitHub_Commit!
  id: ID!

  # The file the comments were made on.
  path: String

  # The position in the diff for the commit that the comment was made on.
  position: Int

  # The pull request this commit comment thread belongs to
  pullRequest: GitHub_PullRequest!

  # The repository associated with this node.
  repository: GitHub_Repository!
}

# The connection type for PullRequestCommit.
type GitHub_PullRequestCommitConnection {
  # A list of edges.
  edges: [GitHub_PullRequestCommitEdge]

  # A list of nodes.
  nodes: [GitHub_PullRequestCommit]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PullRequestCommitEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequestCommit
}

# The connection type for PullRequest.
type GitHub_PullRequestConnection {
  # A list of edges.
  edges: [GitHub_PullRequestEdge]

  # A list of nodes.
  nodes: [GitHub_PullRequest]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# This aggregates pull requests opened by a user within one repository.
type GitHub_PullRequestContributionsByRepository {
  # The pull request contributions.
  contributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for contributions returned from the connection.
    orderBy: GitHub_ContributionOrder = {direction: DESC}
  ): GitHub_CreatedPullRequestContributionConnection!

  # The repository in which the pull requests were opened.
  repository: GitHub_Repository!
}

# An edge in a connection.
type GitHub_PullRequestEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequest
}

# Represents available types of methods to use when merging a pull request.
enum GitHub_PullRequestMergeMethod {
  # Add all commits from the head branch to the base branch with a merge commit.
  MERGE

  # Combine all commits from the head branch into a single commit in the base branch.
  SQUASH

  # Add all commits from the head branch onto the base branch individually.
  REBASE
}

# Ways in which lists of issues can be ordered upon return.
input GitHub_PullRequestOrder {
  # The field in which to order pull requests by.
  field: GitHub_PullRequestOrderField!

  # The direction in which to order pull requests by the specified field.
  direction: GitHub_OrderDirection!
}

# Properties by which pull_requests connections can be ordered.
enum GitHub_PullRequestOrderField {
  # Order pull_requests by creation time
  CREATED_AT

  # Order pull_requests by update time
  UPDATED_AT
}

# A review object for a given pull request.
type GitHub_PullRequestReview implements GitHub_Node & GitHub_Comment & GitHub_Deletable & GitHub_Updatable & GitHub_UpdatableComment & GitHub_Reactable & GitHub_RepositoryNode {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the subject of the comment.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # Identifies the pull request review body.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body of this review rendered as plain text.
  bodyText: String!

  # A list of review comments for the current pull request review.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestReviewCommentConnection!

  # Identifies the commit associated with this pull request review.
  commit: GitHub_Commit

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The actor who edited the comment.
  editor: GitHub_Actor
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # A list of teams that this review was made on behalf of.
  onBehalfOf(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_TeamConnection!

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # Identifies the pull request associated with this pull request review.
  pullRequest: GitHub_PullRequest!

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The repository associated with this node.
  repository: GitHub_Repository!

  # The HTTP path permalink for this PullRequestReview.
  resourcePath: GitHub_URI!

  # Identifies the current state of the pull request review.
  state: GitHub_PullRequestReviewState!

  # Identifies when the Pull Request Review was submitted
  submittedAt: GitHub_DateTime

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL permalink for this PullRequestReview.
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# A review comment associated with a given repository pull request.
type GitHub_PullRequestReviewComment implements GitHub_Node & GitHub_Comment & GitHub_Deletable & GitHub_Minimizable & GitHub_Updatable & GitHub_UpdatableComment & GitHub_Reactable & GitHub_RepositoryNode {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the subject of the comment.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # The comment body of this review comment.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The comment body of this review comment rendered as plain text.
  bodyText: String!

  # Identifies the commit associated with the comment.
  commit: GitHub_Commit

  # Identifies when the comment was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The diff hunk to which the comment applies.
  diffHunk: String!

  # Identifies when the comment was created in a draft state.
  draftedAt: GitHub_DateTime!

  # The actor who edited the comment.
  editor: GitHub_Actor
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # Returns whether or not a comment has been minimized.
  isMinimized: Boolean!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # Returns why the comment was minimized.
  minimizedReason: String

  # Identifies the original commit associated with the comment.
  originalCommit: GitHub_Commit

  # The original line index in the diff to which the comment applies.
  originalPosition: Int!

  # Identifies when the comment body is outdated
  outdated: Boolean!

  # The path to which the comment applies.
  path: String!

  # The line index in the diff to which the comment applies.
  position: Int

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # The pull request associated with this review comment.
  pullRequest: GitHub_PullRequest!

  # The pull request review associated with this review comment.
  pullRequestReview: GitHub_PullRequestReview

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The comment this is a reply to.
  replyTo: GitHub_PullRequestReviewComment

  # The repository associated with this node.
  repository: GitHub_Repository!

  # The HTTP path permalink for this review comment.
  resourcePath: GitHub_URI!

  # Identifies the state of the comment.
  state: GitHub_PullRequestReviewCommentState!

  # Identifies when the comment was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL permalink for this review comment.
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!

  # Check if the current viewer can minimize this object.
  viewerCanMinimize: Boolean!

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# The connection type for PullRequestReviewComment.
type GitHub_PullRequestReviewCommentConnection {
  # A list of edges.
  edges: [GitHub_PullRequestReviewCommentEdge]

  # A list of nodes.
  nodes: [GitHub_PullRequestReviewComment]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PullRequestReviewCommentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequestReviewComment
}

# The possible states of a pull request review comment.
enum GitHub_PullRequestReviewCommentState {
  # A comment that is part of a pending review
  PENDING

  # A comment that is part of a submitted review
  SUBMITTED
}

# The connection type for PullRequestReview.
type GitHub_PullRequestReviewConnection {
  # A list of edges.
  edges: [GitHub_PullRequestReviewEdge]

  # A list of nodes.
  nodes: [GitHub_PullRequestReview]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# This aggregates pull request reviews made by a user within one repository.
type GitHub_PullRequestReviewContributionsByRepository {
  # The pull request review contributions.
  contributions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for contributions returned from the connection.
    orderBy: GitHub_ContributionOrder = {direction: DESC}
  ): GitHub_CreatedPullRequestReviewContributionConnection!

  # The repository in which the pull request reviews were made.
  repository: GitHub_Repository!
}

# The review status of a pull request.
enum GitHub_PullRequestReviewDecision {
  # Changes have been requested on the pull request.
  CHANGES_REQUESTED

  # The pull request has received an approving review.
  APPROVED

  # A review is required before the pull request can be merged.
  REVIEW_REQUIRED
}

# An edge in a connection.
type GitHub_PullRequestReviewEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequestReview
}

# The possible events to perform on a pull request review.
enum GitHub_PullRequestReviewEvent {
  # Submit general feedback without explicit approval.
  COMMENT

  # Submit feedback and approve merging these changes.
  APPROVE

  # Submit feedback that must be addressed before merging.
  REQUEST_CHANGES

  # Dismiss review so it now longer effects merging.
  DISMISS
}

# The possible states of a pull request review.
enum GitHub_PullRequestReviewState {
  # A review that has not yet been submitted.
  PENDING

  # An informational review.
  COMMENTED

  # A review allowing the pull request to merge.
  APPROVED

  # A review blocking the pull request from merging.
  CHANGES_REQUESTED

  # A review that has been dismissed.
  DISMISSED
}

# A threaded list of comments for a given pull request.
type GitHub_PullRequestReviewThread implements GitHub_Node {
  # A list of pull request comments associated with the thread.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Skips the first _n_ elements in the list.
    skip: Int
  ): GitHub_PullRequestReviewCommentConnection!

  # The side of the diff on which this thread was placed.
  diffSide: GitHub_DiffSide!
  id: ID!

  # Whether this thread has been resolved
  isResolved: Boolean!

  # The line in the file to which this thread refers
  line: Int

  # The original line in the file to which this thread refers.
  originalLine: Int

  # The original start line in the file to which this thread refers (multi-line only).
  originalStartLine: Int

  # Identifies the pull request associated with this thread.
  pullRequest: GitHub_PullRequest!

  # Identifies the repository associated with this thread.
  repository: GitHub_Repository!

  # The user who resolved this thread
  resolvedBy: GitHub_User

  # The side of the diff that the first line of the thread starts on (multi-line only)
  startDiffSide: GitHub_DiffSide

  # The start line in the file to which this thread refers (multi-line only)
  startLine: Int

  # Whether or not the viewer can resolve this thread
  viewerCanResolve: Boolean!

  # Whether or not the viewer can unresolve this thread
  viewerCanUnresolve: Boolean!
}

# Review comment threads for a pull request review.
type GitHub_PullRequestReviewThreadConnection {
  # A list of edges.
  edges: [GitHub_PullRequestReviewThreadEdge]

  # A list of nodes.
  nodes: [GitHub_PullRequestReviewThread]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PullRequestReviewThreadEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequestReviewThread
}

# Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
type GitHub_PullRequestRevisionMarker {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The last commit the viewer has seen.
  lastSeenCommit: GitHub_Commit!

  # The pull request to which the marker belongs.
  pullRequest: GitHub_PullRequest!
}

# The possible states of a pull request.
enum GitHub_PullRequestState {
  # A pull request that is still open.
  OPEN

  # A pull request that has been closed without being merged.
  CLOSED

  # A pull request that has been closed by being merged.
  MERGED
}

# The connection type for PullRequestTimelineItem.
type GitHub_PullRequestTimelineConnection {
  # A list of edges.
  edges: [GitHub_PullRequestTimelineItemEdge]

  # A list of nodes.
  nodes: [GitHub_PullRequestTimelineItem]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An item in an pull request timeline
union GitHub_PullRequestTimelineItem = GitHub_AssignedEvent | GitHub_BaseRefForcePushedEvent | GitHub_ClosedEvent | GitHub_Commit | GitHub_CommitCommentThread | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_DeployedEvent | GitHub_DeploymentEnvironmentChangedEvent | GitHub_HeadRefDeletedEvent | GitHub_HeadRefForcePushedEvent | GitHub_HeadRefRestoredEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MergedEvent | GitHub_MilestonedEvent | GitHub_PullRequestReview | GitHub_PullRequestReviewComment | GitHub_PullRequestReviewThread | GitHub_ReferencedEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_ReviewDismissedEvent | GitHub_ReviewRequestRemovedEvent | GitHub_ReviewRequestedEvent | GitHub_SubscribedEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

# An edge in a connection.
type GitHub_PullRequestTimelineItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequestTimelineItem
}

# An item in a pull request timeline
union GitHub_PullRequestTimelineItems = GitHub_AddedToProjectEvent | GitHub_AssignedEvent | GitHub_AutomaticBaseChangeFailedEvent | GitHub_AutomaticBaseChangeSucceededEvent | GitHub_BaseRefChangedEvent | GitHub_BaseRefForcePushedEvent | GitHub_ClosedEvent | GitHub_CommentDeletedEvent | GitHub_ConnectedEvent | GitHub_ConvertToDraftEvent | GitHub_ConvertedNoteToIssueEvent | GitHub_CrossReferencedEvent | GitHub_DemilestonedEvent | GitHub_DeployedEvent | GitHub_DeploymentEnvironmentChangedEvent | GitHub_DisconnectedEvent | GitHub_HeadRefDeletedEvent | GitHub_HeadRefForcePushedEvent | GitHub_HeadRefRestoredEvent | GitHub_IssueComment | GitHub_LabeledEvent | GitHub_LockedEvent | GitHub_MarkedAsDuplicateEvent | GitHub_MentionedEvent | GitHub_MergedEvent | GitHub_MilestonedEvent | GitHub_MovedColumnsInProjectEvent | GitHub_PinnedEvent | GitHub_PullRequestCommit | GitHub_PullRequestCommitCommentThread | GitHub_PullRequestReview | GitHub_PullRequestReviewThread | GitHub_PullRequestRevisionMarker | GitHub_ReadyForReviewEvent | GitHub_ReferencedEvent | GitHub_RemovedFromProjectEvent | GitHub_RenamedTitleEvent | GitHub_ReopenedEvent | GitHub_ReviewDismissedEvent | GitHub_ReviewRequestRemovedEvent | GitHub_ReviewRequestedEvent | GitHub_SubscribedEvent | GitHub_TransferredEvent | GitHub_UnassignedEvent | GitHub_UnlabeledEvent | GitHub_UnlockedEvent | GitHub_UnmarkedAsDuplicateEvent | GitHub_UnpinnedEvent | GitHub_UnsubscribedEvent | GitHub_UserBlockedEvent

# The connection type for PullRequestTimelineItems.
type GitHub_PullRequestTimelineItemsConnection {
  # A list of edges.
  edges: [GitHub_PullRequestTimelineItemsEdge]

  # Identifies the count of items after applying `before` and `after` filters.
  filteredCount: Int!

  # A list of nodes.
  nodes: [GitHub_PullRequestTimelineItems]

  # Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
  pageCount: Int!

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!

  # Identifies the date and time when the timeline was last updated.
  updatedAt: GitHub_DateTime!
}

# An edge in a connection.
type GitHub_PullRequestTimelineItemsEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PullRequestTimelineItems
}

# The possible item types found in a timeline.
enum GitHub_PullRequestTimelineItemsItemType {
  # Represents a Git commit part of a pull request.
  PULL_REQUEST_COMMIT

  # Represents a commit comment thread part of a pull request.
  PULL_REQUEST_COMMIT_COMMENT_THREAD

  # A review object for a given pull request.
  PULL_REQUEST_REVIEW

  # A threaded list of comments for a given pull request.
  PULL_REQUEST_REVIEW_THREAD

  # Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits.
  PULL_REQUEST_REVISION_MARKER

  # Represents a 'automatic_base_change_failed' event on a given pull request.
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT

  # Represents a 'automatic_base_change_succeeded' event on a given pull request.
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT

  # Represents a 'base_ref_changed' event on a given issue or pull request.
  BASE_REF_CHANGED_EVENT

  # Represents a 'base_ref_force_pushed' event on a given pull request.
  BASE_REF_FORCE_PUSHED_EVENT

  # Represents a 'deployed' event on a given pull request.
  DEPLOYED_EVENT

  # Represents a 'deployment_environment_changed' event on a given pull request.
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT

  # Represents a 'head_ref_deleted' event on a given pull request.
  HEAD_REF_DELETED_EVENT

  # Represents a 'head_ref_force_pushed' event on a given pull request.
  HEAD_REF_FORCE_PUSHED_EVENT

  # Represents a 'head_ref_restored' event on a given pull request.
  HEAD_REF_RESTORED_EVENT

  # Represents a 'merged' event on a given pull request.
  MERGED_EVENT

  # Represents a 'review_dismissed' event on a given issue or pull request.
  REVIEW_DISMISSED_EVENT

  # Represents an 'review_requested' event on a given pull request.
  REVIEW_REQUESTED_EVENT

  # Represents an 'review_request_removed' event on a given pull request.
  REVIEW_REQUEST_REMOVED_EVENT

  # Represents a 'ready_for_review' event on a given pull request.
  READY_FOR_REVIEW_EVENT

  # Represents a 'convert_to_draft' event on a given pull request.
  CONVERT_TO_DRAFT_EVENT

  # Represents a comment on an Issue.
  ISSUE_COMMENT

  # Represents a mention made by one issue or pull request to another.
  CROSS_REFERENCED_EVENT

  # Represents a 'added_to_project' event on a given issue or pull request.
  ADDED_TO_PROJECT_EVENT

  # Represents an 'assigned' event on any assignable object.
  ASSIGNED_EVENT

  # Represents a 'closed' event on any `Closable`.
  CLOSED_EVENT

  # Represents a 'comment_deleted' event on a given issue or pull request.
  COMMENT_DELETED_EVENT

  # Represents a 'connected' event on a given issue or pull request.
  CONNECTED_EVENT

  # Represents a 'converted_note_to_issue' event on a given issue or pull request.
  CONVERTED_NOTE_TO_ISSUE_EVENT

  # Represents a 'demilestoned' event on a given issue or pull request.
  DEMILESTONED_EVENT

  # Represents a 'disconnected' event on a given issue or pull request.
  DISCONNECTED_EVENT

  # Represents a 'labeled' event on a given issue or pull request.
  LABELED_EVENT

  # Represents a 'locked' event on a given issue or pull request.
  LOCKED_EVENT

  # Represents a 'marked_as_duplicate' event on a given issue or pull request.
  MARKED_AS_DUPLICATE_EVENT

  # Represents a 'mentioned' event on a given issue or pull request.
  MENTIONED_EVENT

  # Represents a 'milestoned' event on a given issue or pull request.
  MILESTONED_EVENT

  # Represents a 'moved_columns_in_project' event on a given issue or pull request.
  MOVED_COLUMNS_IN_PROJECT_EVENT

  # Represents a 'pinned' event on a given issue or pull request.
  PINNED_EVENT

  # Represents a 'referenced' event on a given `ReferencedSubject`.
  REFERENCED_EVENT

  # Represents a 'removed_from_project' event on a given issue or pull request.
  REMOVED_FROM_PROJECT_EVENT

  # Represents a 'renamed' event on a given issue or pull request
  RENAMED_TITLE_EVENT

  # Represents a 'reopened' event on any `Closable`.
  REOPENED_EVENT

  # Represents a 'subscribed' event on a given `Subscribable`.
  SUBSCRIBED_EVENT

  # Represents a 'transferred' event on a given issue or pull request.
  TRANSFERRED_EVENT

  # Represents an 'unassigned' event on any assignable object.
  UNASSIGNED_EVENT

  # Represents an 'unlabeled' event on a given issue or pull request.
  UNLABELED_EVENT

  # Represents an 'unlocked' event on a given issue or pull request.
  UNLOCKED_EVENT

  # Represents a 'user_blocked' event on a given user.
  USER_BLOCKED_EVENT

  # Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
  UNMARKED_AS_DUPLICATE_EVENT

  # Represents an 'unpinned' event on a given issue or pull request.
  UNPINNED_EVENT

  # Represents an 'unsubscribed' event on a given `Subscribable`.
  UNSUBSCRIBED_EVENT
}

# The possible target states when updating a pull request.
enum GitHub_PullRequestUpdateState {
  # A pull request that is still open.
  OPEN

  # A pull request that has been closed without being merged.
  CLOSED
}

# A team, user or app who has the ability to push to a protected branch.
type GitHub_PushAllowance implements GitHub_Node {
  # The actor that can push.
  actor: GitHub_PushAllowanceActor

  # Identifies the branch protection rule associated with the allowed user or team.
  branchProtectionRule: GitHub_BranchProtectionRule
  id: ID!
}

# Types that can be an actor.
union GitHub_PushAllowanceActor = GitHub_App | GitHub_Team | GitHub_User

# The connection type for PushAllowance.
type GitHub_PushAllowanceConnection {
  # A list of edges.
  edges: [GitHub_PushAllowanceEdge]

  # A list of nodes.
  nodes: [GitHub_PushAllowance]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_PushAllowanceEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_PushAllowance
}

# Represents the client's rate limit.
type GitHub_RateLimit {
  # The point cost for the current query counting against the rate limit.
  cost: Int!

  # The maximum number of points the client is permitted to consume in a 60 minute window.
  limit: Int!

  # The maximum number of nodes this query may return
  nodeCount: Int!

  # The number of points remaining in the current rate limit window.
  remaining: Int!

  # The time at which the current rate limit window resets in UTC epoch seconds.
  resetAt: GitHub_DateTime!
}

# Represents a subject that can be reacted on.
interface GitHub_Reactable {
  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # Can user react to this subject
  viewerCanReact: Boolean!
}

# The connection type for User.
type GitHub_ReactingUserConnection {
  # A list of edges.
  edges: [GitHub_ReactingUserEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a user that's made a reaction.
type GitHub_ReactingUserEdge {
  # A cursor for use in pagination.
  cursor: String!
  node: GitHub_User!

  # The moment when the user made the reaction.
  reactedAt: GitHub_DateTime!
}

# An emoji reaction to a particular piece of content.
type GitHub_Reaction implements GitHub_Node {
  # Identifies the emoji reaction.
  content: GitHub_ReactionContent!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # The reactable piece of content
  reactable: GitHub_Reactable!

  # Identifies the user who created this reaction.
  user: GitHub_User
}

# A list of reactions that have been left on the subject.
type GitHub_ReactionConnection {
  # A list of edges.
  edges: [GitHub_ReactionEdge]

  # A list of nodes.
  nodes: [GitHub_Reaction]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!

  # Whether or not the authenticated user has left a reaction on the subject.
  viewerHasReacted: Boolean!
}

# Emojis that can be attached to Issues, Pull Requests and Comments.
enum GitHub_ReactionContent {
  # Represents the `:+1:` emoji.
  THUMBS_UP

  # Represents the `:-1:` emoji.
  THUMBS_DOWN

  # Represents the `:laugh:` emoji.
  LAUGH

  # Represents the `:hooray:` emoji.
  HOORAY

  # Represents the `:confused:` emoji.
  CONFUSED

  # Represents the `:heart:` emoji.
  HEART

  # Represents the `:rocket:` emoji.
  ROCKET

  # Represents the `:eyes:` emoji.
  EYES
}

# An edge in a connection.
type GitHub_ReactionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Reaction
}

# A group of emoji reactions to a particular piece of content.
type GitHub_ReactionGroup {
  # Identifies the emoji reaction.
  content: GitHub_ReactionContent!

  # Identifies when the reaction was created.
  createdAt: GitHub_DateTime

  # The subject that was reacted to.
  subject: GitHub_Reactable!

  # Users who have reacted to the reaction subject with the emotion represented by this reaction group
  users(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ReactingUserConnection!

  # Whether or not the authenticated user has left a reaction on the subject.
  viewerHasReacted: Boolean!
}

# Ways in which lists of reactions can be ordered upon return.
input GitHub_ReactionOrder {
  # The field in which to order reactions by.
  field: GitHub_ReactionOrderField!

  # The direction in which to order reactions by the specified field.
  direction: GitHub_OrderDirection!
}

# A list of fields that reactions can be ordered by.
enum GitHub_ReactionOrderField {
  # Allows ordering a list of reactions by when they were created.
  CREATED_AT
}

# Represents a 'ready_for_review' event on a given pull request.
type GitHub_ReadyForReviewEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # The HTTP path for this ready for review event.
  resourcePath: GitHub_URI!

  # The HTTP URL for this ready for review event.
  url: GitHub_URI!
}

# Represents a Git reference.
type GitHub_Ref implements GitHub_Node {
  # A list of pull requests with this ref as the head ref.
  associatedPullRequests(
    # A list of states to filter the pull requests by.
    states: [GitHub_PullRequestState!]

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # The head ref name to filter the pull requests by.
    headRefName: String

    # The base ref name to filter the pull requests by.
    baseRefName: String

    # Ordering options for pull requests returned from the connection.
    orderBy: GitHub_IssueOrder

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestConnection!
  id: ID!

  # The ref name.
  name: String!

  # The ref's prefix, such as `refs/heads/` or `refs/tags/`.
  prefix: String!

  # The repository the ref belongs to.
  repository: GitHub_Repository!

  # The object the ref points to.
  #
  # **Upcoming Change on 2019-07-01 UTC**
  # **Description:** Type for `target` will change from `GitObject!` to `GitObject`.
  # **Reason:** The `target` field may return `null` values and is changing to nullable
  #
  target: GitHub_GitObject!
}

# The connection type for Ref.
type GitHub_RefConnection {
  # A list of edges.
  edges: [GitHub_RefEdge]

  # A list of nodes.
  nodes: [GitHub_Ref]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_RefEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Ref
}

# Represents a 'referenced' event on a given `ReferencedSubject`.
type GitHub_ReferencedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the commit associated with the 'referenced' event.
  commit: GitHub_Commit

  # Identifies the repository associated with the 'referenced' event.
  commitRepository: GitHub_Repository!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Reference originated in a different repository.
  isCrossRepository: Boolean!

  # Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
  isDirectReference: Boolean!

  # Object referenced by event.
  subject: GitHub_ReferencedSubject!
}

# Any referencable object
union GitHub_ReferencedSubject = GitHub_Issue | GitHub_PullRequest

# Ways in which lists of git refs can be ordered upon return.
input GitHub_RefOrder {
  # The field in which to order refs by.
  field: GitHub_RefOrderField!

  # The direction in which to order refs by the specified field.
  direction: GitHub_OrderDirection!
}

# Properties by which ref connections can be ordered.
enum GitHub_RefOrderField {
  # Order refs by underlying commit date if the ref prefix is refs/tags/
  TAG_COMMIT_DATE

  # Order refs by their alphanumeric name
  ALPHABETICAL
}

# Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes
input GitHub_RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  # The ID of the enterprise on which to set an identity provider.
  enterpriseId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes
type GitHub_RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The identity provider for the enterprise.
  identityProvider: GitHub_EnterpriseIdentityProvider
}

# A release contains the content for a release.
type GitHub_Release implements GitHub_Node & GitHub_UniformResourceLocatable {
  # The author of the release
  author: GitHub_User

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The description of the release.
  description: String

  # The description of this release rendered to HTML.
  descriptionHTML: GitHub_HTML
  id: ID!

  # Whether or not the release is a draft
  isDraft: Boolean!

  # Whether or not the release is a prerelease
  isPrerelease: Boolean!

  # The title of the release.
  name: String

  # Identifies the date and time when the release was created.
  publishedAt: GitHub_DateTime

  # List of releases assets which are dependent on this release.
  releaseAssets(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # A list of names to filter the assets by.
    name: String
  ): GitHub_ReleaseAssetConnection!

  # The HTTP path for this issue
  resourcePath: GitHub_URI!

  # A description of the release, rendered to HTML without any links in it.
  shortDescriptionHTML(
    # How many characters to return.
    limit: Int = 200
  ): GitHub_HTML

  # The Git tag the release points to
  tag: GitHub_Ref

  # The name of the release's Git tag
  tagName: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this issue
  url: GitHub_URI!
}

# A release asset contains the content for a release asset.
type GitHub_ReleaseAsset implements GitHub_Node {
  # The asset's content-type
  contentType: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The number of times this asset was downloaded
  downloadCount: Int!

  # Identifies the URL where you can download the release asset via the browser.
  downloadUrl: GitHub_URI!
  id: ID!

  # Identifies the title of the release asset.
  name: String!

  # Release that the asset is associated with
  release: GitHub_Release

  # The size (in bytes) of the asset
  size: Int!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The user that performed the upload
  uploadedBy: GitHub_User!

  # Identifies the URL of the release asset.
  url: GitHub_URI!
}

# The connection type for ReleaseAsset.
type GitHub_ReleaseAssetConnection {
  # A list of edges.
  edges: [GitHub_ReleaseAssetEdge]

  # A list of nodes.
  nodes: [GitHub_ReleaseAsset]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_ReleaseAssetEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_ReleaseAsset
}

# The connection type for Release.
type GitHub_ReleaseConnection {
  # A list of edges.
  edges: [GitHub_ReleaseEdge]

  # A list of nodes.
  nodes: [GitHub_Release]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_ReleaseEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Release
}

# Ways in which lists of releases can be ordered upon return.
input GitHub_ReleaseOrder {
  # The field in which to order releases by.
  field: GitHub_ReleaseOrderField!

  # The direction in which to order releases by the specified field.
  direction: GitHub_OrderDirection!
}

# Properties by which release connections can be ordered.
enum GitHub_ReleaseOrderField {
  # Order releases by creation time
  CREATED_AT

  # Order releases alphabetically by name
  NAME
}

# Autogenerated input type of RemoveAssigneesFromAssignable
input GitHub_RemoveAssigneesFromAssignableInput {
  # The id of the assignable object to remove assignees from.
  assignableId: ID!

  # The id of users to remove as assignees.
  assigneeIds: [ID!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveAssigneesFromAssignable
type GitHub_RemoveAssigneesFromAssignablePayload {
  # The item that was unassigned.
  assignable: GitHub_Assignable

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Represents a 'removed_from_project' event on a given issue or pull request.
type GitHub_RemovedFromProjectEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!
}

# Autogenerated input type of RemoveEnterpriseAdmin
input GitHub_RemoveEnterpriseAdminInput {
  # The Enterprise ID from which to remove the administrator.
  enterpriseId: ID!

  # The login of the user to remove as an administrator.
  login: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveEnterpriseAdmin
type GitHub_RemoveEnterpriseAdminPayload {
  # The user who was removed as an administrator.
  admin: GitHub_User

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated enterprise.
  enterprise: GitHub_Enterprise

  # A message confirming the result of removing an administrator.
  message: String

  # The viewer performing the mutation.
  viewer: GitHub_User
}

# Autogenerated input type of RemoveEnterpriseIdentityProvider
input GitHub_RemoveEnterpriseIdentityProviderInput {
  # The ID of the enterprise from which to remove the identity provider.
  enterpriseId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveEnterpriseIdentityProvider
type GitHub_RemoveEnterpriseIdentityProviderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The identity provider that was removed from the enterprise.
  identityProvider: GitHub_EnterpriseIdentityProvider
}

# Autogenerated input type of RemoveEnterpriseOrganization
input GitHub_RemoveEnterpriseOrganizationInput {
  # The ID of the enterprise from which the organization should be removed.
  enterpriseId: ID!

  # The ID of the organization to remove from the enterprise.
  organizationId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveEnterpriseOrganization
type GitHub_RemoveEnterpriseOrganizationPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated enterprise.
  enterprise: GitHub_Enterprise

  # The organization that was removed from the enterprise.
  organization: GitHub_Organization

  # The viewer performing the mutation.
  viewer: GitHub_User
}

# Autogenerated input type of RemoveLabelsFromLabelable
input GitHub_RemoveLabelsFromLabelableInput {
  # The id of the Labelable to remove labels from.
  labelableId: ID!

  # The ids of labels to remove.
  labelIds: [ID!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveLabelsFromLabelable
type GitHub_RemoveLabelsFromLabelablePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The Labelable the labels were removed from.
  labelable: GitHub_Labelable
}

# Autogenerated input type of RemoveOutsideCollaborator
input GitHub_RemoveOutsideCollaboratorInput {
  # The ID of the outside collaborator to remove.
  userId: ID!

  # The ID of the organization to remove the outside collaborator from.
  organizationId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveOutsideCollaborator
type GitHub_RemoveOutsideCollaboratorPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The user that was removed as an outside collaborator.
  removedUser: GitHub_User
}

# Autogenerated input type of RemoveReaction
input GitHub_RemoveReactionInput {
  # The Node ID of the subject to modify.
  subjectId: ID!

  # The name of the emoji reaction to remove.
  content: GitHub_ReactionContent!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveReaction
type GitHub_RemoveReactionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The reaction object.
  reaction: GitHub_Reaction

  # The reactable subject.
  subject: GitHub_Reactable
}

# Autogenerated input type of RemoveStar
input GitHub_RemoveStarInput {
  # The Starrable ID to unstar.
  starrableId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RemoveStar
type GitHub_RemoveStarPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The starrable.
  starrable: GitHub_Starrable
}

# Represents a 'renamed' event on a given issue or pull request
type GitHub_RenamedTitleEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the current title of the issue or pull request.
  currentTitle: String!
  id: ID!

  # Identifies the previous title of the issue or pull request.
  previousTitle: String!

  # Subject that was renamed.
  subject: GitHub_RenamedTitleSubject!
}

# An object which has a renamable title
union GitHub_RenamedTitleSubject = GitHub_Issue | GitHub_PullRequest

# Represents a 'reopened' event on any `Closable`.
type GitHub_ReopenedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Object that was reopened.
  closable: GitHub_Closable!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!
}

# Autogenerated input type of ReopenIssue
input GitHub_ReopenIssueInput {
  # ID of the issue to be opened.
  issueId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ReopenIssue
type GitHub_ReopenIssuePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The issue that was opened.
  issue: GitHub_Issue
}

# Autogenerated input type of ReopenPullRequest
input GitHub_ReopenPullRequestInput {
  # ID of the pull request to be reopened.
  pullRequestId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ReopenPullRequest
type GitHub_ReopenPullRequestPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The pull request that was reopened.
  pullRequest: GitHub_PullRequest
}

# Audit log entry for a repo.access event.
type GitHub_RepoAccessAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI

  # The visibility of the repository
  visibility: GitHub_RepoAccessAuditEntryVisibility
}

# The privacy of a repository
enum GitHub_RepoAccessAuditEntryVisibility {
  # The repository is visible only to users in the same business.
  INTERNAL

  # The repository is visible only to those with explicit access.
  PRIVATE

  # The repository is visible to everyone.
  PUBLIC
}

# Audit log entry for a repo.add_member event.
type GitHub_RepoAddMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI

  # The visibility of the repository
  visibility: GitHub_RepoAddMemberAuditEntryVisibility
}

# The privacy of a repository
enum GitHub_RepoAddMemberAuditEntryVisibility {
  # The repository is visible only to users in the same business.
  INTERNAL

  # The repository is visible only to those with explicit access.
  PRIVATE

  # The repository is visible to everyone.
  PUBLIC
}

# Audit log entry for a repo.add_topic event.
type GitHub_RepoAddTopicAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_RepositoryAuditEntryData & GitHub_OrganizationAuditEntryData & GitHub_TopicAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The name of the topic added to the repository
  topic: GitHub_Topic

  # The name of the topic added to the repository
  topicName: String

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.archived event.
type GitHub_RepoArchivedAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_RepositoryAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI

  # The visibility of the repository
  visibility: GitHub_RepoArchivedAuditEntryVisibility
}

# The privacy of a repository
enum GitHub_RepoArchivedAuditEntryVisibility {
  # The repository is visible only to users in the same business.
  INTERNAL

  # The repository is visible only to those with explicit access.
  PRIVATE

  # The repository is visible to everyone.
  PUBLIC
}

# Audit log entry for a repo.change_merge_setting event.
type GitHub_RepoChangeMergeSettingAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_RepositoryAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # Whether the change was to enable (true) or disable (false) the merge type
  isEnabled: Boolean

  # The merge method affected by the change
  mergeType: GitHub_RepoChangeMergeSettingAuditEntryMergeType

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The merge options available for pull requests to this repository.
enum GitHub_RepoChangeMergeSettingAuditEntryMergeType {
  # The pull request is added to the base branch in a merge commit.
  MERGE

  # Commits from the pull request are added onto the base branch individually without a merge commit.
  REBASE

  # The pull request's commits are squashed into a single commit before they are merged to the base branch.
  SQUASH
}

# Audit log entry for a repo.config.disable_anonymous_git_access event.
type GitHub_RepoConfigDisableAnonymousGitAccessAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.disable_collaborators_only event.
type GitHub_RepoConfigDisableCollaboratorsOnlyAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.disable_contributors_only event.
type GitHub_RepoConfigDisableContributorsOnlyAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
type GitHub_RepoConfigDisableSockpuppetDisallowedAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.enable_anonymous_git_access event.
type GitHub_RepoConfigEnableAnonymousGitAccessAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.enable_collaborators_only event.
type GitHub_RepoConfigEnableCollaboratorsOnlyAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.enable_contributors_only event.
type GitHub_RepoConfigEnableContributorsOnlyAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
type GitHub_RepoConfigEnableSockpuppetDisallowedAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.lock_anonymous_git_access event.
type GitHub_RepoConfigLockAnonymousGitAccessAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.config.unlock_anonymous_git_access event.
type GitHub_RepoConfigUnlockAnonymousGitAccessAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repo.create event.
type GitHub_RepoCreateAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_RepositoryAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The name of the parent repository for this forked repository.
  forkParentName: String

  # The name of the root repository for this netork.
  forkSourceName: String
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI

  # The visibility of the repository
  visibility: GitHub_RepoCreateAuditEntryVisibility
}

# The privacy of a repository
enum GitHub_RepoCreateAuditEntryVisibility {
  # The repository is visible only to users in the same business.
  INTERNAL

  # The repository is visible only to those with explicit access.
  PRIVATE

  # The repository is visible to everyone.
  PUBLIC
}

# Audit log entry for a repo.destroy event.
type GitHub_RepoDestroyAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_RepositoryAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI

  # The visibility of the repository
  visibility: GitHub_RepoDestroyAuditEntryVisibility
}

# The privacy of a repository
enum GitHub_RepoDestroyAuditEntryVisibility {
  # The repository is visible only to users in the same business.
  INTERNAL

  # The repository is visible only to those with explicit access.
  PRIVATE

  # The repository is visible to everyone.
  PUBLIC
}

# Audit log entry for a repo.remove_member event.
type GitHub_RepoRemoveMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI

  # The visibility of the repository
  visibility: GitHub_RepoRemoveMemberAuditEntryVisibility
}

# The privacy of a repository
enum GitHub_RepoRemoveMemberAuditEntryVisibility {
  # The repository is visible only to users in the same business.
  INTERNAL

  # The repository is visible only to those with explicit access.
  PRIVATE

  # The repository is visible to everyone.
  PUBLIC
}

# Audit log entry for a repo.remove_topic event.
type GitHub_RepoRemoveTopicAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_RepositoryAuditEntryData & GitHub_OrganizationAuditEntryData & GitHub_TopicAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The name of the topic added to the repository
  topic: GitHub_Topic

  # The name of the topic added to the repository
  topicName: String

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The reasons a piece of content can be reported or minimized.
enum GitHub_ReportedContentClassifiers {
  # A spammy piece of content
  SPAM

  # An abusive or harassing piece of content
  ABUSE

  # An irrelevant piece of content
  OFF_TOPIC

  # An outdated piece of content
  OUTDATED

  # A duplicated piece of content
  DUPLICATE

  # The content has been resolved
  RESOLVED
}

# A repository contains the content for a project.
type GitHub_Repository implements GitHub_Node & GitHub_ProjectOwner & GitHub_PackageOwner & GitHub_Subscribable & GitHub_Starrable & GitHub_UniformResourceLocatable & GitHub_RepositoryInfo {
  # A list of users that can be assigned to issues in this repository.
  assignableUsers(
    # Filters users with query on user name and login
    query: String

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # A list of branch protection rules for this repository.
  branchProtectionRules(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_BranchProtectionRuleConnection!

  # Returns the code of conduct for this repository
  codeOfConduct: GitHub_CodeOfConduct

  # A list of collaborators associated with the repository.
  collaborators(
    # Collaborators affiliation level with a repository.
    affiliation: GitHub_CollaboratorAffiliation

    # Filters users with query on user name and login
    query: String

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RepositoryCollaboratorConnection

  # A list of commit comments associated with the repository.
  commitComments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_CommitCommentConnection!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The Ref associated with the repository's default branch.
  defaultBranchRef: GitHub_Ref

  # Whether or not branches are automatically deleted when merged in this repository.
  deleteBranchOnMerge: Boolean!

  # A list of deploy keys that are on this repository.
  deployKeys(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_DeployKeyConnection!

  # Deployments associated with the repository
  deployments(
    # Environments to list deployments for
    environments: [String!]

    # Ordering options for deployments returned from the connection.
    orderBy: GitHub_DeploymentOrder = {field: CREATED_AT, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_DeploymentConnection!

  # The description of the repository.
  description: String

  # The description of the repository rendered to HTML.
  descriptionHTML: GitHub_HTML!

  # The number of kilobytes this repository occupies on disk.
  diskUsage: Int

  # Returns how many forks there are of this repository in the whole network.
  forkCount: Int!

  # A list of direct forked repositories.
  forks(
    # If non-null, filters repositories according to privacy
    privacy: GitHub_RepositoryPrivacy

    # Ordering options for repositories returned from the connection
    orderBy: GitHub_RepositoryOrder

    # Array of viewer's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # current viewer owns.
    affiliations: [GitHub_RepositoryAffiliation]

    # Array of owner's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # organization or user being viewed owns.
    ownerAffiliations: [GitHub_RepositoryAffiliation] = [OWNER, COLLABORATOR]

    # If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RepositoryConnection!

  # The funding links for this repository
  fundingLinks: [GitHub_FundingLink!]!

  # Indicates if the repository has issues feature enabled.
  hasIssuesEnabled: Boolean!

  # Indicates if the repository has the Projects feature enabled.
  hasProjectsEnabled: Boolean!

  # Indicates if the repository has wiki feature enabled.
  hasWikiEnabled: Boolean!

  # The repository's URL.
  homepageUrl: GitHub_URI
  id: ID!

  # Indicates if the repository is unmaintained.
  isArchived: Boolean!

  # Returns whether or not this repository disabled.
  isDisabled: Boolean!

  # Identifies if the repository is a fork.
  isFork: Boolean!

  # Indicates if the repository has been locked or not.
  isLocked: Boolean!

  # Identifies if the repository is a mirror.
  isMirror: Boolean!

  # Identifies if the repository is private.
  isPrivate: Boolean!

  # Identifies if the repository is a template that can be used to generate new repositories.
  isTemplate: Boolean!

  # Returns a single issue from the current repository by number.
  issue(
    # The number for the issue to be returned.
    number: Int!
  ): GitHub_Issue

  # Returns a single issue-like object from the current repository by number.
  issueOrPullRequest(
    # The number for the issue to be returned.
    number: Int!
  ): GitHub_IssueOrPullRequest

  # A list of issues that have been opened in the repository.
  issues(
    # Ordering options for issues returned from the connection.
    orderBy: GitHub_IssueOrder

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # A list of states to filter the issues by.
    states: [GitHub_IssueState!]

    # Filtering options for issues returned from the connection.
    filterBy: GitHub_IssueFilters

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueConnection!

  # Returns a single label by name
  label(
    # Label name
    name: String!
  ): GitHub_Label

  # A list of labels associated with the repository.
  labels(
    # Ordering options for labels returned from the connection.
    orderBy: GitHub_LabelOrder = {field: CREATED_AT, direction: ASC}

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If provided, searches labels by name and description.
    query: String
  ): GitHub_LabelConnection

  # A list containing a breakdown of the language composition of the repository.
  languages(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Order for connection
    orderBy: GitHub_LanguageOrder
  ): GitHub_LanguageConnection

  # The license associated with the repository
  licenseInfo: GitHub_License

  # The reason the repository has been locked.
  lockReason: GitHub_RepositoryLockReason

  # A list of Users that can be mentioned in the context of the repository.
  mentionableUsers(
    # Filters users with query on user name and login
    query: String

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!

  # Whether or not PRs are merged with a merge commit on this repository.
  mergeCommitAllowed: Boolean!

  # Returns a single milestone from the current repository by number.
  milestone(
    # The number for the milestone to be returned.
    number: Int!
  ): GitHub_Milestone

  # A list of milestones associated with the repository.
  milestones(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Filter by the state of the milestones.
    states: [GitHub_MilestoneState!]

    # Ordering options for milestones.
    orderBy: GitHub_MilestoneOrder
  ): GitHub_MilestoneConnection

  # The repository's original mirror URL.
  mirrorUrl: GitHub_URI

  # The name of the repository.
  name: String!

  # The repository's name with owner.
  nameWithOwner: String!

  # A Git object in the repository
  object(
    # The Git object ID
    oid: GitHub_GitObjectID

    # A Git revision expression suitable for rev-parse
    expression: String
  ): GitHub_GitObject

  # The image used to represent this repository in Open Graph data.
  openGraphImageUrl: GitHub_URI!

  # The User owner of the repository.
  owner: GitHub_RepositoryOwner!

  # A list of packages under the owner.
  packages(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Find packages by their names.
    names: [String]

    # Find packages in a repository by ID.
    repositoryId: ID

    # Filter registry package by type.
    packageType: GitHub_PackageType

    # Ordering of the returned packages.
    orderBy: GitHub_PackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHub_PackageConnection!

  # The repository parent, if this is a fork.
  parent: GitHub_Repository

  # The primary language of the repository's code.
  primaryLanguage: GitHub_Language

  # Find project by number.
  project(
    # The project number to find.
    number: Int!
  ): GitHub_Project

  # A list of projects under the owner.
  projects(
    # Ordering options for projects returned from the connection
    orderBy: GitHub_ProjectOrder

    # Query to search projects by, currently only searching by name.
    search: String

    # A list of states to filter the projects by.
    states: [GitHub_ProjectState!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ProjectConnection!

  # The HTTP path listing the repository's projects
  projectsResourcePath: GitHub_URI!

  # The HTTP URL listing the repository's projects
  projectsUrl: GitHub_URI!

  # Returns a single pull request from the current repository by number.
  pullRequest(
    # The number for the pull request to be returned.
    number: Int!
  ): GitHub_PullRequest

  # A list of pull requests that have been opened in the repository.
  pullRequests(
    # A list of states to filter the pull requests by.
    states: [GitHub_PullRequestState!]

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # The head ref name to filter the pull requests by.
    headRefName: String

    # The base ref name to filter the pull requests by.
    baseRefName: String

    # Ordering options for pull requests returned from the connection.
    orderBy: GitHub_IssueOrder

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestConnection!

  # Identifies when the repository was last pushed to.
  pushedAt: GitHub_DateTime

  # Whether or not rebase-merging is enabled on this repository.
  rebaseMergeAllowed: Boolean!

  # Fetch a given ref from the repository
  ref(
    # The ref to retrieve. Fully qualified matches are checked in order
    # (`refs/heads/master`) before falling back onto checks for short name matches (`master`).
    qualifiedName: String!
  ): GitHub_Ref

  # Fetch a list of refs from the repository
  refs(
    # Filters refs with query on name
    query: String

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # A ref name prefix like `refs/heads/`, `refs/tags/`, etc.
    refPrefix: String!

    # DEPRECATED: use orderBy. The ordering direction.
    direction: GitHub_OrderDirection

    # Ordering options for refs returned from the connection.
    orderBy: GitHub_RefOrder
  ): GitHub_RefConnection

  # Lookup a single release given various criteria.
  release(
    # The name of the Tag the Release was created from
    tagName: String!
  ): GitHub_Release

  # List of releases which are dependent on this repository.
  releases(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Order for connection
    orderBy: GitHub_ReleaseOrder
  ): GitHub_ReleaseConnection!

  # A list of applied repository-topic associations for this repository.
  repositoryTopics(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RepositoryTopicConnection!

  # The HTTP path for this repository
  resourcePath: GitHub_URI!

  # A description of the repository, rendered to HTML without any links in it.
  shortDescriptionHTML(
    # How many characters to return.
    limit: Int = 200
  ): GitHub_HTML!

  # Whether or not squash-merging is enabled on this repository.
  squashMergeAllowed: Boolean!

  # The SSH URL to clone this repository
  sshUrl: GitHub_GitSSHRemote!

  # A list of users who have starred this starrable.
  stargazers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Order for connection
    orderBy: GitHub_StarOrder
  ): GitHub_StargazerConnection!

  # Returns a list of all submodules in this repository parsed from the
  # .gitmodules file as of the default branch's HEAD commit.
  submodules(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_SubmoduleConnection!

  # Temporary authentication token for cloning this repository.
  tempCloneToken: String

  # The repository from which this repository was generated, if any.
  templateRepository: GitHub_Repository

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this repository
  url: GitHub_URI!

  # Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  usesCustomOpenGraphImage: Boolean!

  # Indicates whether the viewer has admin permissions on this repository.
  viewerCanAdminister: Boolean!

  # Can the current viewer create new projects on this owner.
  viewerCanCreateProjects: Boolean!

  # Check if the viewer is able to change their subscription status for the repository.
  viewerCanSubscribe: Boolean!

  # Indicates whether the viewer can update the topics of this repository.
  viewerCanUpdateTopics: Boolean!

  # Returns a boolean indicating whether the viewing user has starred this starrable.
  viewerHasStarred: Boolean!

  # The users permission level on the repository. Will return null if authenticated as an GitHub App.
  viewerPermission: GitHub_RepositoryPermission

  # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  viewerSubscription: GitHub_SubscriptionState

  # A list of vulnerability alerts that are on this repository.
  vulnerabilityAlerts(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RepositoryVulnerabilityAlertConnection

  # A list of users watching the repository.
  watchers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserConnection!
}

# The affiliation of a user to a repository
enum GitHub_RepositoryAffiliation {
  # Repositories that are owned by the authenticated user.
  OWNER

  # Repositories that the user has been added to as a collaborator.
  COLLABORATOR

  # Repositories that the user has access to through being a member of an
  # organization. This includes every repository on every team that the user is on.
  ORGANIZATION_MEMBER
}

# Metadata for an audit entry with action repo.*
interface GitHub_RepositoryAuditEntryData {
  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI
}

# The connection type for User.
type GitHub_RepositoryCollaboratorConnection {
  # A list of edges.
  edges: [GitHub_RepositoryCollaboratorEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a user who is a collaborator of a repository.
type GitHub_RepositoryCollaboratorEdge {
  # A cursor for use in pagination.
  cursor: String!
  node: GitHub_User!

  # The permission the user has on the repository.
  #
  # **Upcoming Change on 2020-10-01 UTC**
  # **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
  # **Reason:** This field may return additional values
  #
  permission: GitHub_RepositoryPermission!

  # A list of sources for the user's access to the repository.
  permissionSources: [GitHub_PermissionSource!]
}

# A list of repositories owned by the subject.
type GitHub_RepositoryConnection {
  # A list of edges.
  edges: [GitHub_RepositoryEdge]

  # A list of nodes.
  nodes: [GitHub_Repository]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!

  # The total size in kilobytes of all repositories in the connection.
  totalDiskUsage: Int!
}

# The reason a repository is listed as 'contributed'.
enum GitHub_RepositoryContributionType {
  # Created a commit
  COMMIT

  # Created an issue
  ISSUE

  # Created a pull request
  PULL_REQUEST

  # Created the repository
  REPOSITORY

  # Reviewed a pull request
  PULL_REQUEST_REVIEW
}

# An edge in a connection.
type GitHub_RepositoryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Repository
}

# A subset of repository info.
interface GitHub_RepositoryInfo {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The description of the repository.
  description: String

  # The description of the repository rendered to HTML.
  descriptionHTML: GitHub_HTML!

  # Returns how many forks there are of this repository in the whole network.
  forkCount: Int!

  # Indicates if the repository has issues feature enabled.
  hasIssuesEnabled: Boolean!

  # Indicates if the repository has the Projects feature enabled.
  hasProjectsEnabled: Boolean!

  # Indicates if the repository has wiki feature enabled.
  hasWikiEnabled: Boolean!

  # The repository's URL.
  homepageUrl: GitHub_URI

  # Indicates if the repository is unmaintained.
  isArchived: Boolean!

  # Identifies if the repository is a fork.
  isFork: Boolean!

  # Indicates if the repository has been locked or not.
  isLocked: Boolean!

  # Identifies if the repository is a mirror.
  isMirror: Boolean!

  # Identifies if the repository is private.
  isPrivate: Boolean!

  # Identifies if the repository is a template that can be used to generate new repositories.
  isTemplate: Boolean!

  # The license associated with the repository
  licenseInfo: GitHub_License

  # The reason the repository has been locked.
  lockReason: GitHub_RepositoryLockReason

  # The repository's original mirror URL.
  mirrorUrl: GitHub_URI

  # The name of the repository.
  name: String!

  # The repository's name with owner.
  nameWithOwner: String!

  # The image used to represent this repository in Open Graph data.
  openGraphImageUrl: GitHub_URI!

  # The User owner of the repository.
  owner: GitHub_RepositoryOwner!

  # Identifies when the repository was last pushed to.
  pushedAt: GitHub_DateTime

  # The HTTP path for this repository
  resourcePath: GitHub_URI!

  # A description of the repository, rendered to HTML without any links in it.
  shortDescriptionHTML(
    # How many characters to return.
    limit: Int = 200
  ): GitHub_HTML!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this repository
  url: GitHub_URI!

  # Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
  usesCustomOpenGraphImage: Boolean!
}

# An invitation for a user to be added to a repository.
type GitHub_RepositoryInvitation implements GitHub_Node {
  # The email address that received the invitation.
  email: String
  id: ID!

  # The user who received the invitation.
  invitee: GitHub_User

  # The user who created the invitation.
  inviter: GitHub_User!

  # The permission granted on this repository by this invitation.
  #
  # **Upcoming Change on 2020-10-01 UTC**
  # **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
  # **Reason:** This field may return additional values
  #
  permission: GitHub_RepositoryPermission!

  # The Repository the user is invited to.
  repository: GitHub_RepositoryInfo
}

# The connection type for RepositoryInvitation.
type GitHub_RepositoryInvitationConnection {
  # A list of edges.
  edges: [GitHub_RepositoryInvitationEdge]

  # A list of nodes.
  nodes: [GitHub_RepositoryInvitation]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_RepositoryInvitationEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_RepositoryInvitation
}

# Ordering options for repository invitation connections.
input GitHub_RepositoryInvitationOrder {
  # The field to order repository invitations by.
  field: GitHub_RepositoryInvitationOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which repository invitation connections can be ordered.
enum GitHub_RepositoryInvitationOrderField {
  # Order repository invitations by creation time
  CREATED_AT

  # Order repository invitations by invitee login
  INVITEE_LOGIN @deprecated(reason: "`INVITEE_LOGIN` is no longer a valid field value. Repository invitations can now be associated with an email, not only an invitee. Removal on 2020-10-01 UTC.")
}

# The possible reasons a given repository could be in a locked state.
enum GitHub_RepositoryLockReason {
  # The repository is locked due to a move.
  MOVING

  # The repository is locked due to a billing related reason.
  BILLING

  # The repository is locked due to a rename.
  RENAME

  # The repository is locked due to a migration.
  MIGRATING
}

# Represents a object that belongs to a repository.
interface GitHub_RepositoryNode {
  # The repository associated with this node.
  repository: GitHub_Repository!
}

# Ordering options for repository connections
input GitHub_RepositoryOrder {
  # The field to order repositories by.
  field: GitHub_RepositoryOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which repository connections can be ordered.
enum GitHub_RepositoryOrderField {
  # Order repositories by creation time
  CREATED_AT

  # Order repositories by update time
  UPDATED_AT

  # Order repositories by push time
  PUSHED_AT

  # Order repositories by name
  NAME

  # Order repositories by number of stargazers
  STARGAZERS
}

# Represents an owner of a Repository.
interface GitHub_RepositoryOwner {
  # A URL pointing to the owner's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!
  id: ID!

  # The username used to login.
  login: String!

  # A list of repositories that the user owns.
  repositories(
    # If non-null, filters repositories according to privacy
    privacy: GitHub_RepositoryPrivacy

    # Ordering options for repositories returned from the connection
    orderBy: GitHub_RepositoryOrder

    # Array of viewer's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # current viewer owns.
    affiliations: [GitHub_RepositoryAffiliation]

    # Array of owner's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # organization or user being viewed owns.
    ownerAffiliations: [GitHub_RepositoryAffiliation] = [OWNER, COLLABORATOR]

    # If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If non-null, filters repositories according to whether they are forks of another repository
    isFork: Boolean
  ): GitHub_RepositoryConnection!

  # Find Repository.
  repository(
    # Name of Repository to find.
    name: String!
  ): GitHub_Repository

  # The HTTP URL for the owner.
  resourcePath: GitHub_URI!

  # The HTTP URL for the owner.
  url: GitHub_URI!
}

# The access level to a repository
enum GitHub_RepositoryPermission {
  # Can read, clone, and push to this repository. Can also manage issues, pull
  # requests, and repository settings, including adding collaborators
  ADMIN

  # Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings
  MAINTAIN

  # Can read, clone, and push to this repository. Can also manage issues and pull requests
  WRITE

  # Can read and clone this repository. Can also manage issues and pull requests
  TRIAGE

  # Can read and clone this repository. Can also open and comment on issues and pull requests
  READ
}

# The privacy of a repository
enum GitHub_RepositoryPrivacy {
  # Public
  PUBLIC

  # Private
  PRIVATE
}

# A repository-topic connects a repository to a topic.
type GitHub_RepositoryTopic implements GitHub_Node & GitHub_UniformResourceLocatable {
  id: ID!

  # The HTTP path for this repository-topic.
  resourcePath: GitHub_URI!

  # The topic.
  topic: GitHub_Topic!

  # The HTTP URL for this repository-topic.
  url: GitHub_URI!
}

# The connection type for RepositoryTopic.
type GitHub_RepositoryTopicConnection {
  # A list of edges.
  edges: [GitHub_RepositoryTopicEdge]

  # A list of nodes.
  nodes: [GitHub_RepositoryTopic]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_RepositoryTopicEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_RepositoryTopic
}

# The repository's visibility level.
enum GitHub_RepositoryVisibility {
  # The repository is visible only to those with explicit access.
  PRIVATE

  # The repository is visible to everyone.
  PUBLIC

  # The repository is visible only to users in the same business.
  INTERNAL
}

# Audit log entry for a repository_visibility_change.disable event.
type GitHub_RepositoryVisibilityChangeDisableAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a repository_visibility_change.enable event.
type GitHub_RepositoryVisibilityChangeEnableAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_EnterpriseAuditEntryData & GitHub_OrganizationAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!

  # The HTTP path for this enterprise.
  enterpriseResourcePath: GitHub_URI

  # The slug of the enterprise.
  enterpriseSlug: String

  # The HTTP URL for this enterprise.
  enterpriseUrl: GitHub_URI
  id: ID!

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# A alert for a repository with an affected vulnerability.
type GitHub_RepositoryVulnerabilityAlert implements GitHub_Node & GitHub_RepositoryNode {
  # When was the alert created?
  createdAt: GitHub_DateTime!

  # The reason the alert was dismissed
  dismissReason: String

  # When was the alert dimissed?
  dismissedAt: GitHub_DateTime

  # The user who dismissed the alert
  dismisser: GitHub_User
  id: ID!

  # The associated repository
  repository: GitHub_Repository!

  # The associated security advisory
  securityAdvisory: GitHub_SecurityAdvisory

  # The associated security vulnerablity
  securityVulnerability: GitHub_SecurityVulnerability

  # The vulnerable manifest filename
  vulnerableManifestFilename: String!

  # The vulnerable manifest path
  vulnerableManifestPath: String!

  # The vulnerable requirements
  vulnerableRequirements: String
}

# The connection type for RepositoryVulnerabilityAlert.
type GitHub_RepositoryVulnerabilityAlertConnection {
  # A list of edges.
  edges: [GitHub_RepositoryVulnerabilityAlertEdge]

  # A list of nodes.
  nodes: [GitHub_RepositoryVulnerabilityAlert]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_RepositoryVulnerabilityAlertEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_RepositoryVulnerabilityAlert
}

# Types that can be requested reviewers.
union GitHub_RequestedReviewer = GitHub_Mannequin | GitHub_Team | GitHub_User

# Autogenerated input type of RequestReviews
input GitHub_RequestReviewsInput {
  # The Node ID of the pull request to modify.
  pullRequestId: ID!

  # The Node IDs of the user to request.
  userIds: [ID!]

  # The Node IDs of the team to request.
  teamIds: [ID!]

  # Add users to the set rather than replace.
  union: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of RequestReviews
type GitHub_RequestReviewsPayload {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The pull request that is getting requests.
  pullRequest: GitHub_PullRequest

  # The edge from the pull request to the requested reviewers.
  requestedReviewersEdge: GitHub_UserEdge
}

# Autogenerated input type of ResolveReviewThread
input GitHub_ResolveReviewThreadInput {
  # The ID of the thread to resolve
  threadId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of ResolveReviewThread
type GitHub_ResolveReviewThreadPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The thread to resolve.
  thread: GitHub_PullRequestReviewThread
}

# Represents a private contribution a user made on GitHub.
type GitHub_RestrictedContribution implements GitHub_Contribution {
  # Whether this contribution is associated with a record you do not have access to. For
  # example, your own 'first issue' contribution may have been made on a repository you can no
  # longer access.
  #
  isRestricted: Boolean!

  # When this contribution was made.
  occurredAt: GitHub_DateTime!

  # The HTTP path for this contribution.
  resourcePath: GitHub_URI!

  # The HTTP URL for this contribution.
  url: GitHub_URI!

  # The user who made this contribution.
  #
  user: GitHub_User!
}

# A team or user who has the ability to dismiss a review on a protected branch.
type GitHub_ReviewDismissalAllowance implements GitHub_Node {
  # The actor that can dismiss.
  actor: GitHub_ReviewDismissalAllowanceActor

  # Identifies the branch protection rule associated with the allowed user or team.
  branchProtectionRule: GitHub_BranchProtectionRule
  id: ID!
}

# Types that can be an actor.
union GitHub_ReviewDismissalAllowanceActor = GitHub_Team | GitHub_User

# The connection type for ReviewDismissalAllowance.
type GitHub_ReviewDismissalAllowanceConnection {
  # A list of edges.
  edges: [GitHub_ReviewDismissalAllowanceEdge]

  # A list of nodes.
  nodes: [GitHub_ReviewDismissalAllowance]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_ReviewDismissalAllowanceEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_ReviewDismissalAllowance
}

# Represents a 'review_dismissed' event on a given issue or pull request.
type GitHub_ReviewDismissedEvent implements GitHub_Node & GitHub_UniformResourceLocatable {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # Identifies the optional message associated with the 'review_dismissed' event.
  dismissalMessage: String

  # Identifies the optional message associated with the event, rendered to HTML.
  dismissalMessageHTML: String
  id: ID!

  # Identifies the previous state of the review with the 'review_dismissed' event.
  previousReviewState: GitHub_PullRequestReviewState!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # Identifies the commit which caused the review to become stale.
  pullRequestCommit: GitHub_PullRequestCommit

  # The HTTP path for this review dismissed event.
  resourcePath: GitHub_URI!

  # Identifies the review associated with the 'review_dismissed' event.
  review: GitHub_PullRequestReview

  # The HTTP URL for this review dismissed event.
  url: GitHub_URI!
}

# A request for a user to review a pull request.
type GitHub_ReviewRequest implements GitHub_Node {
  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # Identifies the pull request associated with this review request.
  pullRequest: GitHub_PullRequest!

  # The reviewer that is requested.
  requestedReviewer: GitHub_RequestedReviewer
}

# The connection type for ReviewRequest.
type GitHub_ReviewRequestConnection {
  # A list of edges.
  edges: [GitHub_ReviewRequestEdge]

  # A list of nodes.
  nodes: [GitHub_ReviewRequest]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents an 'review_requested' event on a given pull request.
type GitHub_ReviewRequestedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # Identifies the reviewer whose review was requested.
  requestedReviewer: GitHub_RequestedReviewer
}

# An edge in a connection.
type GitHub_ReviewRequestEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_ReviewRequest
}

# Represents an 'review_request_removed' event on a given pull request.
type GitHub_ReviewRequestRemovedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # PullRequest referenced by event.
  pullRequest: GitHub_PullRequest!

  # Identifies the reviewer whose review request was removed.
  requestedReviewer: GitHub_RequestedReviewer
}

# A hovercard context with a message describing the current code review state of the pull
# request.
#
type GitHub_ReviewStatusHovercardContext implements GitHub_HovercardContext {
  # A string describing this context
  message: String!

  # An octicon to accompany this context
  octicon: String!

  # The current status of the pull request with respect to code review.
  reviewDecision: GitHub_PullRequestReviewDecision
}

# The possible digest algorithms used to sign SAML requests for an identity provider.
enum GitHub_SamlDigestAlgorithm {
  # SHA1
  SHA1

  # SHA256
  SHA256

  # SHA384
  SHA384

  # SHA512
  SHA512
}

# The possible signature algorithms used to sign SAML requests for a Identity Provider.
enum GitHub_SamlSignatureAlgorithm {
  # RSA-SHA1
  RSA_SHA1

  # RSA-SHA256
  RSA_SHA256

  # RSA-SHA384
  RSA_SHA384

  # RSA-SHA512
  RSA_SHA512
}

# A Saved Reply is text a user can use to reply quickly.
type GitHub_SavedReply implements GitHub_Node {
  # The body of the saved reply.
  body: String!

  # The saved reply body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # Identifies the primary key from the database.
  databaseId: Int
  id: ID!

  # The title of the saved reply.
  title: String!

  # The user that saved this reply.
  user: GitHub_Actor
}

# The connection type for SavedReply.
type GitHub_SavedReplyConnection {
  # A list of edges.
  edges: [GitHub_SavedReplyEdge]

  # A list of nodes.
  nodes: [GitHub_SavedReply]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_SavedReplyEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_SavedReply
}

# Ordering options for saved reply connections.
input GitHub_SavedReplyOrder {
  # The field to order saved replies by.
  field: GitHub_SavedReplyOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which saved reply connections can be ordered.
enum GitHub_SavedReplyOrderField {
  # Order saved reply by when they were updated.
  UPDATED_AT
}

# The results of a search.
union GitHub_SearchResultItem = GitHub_App | GitHub_Issue | GitHub_MarketplaceListing | GitHub_Organization | GitHub_PullRequest | GitHub_Repository | GitHub_User

# A list of results that matched against a search query.
type GitHub_SearchResultItemConnection {
  # The number of pieces of code that matched the search query.
  codeCount: Int!

  # A list of edges.
  edges: [GitHub_SearchResultItemEdge]

  # The number of issues that matched the search query.
  issueCount: Int!

  # A list of nodes.
  nodes: [GitHub_SearchResultItem]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # The number of repositories that matched the search query.
  repositoryCount: Int!

  # The number of users that matched the search query.
  userCount: Int!

  # The number of wiki pages that matched the search query.
  wikiCount: Int!
}

# An edge in a connection.
type GitHub_SearchResultItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_SearchResultItem

  # Text matches on the result found.
  textMatches: [GitHub_TextMatch]
}

# Represents the individual results of a search.
enum GitHub_SearchType {
  # Returns results matching issues in repositories.
  ISSUE

  # Returns results matching repositories.
  REPOSITORY

  # Returns results matching users and organizations on GitHub.
  USER
}

# A GitHub Security Advisory
type GitHub_SecurityAdvisory implements GitHub_Node {
  # Identifies the primary key from the database.
  databaseId: Int

  # This is a long plaintext description of the advisory
  description: String!

  # The GitHub Security Advisory ID
  ghsaId: String!
  id: ID!

  # A list of identifiers for this advisory
  identifiers: [GitHub_SecurityAdvisoryIdentifier!]!

  # The organization that originated the advisory
  origin: String!

  # The permalink for the advisory
  permalink: GitHub_URI

  # When the advisory was published
  publishedAt: GitHub_DateTime!

  # A list of references for this advisory
  references: [GitHub_SecurityAdvisoryReference!]!

  # The severity of the advisory
  severity: GitHub_SecurityAdvisorySeverity!

  # A short plaintext summary of the advisory
  summary: String!

  # When the advisory was last updated
  updatedAt: GitHub_DateTime!

  # Vulnerabilities associated with this Advisory
  vulnerabilities(
    # Ordering options for the returned topics.
    orderBy: GitHub_SecurityVulnerabilityOrder = {field: UPDATED_AT, direction: DESC}

    # An ecosystem to filter vulnerabilities by.
    ecosystem: GitHub_SecurityAdvisoryEcosystem

    # A package name to filter vulnerabilities by.
    package: String

    # A list of severities to filter vulnerabilities by.
    severities: [GitHub_SecurityAdvisorySeverity!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_SecurityVulnerabilityConnection!

  # When the advisory was withdrawn, if it has been withdrawn
  withdrawnAt: GitHub_DateTime
}

# The connection type for SecurityAdvisory.
type GitHub_SecurityAdvisoryConnection {
  # A list of edges.
  edges: [GitHub_SecurityAdvisoryEdge]

  # A list of nodes.
  nodes: [GitHub_SecurityAdvisory]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# The possible ecosystems of a security vulnerability's package.
enum GitHub_SecurityAdvisoryEcosystem {
  # Ruby gems hosted at RubyGems.org
  RUBYGEMS

  # JavaScript packages hosted at npmjs.com
  NPM

  # Python packages hosted at PyPI.org
  PIP

  # Java artifacts hosted at the Maven central repository
  MAVEN

  # .NET packages hosted at the NuGet Gallery
  NUGET

  # PHP packages hosted at packagist.org
  COMPOSER
}

# An edge in a connection.
type GitHub_SecurityAdvisoryEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_SecurityAdvisory
}

# A GitHub Security Advisory Identifier
type GitHub_SecurityAdvisoryIdentifier {
  # The identifier type, e.g. GHSA, CVE
  type: String!

  # The identifier
  value: String!
}

# An advisory identifier to filter results on.
input GitHub_SecurityAdvisoryIdentifierFilter {
  # The identifier type.
  type: GitHub_SecurityAdvisoryIdentifierType!

  # The identifier string. Supports exact or partial matching.
  value: String!
}

# Identifier formats available for advisories.
enum GitHub_SecurityAdvisoryIdentifierType {
  # Common Vulnerabilities and Exposures Identifier.
  CVE

  # GitHub Security Advisory ID.
  GHSA
}

# Ordering options for security advisory connections
input GitHub_SecurityAdvisoryOrder {
  # The field to order security advisories by.
  field: GitHub_SecurityAdvisoryOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which security advisory connections can be ordered.
enum GitHub_SecurityAdvisoryOrderField {
  # Order advisories by publication time
  PUBLISHED_AT

  # Order advisories by update time
  UPDATED_AT
}

# An individual package
type GitHub_SecurityAdvisoryPackage {
  # The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
  ecosystem: GitHub_SecurityAdvisoryEcosystem!

  # The package name
  name: String!
}

# An individual package version
type GitHub_SecurityAdvisoryPackageVersion {
  # The package name or version
  identifier: String!
}

# A GitHub Security Advisory Reference
type GitHub_SecurityAdvisoryReference {
  # A publicly accessible reference
  url: GitHub_URI!
}

# Severity of the vulnerability.
enum GitHub_SecurityAdvisorySeverity {
  # Low.
  LOW

  # Moderate.
  MODERATE

  # High.
  HIGH

  # Critical.
  CRITICAL
}

# An individual vulnerability within an Advisory
type GitHub_SecurityVulnerability {
  # The Advisory associated with this Vulnerability
  advisory: GitHub_SecurityAdvisory!

  # The first version containing a fix for the vulnerability
  firstPatchedVersion: GitHub_SecurityAdvisoryPackageVersion

  # A description of the vulnerable package
  package: GitHub_SecurityAdvisoryPackage!

  # The severity of the vulnerability within this package
  severity: GitHub_SecurityAdvisorySeverity!

  # When the vulnerability was last updated
  updatedAt: GitHub_DateTime!

  # A string that describes the vulnerable package versions.
  # This string follows a basic syntax with a few forms.
  # + `= 0.2.0` denotes a single vulnerable version.
  # + `<= 1.0.8` denotes a version range up to and including the specified version
  # + `< 0.1.11` denotes a version range up to, but excluding, the specified version
  # + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
  # + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
  #
  vulnerableVersionRange: String!
}

# The connection type for SecurityVulnerability.
type GitHub_SecurityVulnerabilityConnection {
  # A list of edges.
  edges: [GitHub_SecurityVulnerabilityEdge]

  # A list of nodes.
  nodes: [GitHub_SecurityVulnerability]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_SecurityVulnerabilityEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_SecurityVulnerability
}

# Ordering options for security vulnerability connections
input GitHub_SecurityVulnerabilityOrder {
  # The field to order security vulnerabilities by.
  field: GitHub_SecurityVulnerabilityOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which security vulnerability connections can be ordered.
enum GitHub_SecurityVulnerabilityOrderField {
  # Order vulnerability by update time
  UPDATED_AT
}

# Autogenerated input type of SetEnterpriseIdentityProvider
input GitHub_SetEnterpriseIdentityProviderInput {
  # The ID of the enterprise on which to set an identity provider.
  enterpriseId: ID!

  # The URL endpoint for the identity provider's SAML SSO.
  ssoUrl: GitHub_URI!

  # The Issuer Entity ID for the SAML identity provider
  issuer: String

  # The x509 certificate used by the identity provider to sign assertions and responses.
  idpCertificate: String!

  # The signature algorithm used to sign SAML requests for the identity provider.
  signatureMethod: GitHub_SamlSignatureAlgorithm!

  # The digest algorithm used to sign SAML requests for the identity provider.
  digestMethod: GitHub_SamlDigestAlgorithm!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of SetEnterpriseIdentityProvider
type GitHub_SetEnterpriseIdentityProviderPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The identity provider for the enterprise.
  identityProvider: GitHub_EnterpriseIdentityProvider
}

# Represents an S/MIME signature on a Commit or Tag.
type GitHub_SmimeSignature implements GitHub_GitSignature {
  # Email used to sign this object.
  email: String!

  # True if the signature is valid and verified by GitHub.
  isValid: Boolean!

  # Payload for GPG signing object. Raw ODB object without the signature header.
  payload: String!

  # ASCII-armored signature header from object.
  signature: String!

  # GitHub user corresponding to the email signing this commit.
  signer: GitHub_User

  # The state of this signature. `VALID` if signature is valid and verified by
  # GitHub, otherwise represents reason why signature is considered invalid.
  state: GitHub_GitSignatureState!

  # True if the signature was made with GitHub's signing key.
  wasSignedByGitHub: Boolean!
}

# Entites that can sponsor others via GitHub Sponsors
union GitHub_Sponsor = GitHub_Organization | GitHub_User

# Entities that can be sponsored through GitHub Sponsors
interface GitHub_Sponsorable {
  # The GitHub Sponsors listing for this user.
  sponsorsListing: GitHub_SponsorsListing

  # This object's sponsorships as the maintainer.
  sponsorshipsAsMaintainer(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Whether or not to include private sponsorships in the result set
    includePrivate: Boolean = false

    # Ordering options for sponsorships returned from this connection. If left
    # blank, the sponsorships will be ordered based on relevancy to the viewer.
    orderBy: GitHub_SponsorshipOrder
  ): GitHub_SponsorshipConnection!

  # This object's sponsorships as the sponsor.
  sponsorshipsAsSponsor(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for sponsorships returned from this connection. If left
    # blank, the sponsorships will be ordered based on relevancy to the viewer.
    orderBy: GitHub_SponsorshipOrder
  ): GitHub_SponsorshipConnection!
}

# A sponsorship relationship between a sponsor and a maintainer
type GitHub_Sponsorship implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # The entity that is being sponsored
  maintainer: GitHub_User! @deprecated(reason: "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.")

  # The privacy level for this sponsorship.
  privacyLevel: GitHub_SponsorshipPrivacy!

  # The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
  sponsor: GitHub_User @deprecated(reason: "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.")

  # The user or organization that is sponsoring. Returns null if the sponsorship is private.
  sponsorEntity: GitHub_Sponsor

  # The entity that is being sponsored
  sponsorable: GitHub_Sponsorable!

  # The associated sponsorship tier
  tier: GitHub_SponsorsTier
}

# The connection type for Sponsorship.
type GitHub_SponsorshipConnection {
  # A list of edges.
  edges: [GitHub_SponsorshipEdge]

  # A list of nodes.
  nodes: [GitHub_Sponsorship]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_SponsorshipEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Sponsorship
}

# Ordering options for sponsorship connections.
input GitHub_SponsorshipOrder {
  # The field to order sponsorship by.
  field: GitHub_SponsorshipOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which sponsorship connections can be ordered.
enum GitHub_SponsorshipOrderField {
  # Order sponsorship by creation time.
  CREATED_AT
}

# The privacy of a sponsorship
enum GitHub_SponsorshipPrivacy {
  # Public
  PUBLIC

  # Private
  PRIVATE
}

# A GitHub Sponsors listing.
type GitHub_SponsorsListing implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The full description of the listing.
  fullDescription: String!

  # The full description of the listing rendered to HTML.
  fullDescriptionHTML: GitHub_HTML!
  id: ID!

  # The listing's full name.
  name: String!

  # The short description of the listing.
  shortDescription: String!

  # The short name of the listing.
  slug: String!

  # The published tiers for this GitHub Sponsors listing.
  tiers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for Sponsors tiers returned from the connection.
    orderBy: GitHub_SponsorsTierOrder = {field: MONTHLY_PRICE_IN_CENTS, direction: ASC}
  ): GitHub_SponsorsTierConnection
}

# A GitHub Sponsors tier associated with a GitHub Sponsors listing.
type GitHub_SponsorsTier implements GitHub_Node {
  # SponsorsTier information only visible to users that can administer the associated Sponsors listing.
  adminInfo: GitHub_SponsorsTierAdminInfo

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The description of the tier.
  description: String!

  # The tier description rendered to HTML
  descriptionHTML: GitHub_HTML!
  id: ID!

  # How much this tier costs per month in cents.
  monthlyPriceInCents: Int!

  # How much this tier costs per month in dollars.
  monthlyPriceInDollars: Int!

  # The name of the tier.
  name: String!

  # The sponsors listing that this tier belongs to.
  sponsorsListing: GitHub_SponsorsListing!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!
}

# SponsorsTier information only visible to users that can administer the associated Sponsors listing.
type GitHub_SponsorsTierAdminInfo {
  # The sponsorships associated with this tier.
  sponsorships(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Whether or not to include private sponsorships in the result set
    includePrivate: Boolean = false

    # Ordering options for sponsorships returned from this connection. If left
    # blank, the sponsorships will be ordered based on relevancy to the viewer.
    orderBy: GitHub_SponsorshipOrder
  ): GitHub_SponsorshipConnection!
}

# The connection type for SponsorsTier.
type GitHub_SponsorsTierConnection {
  # A list of edges.
  edges: [GitHub_SponsorsTierEdge]

  # A list of nodes.
  nodes: [GitHub_SponsorsTier]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_SponsorsTierEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_SponsorsTier
}

# Ordering options for Sponsors tiers connections.
input GitHub_SponsorsTierOrder {
  # The field to order tiers by.
  field: GitHub_SponsorsTierOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which Sponsors tiers connections can be ordered.
enum GitHub_SponsorsTierOrderField {
  # Order tiers by creation time.
  CREATED_AT

  # Order tiers by their monthly price in cents
  MONTHLY_PRICE_IN_CENTS
}

# The connection type for User.
type GitHub_StargazerConnection {
  # A list of edges.
  edges: [GitHub_StargazerEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a user that's starred a repository.
type GitHub_StargazerEdge {
  # A cursor for use in pagination.
  cursor: String!
  node: GitHub_User!

  # Identifies when the item was starred.
  starredAt: GitHub_DateTime!
}

# Ways in which star connections can be ordered.
input GitHub_StarOrder {
  # The field in which to order nodes by.
  field: GitHub_StarOrderField!

  # The direction in which to order nodes.
  direction: GitHub_OrderDirection!
}

# Properties by which star connections can be ordered.
enum GitHub_StarOrderField {
  # Allows ordering a list of stars by when they were created.
  STARRED_AT
}

# Things that can be starred.
interface GitHub_Starrable {
  id: ID!

  # A list of users who have starred this starrable.
  stargazers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Order for connection
    orderBy: GitHub_StarOrder
  ): GitHub_StargazerConnection!

  # Returns a boolean indicating whether the viewing user has starred this starrable.
  viewerHasStarred: Boolean!
}

# The connection type for Repository.
type GitHub_StarredRepositoryConnection {
  # A list of edges.
  edges: [GitHub_StarredRepositoryEdge]

  # Is the list of stars for this user truncated? This is true for users that have many stars.
  isOverLimit: Boolean!

  # A list of nodes.
  nodes: [GitHub_Repository]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a starred repository.
type GitHub_StarredRepositoryEdge {
  # A cursor for use in pagination.
  cursor: String!
  node: GitHub_Repository!

  # Identifies when the item was starred.
  starredAt: GitHub_DateTime!
}

# Represents a commit status.
type GitHub_Status implements GitHub_Node {
  # The commit this status is attached to.
  commit: GitHub_Commit

  # Looks up an individual status context by context name.
  context(
    # The context name.
    name: String!
  ): GitHub_StatusContext

  # The individual status contexts for this commit.
  contexts: [GitHub_StatusContext!]!
  id: ID!

  # The combined commit status.
  state: GitHub_StatusState!
}

# Represents the rollup for both the check runs and status for a commit.
type GitHub_StatusCheckRollup implements GitHub_Node {
  # The commit the status and check runs are attached to.
  commit: GitHub_Commit

  # A list of status contexts and check runs for this commit.
  contexts(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_StatusCheckRollupContextConnection!
  id: ID!

  # The combined status for the commit.
  state: GitHub_StatusState!
}

# Types that can be inside a StatusCheckRollup context.
union GitHub_StatusCheckRollupContext = GitHub_StatusContext

# The connection type for StatusCheckRollupContext.
type GitHub_StatusCheckRollupContextConnection {
  # A list of edges.
  edges: [GitHub_StatusCheckRollupContextEdge]

  # A list of nodes.
  nodes: [GitHub_StatusCheckRollupContext]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_StatusCheckRollupContextEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_StatusCheckRollupContext
}

# Represents an individual commit status context
type GitHub_StatusContext implements GitHub_Node {
  # The avatar of the OAuth application or the user that created the status
  avatarUrl(
    # The size of the resulting square image.
    size: Int = 40
  ): GitHub_URI

  # This commit this status context is attached to.
  commit: GitHub_Commit

  # The name of this status context.
  context: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The actor who created this status context.
  creator: GitHub_Actor

  # The description for this status context.
  description: String
  id: ID!

  # The state of this status context.
  state: GitHub_StatusState!

  # The URL for this status context.
  targetUrl: GitHub_URI
}

# The possible commit status states.
enum GitHub_StatusState {
  # Status is expected.
  EXPECTED

  # Status is errored.
  ERROR

  # Status is failing.
  FAILURE

  # Status is pending.
  PENDING

  # Status is successful.
  SUCCESS
}

# Autogenerated input type of SubmitPullRequestReview
input GitHub_SubmitPullRequestReviewInput {
  # The Pull Request ID to submit any pending reviews.
  pullRequestId: ID

  # The Pull Request Review ID to submit.
  pullRequestReviewId: ID

  # The event to send to the Pull Request Review.
  event: GitHub_PullRequestReviewEvent!

  # The text field to set on the Pull Request Review.
  body: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of SubmitPullRequestReview
type GitHub_SubmitPullRequestReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The submitted pull request review.
  pullRequestReview: GitHub_PullRequestReview
}

# A pointer to a repository at a specific revision embedded inside another repository.
type GitHub_Submodule {
  # The branch of the upstream submodule for tracking updates
  branch: String

  # The git URL of the submodule repository
  gitUrl: GitHub_URI!

  # The name of the submodule in .gitmodules
  name: String!

  # The path in the superproject that this submodule is located in
  path: String!

  # The commit revision of the subproject repository being tracked by the submodule
  subprojectCommitOid: GitHub_GitObjectID
}

# The connection type for Submodule.
type GitHub_SubmoduleConnection {
  # A list of edges.
  edges: [GitHub_SubmoduleEdge]

  # A list of nodes.
  nodes: [GitHub_Submodule]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_SubmoduleEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Submodule
}

# Entities that can be subscribed to for web and email notifications.
interface GitHub_Subscribable {
  id: ID!

  # Check if the viewer is able to change their subscription status for the repository.
  viewerCanSubscribe: Boolean!

  # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  viewerSubscription: GitHub_SubscriptionState
}

# Represents a 'subscribed' event on a given `Subscribable`.
type GitHub_SubscribedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Object referenced by event.
  subscribable: GitHub_Subscribable!
}

# The possible states of a subscription.
enum GitHub_SubscriptionState {
  # The User is only notified when participating or @mentioned.
  UNSUBSCRIBED

  # The User is notified of all conversations.
  SUBSCRIBED

  # The User is never notified.
  IGNORED
}

# A suggestion to review a pull request based on a user's commit history and review comments.
type GitHub_SuggestedReviewer {
  # Is this suggestion based on past commits?
  isAuthor: Boolean!

  # Is this suggestion based on past review comments?
  isCommenter: Boolean!

  # Identifies the user suggested to review the pull request.
  reviewer: GitHub_User!
}

# Represents a Git tag.
type GitHub_Tag implements GitHub_Node & GitHub_GitObject {
  # An abbreviated version of the Git object ID
  abbreviatedOid: String!

  # The HTTP path for this Git object
  commitResourcePath: GitHub_URI!

  # The HTTP URL for this Git object
  commitUrl: GitHub_URI!
  id: ID!

  # The Git tag message.
  message: String

  # The Git tag name.
  name: String!

  # The Git object ID
  oid: GitHub_GitObjectID!

  # The Repository the Git object belongs to
  repository: GitHub_Repository!

  # Details about the tag author.
  tagger: GitHub_GitActor

  # The Git object the tag points to.
  target: GitHub_GitObject!
}

# A team of users in an organization.
type GitHub_Team implements GitHub_Node & GitHub_Subscribable & GitHub_MemberStatusable {
  # A list of teams that are ancestors of this team.
  ancestors(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_TeamConnection!

  # A URL pointing to the team's avatar.
  avatarUrl(
    # The size in pixels of the resulting square image.
    size: Int = 400
  ): GitHub_URI

  # List of child teams belonging to this team
  childTeams(
    # Order for connection
    orderBy: GitHub_TeamOrder

    # User logins to filter by
    userLogins: [String!]

    # Whether to list immediate child teams or all descendant child teams.
    immediateOnly: Boolean = true

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_TeamConnection!

  # The slug corresponding to the organization and team.
  combinedSlug: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The description of the team.
  description: String

  # Find a team discussion by its number.
  discussion(
    # The sequence number of the discussion to find.
    number: Int!
  ): GitHub_TeamDiscussion

  # A list of team discussions.
  discussions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If provided, filters discussions according to whether or not they are pinned.
    isPinned: Boolean

    # Order for connection
    orderBy: GitHub_TeamDiscussionOrder
  ): GitHub_TeamDiscussionConnection!

  # The HTTP path for team discussions
  discussionsResourcePath: GitHub_URI!

  # The HTTP URL for team discussions
  discussionsUrl: GitHub_URI!

  # The HTTP path for editing this team
  editTeamResourcePath: GitHub_URI!

  # The HTTP URL for editing this team
  editTeamUrl: GitHub_URI!
  id: ID!

  # A list of pending invitations for users to this team
  invitations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_OrganizationInvitationConnection

  # Get the status messages members of this entity have set that are either public or visible only to the organization.
  memberStatuses(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for user statuses returned from the connection.
    orderBy: GitHub_UserStatusOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHub_UserStatusConnection!

  # A list of users who are members of this team.
  members(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The search string to look for.
    query: String

    # Filter by membership type
    membership: GitHub_TeamMembershipType = ALL

    # Filter by team member role
    role: GitHub_TeamMemberRole

    # Order for the connection.
    orderBy: GitHub_TeamMemberOrder
  ): GitHub_TeamMemberConnection!

  # The HTTP path for the team' members
  membersResourcePath: GitHub_URI!

  # The HTTP URL for the team' members
  membersUrl: GitHub_URI!

  # The name of the team.
  name: String!

  # The HTTP path creating a new team
  newTeamResourcePath: GitHub_URI!

  # The HTTP URL creating a new team
  newTeamUrl: GitHub_URI!

  # The organization that owns this team.
  organization: GitHub_Organization!

  # The parent team of the team.
  parentTeam: GitHub_Team

  # The level of privacy the team has.
  privacy: GitHub_TeamPrivacy!

  # A list of repositories this team has access to.
  repositories(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The search string to look for.
    query: String

    # Order for the connection.
    orderBy: GitHub_TeamRepositoryOrder
  ): GitHub_TeamRepositoryConnection!

  # The HTTP path for this team's repositories
  repositoriesResourcePath: GitHub_URI!

  # The HTTP URL for this team's repositories
  repositoriesUrl: GitHub_URI!

  # The HTTP path for this team
  resourcePath: GitHub_URI!

  # The slug corresponding to the team.
  slug: String!

  # The HTTP path for this team's teams
  teamsResourcePath: GitHub_URI!

  # The HTTP URL for this team's teams
  teamsUrl: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this team
  url: GitHub_URI!

  # Team is adminable by the viewer.
  viewerCanAdminister: Boolean!

  # Check if the viewer is able to change their subscription status for the repository.
  viewerCanSubscribe: Boolean!

  # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  viewerSubscription: GitHub_SubscriptionState
}

# Audit log entry for a team.add_member event.
type GitHub_TeamAddMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_TeamAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # Whether the team was mapped to an LDAP Group.
  isLdapMapped: Boolean

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The team associated with the action
  team: GitHub_Team

  # The name of the team
  teamName: String

  # The HTTP path for this team
  teamResourcePath: GitHub_URI

  # The HTTP URL for this team
  teamUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a team.add_repository event.
type GitHub_TeamAddRepositoryAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData & GitHub_TeamAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # Whether the team was mapped to an LDAP Group.
  isLdapMapped: Boolean

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The team associated with the action
  team: GitHub_Team

  # The name of the team
  teamName: String

  # The HTTP path for this team
  teamResourcePath: GitHub_URI

  # The HTTP URL for this team
  teamUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Metadata for an audit entry with action team.*
interface GitHub_TeamAuditEntryData {
  # The team associated with the action
  team: GitHub_Team

  # The name of the team
  teamName: String

  # The HTTP path for this team
  teamResourcePath: GitHub_URI

  # The HTTP URL for this team
  teamUrl: GitHub_URI
}

# Audit log entry for a team.change_parent_team event.
type GitHub_TeamChangeParentTeamAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_TeamAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # Whether the team was mapped to an LDAP Group.
  isLdapMapped: Boolean

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The new parent team.
  parentTeam: GitHub_Team

  # The name of the new parent team
  parentTeamName: String

  # The name of the former parent team
  parentTeamNameWas: String

  # The HTTP path for the parent team
  parentTeamResourcePath: GitHub_URI

  # The HTTP URL for the parent team
  parentTeamUrl: GitHub_URI

  # The former parent team.
  parentTeamWas: GitHub_Team

  # The HTTP path for the previous parent team
  parentTeamWasResourcePath: GitHub_URI

  # The HTTP URL for the previous parent team
  parentTeamWasUrl: GitHub_URI

  # The team associated with the action
  team: GitHub_Team

  # The name of the team
  teamName: String

  # The HTTP path for this team
  teamResourcePath: GitHub_URI

  # The HTTP URL for this team
  teamUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The connection type for Team.
type GitHub_TeamConnection {
  # A list of edges.
  edges: [GitHub_TeamEdge]

  # A list of nodes.
  nodes: [GitHub_Team]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# A team discussion.
type GitHub_TeamDiscussion implements GitHub_Node & GitHub_Comment & GitHub_Deletable & GitHub_Reactable & GitHub_Subscribable & GitHub_UniformResourceLocatable & GitHub_Updatable & GitHub_UpdatableComment {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the discussion's team.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # The body as Markdown.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body rendered to text.
  bodyText: String!

  # Identifies the discussion body hash.
  bodyVersion: String!

  # A list of comments on this discussion.
  comments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Order for connection
    orderBy: GitHub_TeamDiscussionCommentOrder

    # When provided, filters the connection such that results begin with the comment with this number.
    fromComment: Int
  ): GitHub_TeamDiscussionCommentConnection!

  # The HTTP path for discussion comments
  commentsResourcePath: GitHub_URI!

  # The HTTP URL for discussion comments
  commentsUrl: GitHub_URI!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The actor who edited the comment.
  editor: GitHub_Actor
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # Whether or not the discussion is pinned.
  isPinned: Boolean!

  # Whether or not the discussion is only visible to team members and org admins.
  isPrivate: Boolean!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # Identifies the discussion within its team.
  number: Int!

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The HTTP path for this discussion
  resourcePath: GitHub_URI!

  # The team that defines the context of this discussion.
  team: GitHub_Team!

  # The title of the discussion
  title: String!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this discussion
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!

  # Whether or not the current viewer can pin this discussion.
  viewerCanPin: Boolean!

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the viewer is able to change their subscription status for the repository.
  viewerCanSubscribe: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!

  # Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
  viewerSubscription: GitHub_SubscriptionState
}

# A comment on a team discussion.
type GitHub_TeamDiscussionComment implements GitHub_Node & GitHub_Comment & GitHub_Deletable & GitHub_Reactable & GitHub_UniformResourceLocatable & GitHub_Updatable & GitHub_UpdatableComment {
  # The actor who authored the comment.
  author: GitHub_Actor

  # Author's association with the comment's team.
  authorAssociation: GitHub_CommentAuthorAssociation!

  # The body as Markdown.
  body: String!

  # The body rendered to HTML.
  bodyHTML: GitHub_HTML!

  # The body rendered to text.
  bodyText: String!

  # The current version of the body content.
  bodyVersion: String!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Check if this comment was created via an email reply.
  createdViaEmail: Boolean!

  # Identifies the primary key from the database.
  databaseId: Int

  # The discussion this comment is about.
  discussion: GitHub_TeamDiscussion!

  # The actor who edited the comment.
  editor: GitHub_Actor
  id: ID!

  # Check if this comment was edited and includes an edit with the creation data
  includesCreatedEdit: Boolean!

  # The moment the editor made the last edit
  lastEditedAt: GitHub_DateTime

  # Identifies the comment number.
  number: Int!

  # Identifies when the comment was published at.
  publishedAt: GitHub_DateTime

  # A list of reactions grouped by content left on the subject.
  reactionGroups: [GitHub_ReactionGroup!]

  # A list of Reactions left on the Issue.
  reactions(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Allows filtering Reactions by emoji.
    content: GitHub_ReactionContent

    # Allows specifying the order in which reactions are returned.
    orderBy: GitHub_ReactionOrder
  ): GitHub_ReactionConnection!

  # The HTTP path for this comment
  resourcePath: GitHub_URI!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this comment
  url: GitHub_URI!

  # A list of edits to this content.
  userContentEdits(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_UserContentEditConnection

  # Check if the current viewer can delete this object.
  viewerCanDelete: Boolean!

  # Can user react to this subject
  viewerCanReact: Boolean!

  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!

  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!

  # Did the viewer author this comment.
  viewerDidAuthor: Boolean!
}

# The connection type for TeamDiscussionComment.
type GitHub_TeamDiscussionCommentConnection {
  # A list of edges.
  edges: [GitHub_TeamDiscussionCommentEdge]

  # A list of nodes.
  nodes: [GitHub_TeamDiscussionComment]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_TeamDiscussionCommentEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_TeamDiscussionComment
}

# Ways in which team discussion comment connections can be ordered.
input GitHub_TeamDiscussionCommentOrder {
  # The field by which to order nodes.
  field: GitHub_TeamDiscussionCommentOrderField!

  # The direction in which to order nodes.
  direction: GitHub_OrderDirection!
}

# Properties by which team discussion comment connections can be ordered.
enum GitHub_TeamDiscussionCommentOrderField {
  # Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering).
  NUMBER
}

# The connection type for TeamDiscussion.
type GitHub_TeamDiscussionConnection {
  # A list of edges.
  edges: [GitHub_TeamDiscussionEdge]

  # A list of nodes.
  nodes: [GitHub_TeamDiscussion]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_TeamDiscussionEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_TeamDiscussion
}

# Ways in which team discussion connections can be ordered.
input GitHub_TeamDiscussionOrder {
  # The field by which to order nodes.
  field: GitHub_TeamDiscussionOrderField!

  # The direction in which to order nodes.
  direction: GitHub_OrderDirection!
}

# Properties by which team discussion connections can be ordered.
enum GitHub_TeamDiscussionOrderField {
  # Allows chronological ordering of team discussions.
  CREATED_AT
}

# An edge in a connection.
type GitHub_TeamEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_Team
}

# The connection type for User.
type GitHub_TeamMemberConnection {
  # A list of edges.
  edges: [GitHub_TeamMemberEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a user who is a member of a team.
type GitHub_TeamMemberEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The HTTP path to the organization's member access page.
  memberAccessResourcePath: GitHub_URI!

  # The HTTP URL to the organization's member access page.
  memberAccessUrl: GitHub_URI!
  node: GitHub_User!

  # The role the member has on the team.
  role: GitHub_TeamMemberRole!
}

# Ordering options for team member connections
input GitHub_TeamMemberOrder {
  # The field to order team members by.
  field: GitHub_TeamMemberOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which team member connections can be ordered.
enum GitHub_TeamMemberOrderField {
  # Order team members by login
  LOGIN

  # Order team members by creation time
  CREATED_AT
}

# The possible team member roles; either 'maintainer' or 'member'.
enum GitHub_TeamMemberRole {
  # A team maintainer has permission to add and remove team members.
  MAINTAINER

  # A team member has no administrative permissions on the team.
  MEMBER
}

# Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL.
enum GitHub_TeamMembershipType {
  # Includes only immediate members of the team.
  IMMEDIATE

  # Includes only child team members for the team.
  CHILD_TEAM

  # Includes immediate and child team members for the team.
  ALL
}

# Ways in which team connections can be ordered.
input GitHub_TeamOrder {
  # The field in which to order nodes by.
  field: GitHub_TeamOrderField!

  # The direction in which to order nodes.
  direction: GitHub_OrderDirection!
}

# Properties by which team connections can be ordered.
enum GitHub_TeamOrderField {
  # Allows ordering a list of teams by name.
  NAME
}

# The possible team privacy values.
enum GitHub_TeamPrivacy {
  # A secret team can only be seen by its members.
  SECRET

  # A visible team can be seen and @mentioned by every member of the organization.
  VISIBLE
}

# Audit log entry for a team.remove_member event.
type GitHub_TeamRemoveMemberAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_TeamAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # Whether the team was mapped to an LDAP Group.
  isLdapMapped: Boolean

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The team associated with the action
  team: GitHub_Team

  # The name of the team
  teamName: String

  # The HTTP path for this team
  teamResourcePath: GitHub_URI

  # The HTTP URL for this team
  teamUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# Audit log entry for a team.remove_repository event.
type GitHub_TeamRemoveRepositoryAuditEntry implements GitHub_Node & GitHub_AuditEntry & GitHub_OrganizationAuditEntryData & GitHub_RepositoryAuditEntryData & GitHub_TeamAuditEntryData {
  # The action name
  action: String!

  # The user who initiated the action
  actor: GitHub_AuditEntryActor

  # The IP address of the actor
  actorIp: String

  # A readable representation of the actor's location
  actorLocation: GitHub_ActorLocation

  # The username of the user who initiated the action
  actorLogin: String

  # The HTTP path for the actor.
  actorResourcePath: GitHub_URI

  # The HTTP URL for the actor.
  actorUrl: GitHub_URI

  # The time the action was initiated
  createdAt: GitHub_PreciseDateTime!
  id: ID!

  # Whether the team was mapped to an LDAP Group.
  isLdapMapped: Boolean

  # The corresponding operation type for the action
  operationType: GitHub_OperationType

  # The Organization associated with the Audit Entry.
  organization: GitHub_Organization

  # The name of the Organization.
  organizationName: String

  # The HTTP path for the organization
  organizationResourcePath: GitHub_URI

  # The HTTP URL for the organization
  organizationUrl: GitHub_URI

  # The repository associated with the action
  repository: GitHub_Repository

  # The name of the repository
  repositoryName: String

  # The HTTP path for the repository
  repositoryResourcePath: GitHub_URI

  # The HTTP URL for the repository
  repositoryUrl: GitHub_URI

  # The team associated with the action
  team: GitHub_Team

  # The name of the team
  teamName: String

  # The HTTP path for this team
  teamResourcePath: GitHub_URI

  # The HTTP URL for this team
  teamUrl: GitHub_URI

  # The user affected by the action
  user: GitHub_User

  # For actions involving two users, the actor is the initiator and the user is the affected user.
  userLogin: String

  # The HTTP path for the user.
  userResourcePath: GitHub_URI

  # The HTTP URL for the user.
  userUrl: GitHub_URI
}

# The connection type for Repository.
type GitHub_TeamRepositoryConnection {
  # A list of edges.
  edges: [GitHub_TeamRepositoryEdge]

  # A list of nodes.
  nodes: [GitHub_Repository]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# Represents a team repository.
type GitHub_TeamRepositoryEdge {
  # A cursor for use in pagination.
  cursor: String!
  node: GitHub_Repository!

  # The permission level the team has on the repository
  #
  # **Upcoming Change on 2020-10-01 UTC**
  # **Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
  # **Reason:** This field may return additional values
  #
  permission: GitHub_RepositoryPermission!
}

# Ordering options for team repository connections
input GitHub_TeamRepositoryOrder {
  # The field to order repositories by.
  field: GitHub_TeamRepositoryOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which team repository connections can be ordered.
enum GitHub_TeamRepositoryOrderField {
  # Order repositories by creation time
  CREATED_AT

  # Order repositories by update time
  UPDATED_AT

  # Order repositories by push time
  PUSHED_AT

  # Order repositories by name
  NAME

  # Order repositories by permission
  PERMISSION

  # Order repositories by number of stargazers
  STARGAZERS
}

# The role of a user on a team.
enum GitHub_TeamRole {
  # User has admin rights on the team.
  ADMIN

  # User is a member of the team.
  MEMBER
}

# A text match within a search result.
type GitHub_TextMatch {
  # The specific text fragment within the property matched on.
  fragment: String!

  # Highlights within the matched fragment.
  highlights: [GitHub_TextMatchHighlight!]!

  # The property matched on.
  property: String!
}

# Represents a single highlight in a search result match.
type GitHub_TextMatchHighlight {
  # The indice in the fragment where the matched text begins.
  beginIndice: Int!

  # The indice in the fragment where the matched text ends.
  endIndice: Int!

  # The text matched.
  text: String!
}

# A topic aggregates entities that are related to a subject.
type GitHub_Topic implements GitHub_Node & GitHub_Starrable {
  id: ID!

  # The topic's name.
  name: String!

  # A list of related topics, including aliases of this topic, sorted with the most relevant
  # first. Returns up to 10 Topics.
  #
  relatedTopics(
    # How many topics to return.
    first: Int = 3
  ): [GitHub_Topic!]!

  # A list of users who have starred this starrable.
  stargazers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Order for connection
    orderBy: GitHub_StarOrder
  ): GitHub_StargazerConnection!

  # Returns a boolean indicating whether the viewing user has starred this starrable.
  viewerHasStarred: Boolean!
}

# Metadata for an audit entry with a topic.
interface GitHub_TopicAuditEntryData {
  # The name of the topic added to the repository
  topic: GitHub_Topic

  # The name of the topic added to the repository
  topicName: String
}

# Reason that the suggested topic is declined.
enum GitHub_TopicSuggestionDeclineReason {
  # The suggested topic is not relevant to the repository.
  NOT_RELEVANT

  # The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).
  TOO_SPECIFIC

  # The viewer does not like the suggested topic.
  PERSONAL_PREFERENCE

  # The suggested topic is too general for the repository.
  TOO_GENERAL
}

# Autogenerated input type of TransferIssue
input GitHub_TransferIssueInput {
  # The Node ID of the issue to be transferred
  issueId: ID!

  # The Node ID of the repository the issue should be transferred to
  repositoryId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of TransferIssue
type GitHub_TransferIssuePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The issue that was transferred
  issue: GitHub_Issue
}

# Represents a 'transferred' event on a given issue or pull request.
type GitHub_TransferredEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # The repository this came from
  fromRepository: GitHub_Repository
  id: ID!

  # Identifies the issue associated with the event.
  issue: GitHub_Issue!
}

# Represents a Git tree.
type GitHub_Tree implements GitHub_Node & GitHub_GitObject {
  # An abbreviated version of the Git object ID
  abbreviatedOid: String!

  # The HTTP path for this Git object
  commitResourcePath: GitHub_URI!

  # The HTTP URL for this Git object
  commitUrl: GitHub_URI!

  # A list of tree entries.
  entries: [GitHub_TreeEntry!]
  id: ID!

  # The Git object ID
  oid: GitHub_GitObjectID!

  # The Repository the Git object belongs to
  repository: GitHub_Repository!
}

# Represents a Git tree entry.
type GitHub_TreeEntry {
  # Entry file mode.
  mode: Int!

  # Entry file name.
  name: String!

  # Entry file object.
  object: GitHub_GitObject

  # Entry file Git object ID.
  oid: GitHub_GitObjectID!

  # The Repository the tree entry belongs to
  repository: GitHub_Repository!

  # If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
  submodule: GitHub_Submodule

  # Entry file type.
  type: String!
}

# Autogenerated input type of UnarchiveRepository
input GitHub_UnarchiveRepositoryInput {
  # The ID of the repository to unarchive.
  repositoryId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UnarchiveRepository
type GitHub_UnarchiveRepositoryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The repository that was unarchived.
  repository: GitHub_Repository
}

# Represents an 'unassigned' event on any assignable object.
type GitHub_UnassignedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the assignable associated with the event.
  assignable: GitHub_Assignable!

  # Identifies the user or mannequin that was unassigned.
  assignee: GitHub_Assignee

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the subject (user) who was unassigned.
  user: GitHub_User @deprecated(reason: "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.")
}

# Autogenerated input type of UnfollowUser
input GitHub_UnfollowUserInput {
  # ID of the user to unfollow.
  userId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UnfollowUser
type GitHub_UnfollowUserPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The user that was unfollowed.
  user: GitHub_User
}

# Represents a type that can be retrieved by a URL.
interface GitHub_UniformResourceLocatable {
  # The HTML path to this resource.
  resourcePath: GitHub_URI!

  # The URL to this resource.
  url: GitHub_URI!
}

# Represents an unknown signature on a Commit or Tag.
type GitHub_UnknownSignature implements GitHub_GitSignature {
  # Email used to sign this object.
  email: String!

  # True if the signature is valid and verified by GitHub.
  isValid: Boolean!

  # Payload for GPG signing object. Raw ODB object without the signature header.
  payload: String!

  # ASCII-armored signature header from object.
  signature: String!

  # GitHub user corresponding to the email signing this commit.
  signer: GitHub_User

  # The state of this signature. `VALID` if signature is valid and verified by
  # GitHub, otherwise represents reason why signature is considered invalid.
  state: GitHub_GitSignatureState!

  # True if the signature was made with GitHub's signing key.
  wasSignedByGitHub: Boolean!
}

# Represents an 'unlabeled' event on a given issue or pull request.
type GitHub_UnlabeledEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the label associated with the 'unlabeled' event.
  label: GitHub_Label!

  # Identifies the `Labelable` associated with the event.
  labelable: GitHub_Labelable!
}

# Autogenerated input type of UnlinkRepositoryFromProject
input GitHub_UnlinkRepositoryFromProjectInput {
  # The ID of the Project linked to the Repository.
  projectId: ID!

  # The ID of the Repository linked to the Project.
  repositoryId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UnlinkRepositoryFromProject
type GitHub_UnlinkRepositoryFromProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The linked Project.
  project: GitHub_Project

  # The linked Repository.
  repository: GitHub_Repository
}

# Represents an 'unlocked' event on a given issue or pull request.
type GitHub_UnlockedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Object that was unlocked.
  lockable: GitHub_Lockable!
}

# Autogenerated input type of UnlockLockable
input GitHub_UnlockLockableInput {
  # ID of the issue or pull request to be unlocked.
  lockableId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UnlockLockable
type GitHub_UnlockLockablePayload {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The item that was unlocked.
  unlockedRecord: GitHub_Lockable
}

# Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
type GitHub_UnmarkedAsDuplicateEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!
}

# Autogenerated input type of UnmarkIssueAsDuplicate
input GitHub_UnmarkIssueAsDuplicateInput {
  # ID of the issue or pull request currently marked as a duplicate.
  duplicateId: ID!

  # ID of the issue or pull request currently considered canonical/authoritative/original.
  canonicalId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UnmarkIssueAsDuplicate
type GitHub_UnmarkIssueAsDuplicatePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The issue or pull request that was marked as a duplicate.
  duplicate: GitHub_IssueOrPullRequest
}

# Autogenerated input type of UnminimizeComment
input GitHub_UnminimizeCommentInput {
  # The Node ID of the subject to modify.
  subjectId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UnminimizeComment
type GitHub_UnminimizeCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The comment that was unminimized.
  unminimizedComment: GitHub_Minimizable
}

# Represents an 'unpinned' event on a given issue or pull request.
type GitHub_UnpinnedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Identifies the issue associated with the event.
  issue: GitHub_Issue!
}

# Autogenerated input type of UnresolveReviewThread
input GitHub_UnresolveReviewThreadInput {
  # The ID of the thread to unresolve
  threadId: ID!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UnresolveReviewThread
type GitHub_UnresolveReviewThreadPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The thread to resolve.
  thread: GitHub_PullRequestReviewThread
}

# Represents an 'unsubscribed' event on a given `Subscribable`.
type GitHub_UnsubscribedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # Object referenced by event.
  subscribable: GitHub_Subscribable!
}

# Entities that can be updated.
interface GitHub_Updatable {
  # Check if the current viewer can update this object.
  viewerCanUpdate: Boolean!
}

# Comments that can be updated.
interface GitHub_UpdatableComment {
  # Reasons why the current viewer can not update this comment.
  viewerCannotUpdateReasons: [GitHub_CommentCannotUpdateReason!]!
}

# Autogenerated input type of UpdateBranchProtectionRule
input GitHub_UpdateBranchProtectionRuleInput {
  # The global relay id of the branch protection rule to be updated.
  branchProtectionRuleId: ID!

  # The glob-like pattern used to determine matching branches.
  pattern: String

  # Are approving reviews required to update matching branches.
  requiresApprovingReviews: Boolean

  # Number of approving reviews required to update matching branches.
  requiredApprovingReviewCount: Int

  # Are commits required to be signed.
  requiresCommitSignatures: Boolean

  # Can admins overwrite branch protection.
  isAdminEnforced: Boolean

  # Are status checks required to update matching branches.
  requiresStatusChecks: Boolean

  # Are branches required to be up to date before merging.
  requiresStrictStatusChecks: Boolean

  # Are reviews from code owners required to update matching branches.
  requiresCodeOwnerReviews: Boolean

  # Will new commits pushed to matching branches dismiss pull request review approvals.
  dismissesStaleReviews: Boolean

  # Is dismissal of pull request reviews restricted.
  restrictsReviewDismissals: Boolean

  # A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches.
  reviewDismissalActorIds: [ID!]

  # Is pushing to matching branches restricted.
  restrictsPushes: Boolean

  # A list of User, Team or App IDs allowed to push to matching branches.
  pushActorIds: [ID!]

  # List of required status check contexts that must pass for commits to be accepted to matching branches.
  requiredStatusCheckContexts: [String!]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateBranchProtectionRule
type GitHub_UpdateBranchProtectionRulePayload {
  # The newly created BranchProtectionRule.
  branchProtectionRule: GitHub_BranchProtectionRule

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated input type of UpdateEnterpriseActionExecutionCapabilitySetting
input GitHub_UpdateEnterpriseActionExecutionCapabilitySettingInput {
  # The ID of the enterprise on which to set the members can create repositories setting.
  enterpriseId: ID!

  # The value for the action execution capability setting on the enterprise.
  capability: GitHub_ActionExecutionCapabilitySetting!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseActionExecutionCapabilitySetting
type GitHub_UpdateEnterpriseActionExecutionCapabilitySettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated action execution capability setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the action execution capability setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseAdministratorRole
input GitHub_UpdateEnterpriseAdministratorRoleInput {
  # The ID of the Enterprise which the admin belongs to.
  enterpriseId: ID!

  # The login of a administrator whose role is being changed.
  login: String!

  # The new role for the Enterprise administrator.
  role: GitHub_EnterpriseAdministratorRole!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseAdministratorRole
type GitHub_UpdateEnterpriseAdministratorRolePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # A message confirming the result of changing the administrator's role.
  message: String
}

# Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
input GitHub_UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  # The ID of the enterprise on which to set the allow private repository forking setting.
  enterpriseId: ID!

  # The value for the allow private repository forking setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting
type GitHub_UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated allow private repository forking setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the allow private repository forking setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting
input GitHub_UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  # The ID of the enterprise on which to set the default repository permission setting.
  enterpriseId: ID!

  # The value for the default repository permission setting on the enterprise.
  settingValue: GitHub_EnterpriseDefaultRepositoryPermissionSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting
type GitHub_UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated default repository permission setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the default repository permission setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
input GitHub_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  # The ID of the enterprise on which to set the members can change repository visibility setting.
  enterpriseId: ID!

  # The value for the members can change repository visibility setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting
type GitHub_UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can change repository visibility setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can change repository visibility setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
input GitHub_UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  # The ID of the enterprise on which to set the members can create repositories setting.
  enterpriseId: ID!

  # Value for the members can create repositories setting on the enterprise. This
  # or the granular public/private/internal allowed fields (but not both) must be provided.
  settingValue: GitHub_EnterpriseMembersCanCreateRepositoriesSettingValue

  # When false, allow member organizations to set their own repository creation member privileges.
  membersCanCreateRepositoriesPolicyEnabled: Boolean

  # Allow members to create public repositories. Defaults to current value.
  membersCanCreatePublicRepositories: Boolean

  # Allow members to create private repositories. Defaults to current value.
  membersCanCreatePrivateRepositories: Boolean

  # Allow members to create internal repositories. Defaults to current value.
  membersCanCreateInternalRepositories: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting
type GitHub_UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can create repositories setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can create repositories setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting
input GitHub_UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  # The ID of the enterprise on which to set the members can delete issues setting.
  enterpriseId: ID!

  # The value for the members can delete issues setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting
type GitHub_UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can delete issues setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can delete issues setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
input GitHub_UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  # The ID of the enterprise on which to set the members can delete repositories setting.
  enterpriseId: ID!

  # The value for the members can delete repositories setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting
type GitHub_UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can delete repositories setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can delete repositories setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
input GitHub_UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  # The ID of the enterprise on which to set the members can invite collaborators setting.
  enterpriseId: ID!

  # The value for the members can invite collaborators setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting
type GitHub_UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can invite collaborators setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can invite collaborators setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting
input GitHub_UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  # The ID of the enterprise on which to set the members can make purchases setting.
  enterpriseId: ID!

  # The value for the members can make purchases setting on the enterprise.
  settingValue: GitHub_EnterpriseMembersCanMakePurchasesSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting
type GitHub_UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can make purchases setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can make purchases setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
input GitHub_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  # The ID of the enterprise on which to set the members can update protected branches setting.
  enterpriseId: ID!

  # The value for the members can update protected branches setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting
type GitHub_UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can update protected branches setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can update protected branches setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
input GitHub_UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  # The ID of the enterprise on which to set the members can view dependency insights setting.
  enterpriseId: ID!

  # The value for the members can view dependency insights setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting
type GitHub_UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated members can view dependency insights setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the members can view dependency insights setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting
input GitHub_UpdateEnterpriseOrganizationProjectsSettingInput {
  # The ID of the enterprise on which to set the organization projects setting.
  enterpriseId: ID!

  # The value for the organization projects setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting
type GitHub_UpdateEnterpriseOrganizationProjectsSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated organization projects setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the organization projects setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseProfile
input GitHub_UpdateEnterpriseProfileInput {
  # The Enterprise ID to update.
  enterpriseId: ID!

  # The name of the enterprise.
  name: String

  # The description of the enterprise.
  description: String

  # The URL of the enterprise's website.
  websiteUrl: String

  # The location of the enterprise.
  location: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseProfile
type GitHub_UpdateEnterpriseProfilePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated enterprise.
  enterprise: GitHub_Enterprise
}

# Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting
input GitHub_UpdateEnterpriseRepositoryProjectsSettingInput {
  # The ID of the enterprise on which to set the repository projects setting.
  enterpriseId: ID!

  # The value for the repository projects setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting
type GitHub_UpdateEnterpriseRepositoryProjectsSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated repository projects setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the repository projects setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting
input GitHub_UpdateEnterpriseTeamDiscussionsSettingInput {
  # The ID of the enterprise on which to set the team discussions setting.
  enterpriseId: ID!

  # The value for the team discussions setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledDisabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting
type GitHub_UpdateEnterpriseTeamDiscussionsSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated team discussions setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the team discussions setting.
  message: String
}

# Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
input GitHub_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  # The ID of the enterprise on which to set the two factor authentication required setting.
  enterpriseId: ID!

  # The value for the two factor authentication required setting on the enterprise.
  settingValue: GitHub_EnterpriseEnabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting
type GitHub_UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The enterprise with the updated two factor authentication required setting.
  enterprise: GitHub_Enterprise

  # A message confirming the result of updating the two factor authentication required setting.
  message: String
}

# Autogenerated input type of UpdateIpAllowListEnabledSetting
input GitHub_UpdateIpAllowListEnabledSettingInput {
  # The ID of the owner on which to set the IP allow list enabled setting.
  ownerId: ID!

  # The value for the IP allow list enabled setting.
  settingValue: GitHub_IpAllowListEnabledSettingValue!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateIpAllowListEnabledSetting
type GitHub_UpdateIpAllowListEnabledSettingPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The IP allow list owner on which the setting was updated.
  owner: GitHub_IpAllowListOwner
}

# Autogenerated input type of UpdateIpAllowListEntry
input GitHub_UpdateIpAllowListEntryInput {
  # The ID of the IP allow list entry to update.
  ipAllowListEntryId: ID!

  # An IP address or range of addresses in CIDR notation.
  allowListValue: String!

  # An optional name for the IP allow list entry.
  name: String

  # Whether the IP allow list entry is active when an IP allow list is enabled.
  isActive: Boolean!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateIpAllowListEntry
type GitHub_UpdateIpAllowListEntryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The IP allow list entry that was updated.
  ipAllowListEntry: GitHub_IpAllowListEntry
}

# Autogenerated input type of UpdateIssueComment
input GitHub_UpdateIssueCommentInput {
  # The ID of the IssueComment to modify.
  id: ID!

  # The updated text of the comment.
  body: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateIssueComment
type GitHub_UpdateIssueCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated comment.
  issueComment: GitHub_IssueComment
}

# Autogenerated input type of UpdateIssue
input GitHub_UpdateIssueInput {
  # The ID of the Issue to modify.
  id: ID!

  # The title for the issue.
  title: String

  # The body for the issue description.
  body: String

  # An array of Node IDs of users for this issue.
  assigneeIds: [ID!]

  # The Node ID of the milestone for this issue.
  milestoneId: ID

  # An array of Node IDs of labels for this issue.
  labelIds: [ID!]

  # The desired issue state.
  state: GitHub_IssueState

  # An array of Node IDs for projects associated with this issue.
  projectIds: [ID!]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateIssue
type GitHub_UpdateIssuePayload {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The issue.
  issue: GitHub_Issue
}

# Autogenerated input type of UpdateProjectCard
input GitHub_UpdateProjectCardInput {
  # The ProjectCard ID to update.
  projectCardId: ID!

  # Whether or not the ProjectCard should be archived
  isArchived: Boolean

  # The note of ProjectCard.
  note: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateProjectCard
type GitHub_UpdateProjectCardPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated ProjectCard.
  projectCard: GitHub_ProjectCard
}

# Autogenerated input type of UpdateProjectColumn
input GitHub_UpdateProjectColumnInput {
  # The ProjectColumn ID to update.
  projectColumnId: ID!

  # The name of project column.
  name: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateProjectColumn
type GitHub_UpdateProjectColumnPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated project column.
  projectColumn: GitHub_ProjectColumn
}

# Autogenerated input type of UpdateProject
input GitHub_UpdateProjectInput {
  # The Project ID to update.
  projectId: ID!

  # The name of project.
  name: String

  # The description of project.
  body: String

  # Whether the project is open or closed.
  state: GitHub_ProjectState

  # Whether the project is public or not.
  public: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateProject
type GitHub_UpdateProjectPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated project.
  project: GitHub_Project
}

# Autogenerated input type of UpdatePullRequest
input GitHub_UpdatePullRequestInput {
  # The Node ID of the pull request.
  pullRequestId: ID!

  # The name of the branch you want your changes pulled into. This should be an existing branch
  # on the current repository.
  #
  baseRefName: String

  # The title of the pull request.
  title: String

  # The contents of the pull request.
  body: String

  # The target state of the pull request.
  state: GitHub_PullRequestUpdateState

  # Indicates whether maintainers can modify the pull request.
  maintainerCanModify: Boolean

  # An array of Node IDs of users for this pull request.
  assigneeIds: [ID!]

  # The Node ID of the milestone for this pull request.
  milestoneId: ID

  # An array of Node IDs of labels for this pull request.
  labelIds: [ID!]

  # An array of Node IDs for projects associated with this pull request.
  projectIds: [ID!]

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdatePullRequest
type GitHub_UpdatePullRequestPayload {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated pull request.
  pullRequest: GitHub_PullRequest
}

# Autogenerated input type of UpdatePullRequestReviewComment
input GitHub_UpdatePullRequestReviewCommentInput {
  # The Node ID of the comment to modify.
  pullRequestReviewCommentId: ID!

  # The text of the comment.
  body: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdatePullRequestReviewComment
type GitHub_UpdatePullRequestReviewCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated comment.
  pullRequestReviewComment: GitHub_PullRequestReviewComment
}

# Autogenerated input type of UpdatePullRequestReview
input GitHub_UpdatePullRequestReviewInput {
  # The Node ID of the pull request review to modify.
  pullRequestReviewId: ID!

  # The contents of the pull request review body.
  body: String!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdatePullRequestReview
type GitHub_UpdatePullRequestReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated pull request review.
  pullRequestReview: GitHub_PullRequestReview
}

# Autogenerated input type of UpdateRef
input GitHub_UpdateRefInput {
  # The Node ID of the Ref to be updated.
  refId: ID!

  # The GitObjectID that the Ref shall be updated to target.
  oid: GitHub_GitObjectID!

  # Permit updates of branch Refs that are not fast-forwards?
  force: Boolean = false

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateRef
type GitHub_UpdateRefPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated Ref.
  ref: GitHub_Ref
}

# Autogenerated input type of UpdateRepository
input GitHub_UpdateRepositoryInput {
  # The ID of the repository to update.
  repositoryId: ID!

  # The new name of the repository.
  name: String

  # A new description for the repository. Pass an empty string to erase the existing description.
  description: String

  # Whether this repository should be marked as a template such that anyone who
  # can access it can create new repositories with the same files and directory structure.
  template: Boolean

  # The URL for a web page about this repository. Pass an empty string to erase the existing URL.
  homepageUrl: GitHub_URI

  # Indicates if the repository should have the wiki feature enabled.
  hasWikiEnabled: Boolean

  # Indicates if the repository should have the issues feature enabled.
  hasIssuesEnabled: Boolean

  # Indicates if the repository should have the project boards feature enabled.
  hasProjectsEnabled: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateRepository
type GitHub_UpdateRepositoryPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated repository.
  repository: GitHub_Repository
}

# Autogenerated input type of UpdateSubscription
input GitHub_UpdateSubscriptionInput {
  # The Node ID of the subscribable object to modify.
  subscribableId: ID!

  # The new state of the subscription.
  state: GitHub_SubscriptionState!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateSubscription
type GitHub_UpdateSubscriptionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The input subscribable entity.
  subscribable: GitHub_Subscribable
}

# Autogenerated input type of UpdateTeamDiscussionComment
input GitHub_UpdateTeamDiscussionCommentInput {
  # The ID of the comment to modify.
  id: ID!

  # The updated text of the comment.
  body: String!

  # The current version of the body content.
  bodyVersion: String

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateTeamDiscussionComment
type GitHub_UpdateTeamDiscussionCommentPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated comment.
  teamDiscussionComment: GitHub_TeamDiscussionComment
}

# Autogenerated input type of UpdateTeamDiscussion
input GitHub_UpdateTeamDiscussionInput {
  # The Node ID of the discussion to modify.
  id: ID!

  # The updated title of the discussion.
  title: String

  # The updated text of the discussion.
  body: String

  # The current version of the body content. If provided, this update operation
  # will be rejected if the given version does not match the latest version on the server.
  bodyVersion: String

  # If provided, sets the pinned state of the updated discussion.
  pinned: Boolean

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateTeamDiscussion
type GitHub_UpdateTeamDiscussionPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # The updated discussion.
  teamDiscussion: GitHub_TeamDiscussion
}

# Autogenerated input type of UpdateTopics
input GitHub_UpdateTopicsInput {
  # The Node ID of the repository.
  repositoryId: ID!

  # An array of topic names.
  topicNames: [String!]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateTopics
type GitHub_UpdateTopicsPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String

  # Names of the provided topics that are not valid.
  invalidTopicNames: [String!]

  # The updated repository.
  repository: GitHub_Repository
}

# An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string.
scalar GitHub_URI

# A user is an individual's account on GitHub that owns repositories and can make new content.
type GitHub_User implements GitHub_Node & GitHub_Actor & GitHub_PackageOwner & GitHub_ProjectOwner & GitHub_RepositoryOwner & GitHub_UniformResourceLocatable & GitHub_ProfileOwner & GitHub_Sponsorable {
  # Determine if this repository owner has any items that can be pinned to their profile.
  anyPinnableItems(
    # Filter to only a particular kind of pinnable item.
    type: GitHub_PinnableItemType
  ): Boolean!

  # A URL pointing to the user's public avatar.
  avatarUrl(
    # The size of the resulting square image.
    size: Int
  ): GitHub_URI!

  # The user's public profile bio.
  bio: String

  # The user's public profile bio as HTML.
  bioHTML: GitHub_HTML!

  # A list of commit comments made by this user.
  commitComments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_CommitCommentConnection!

  # The user's public profile company.
  company: String

  # The user's public profile company as HTML.
  companyHTML: GitHub_HTML!

  # The collection of contributions this user has made to different repositories.
  contributionsCollection(
    # The ID of the organization used to filter contributions.
    organizationID: ID

    # Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.
    from: GitHub_DateTime

    # Only contributions made before and up to and including this time will be
    # counted. If omitted, defaults to the current time.
    to: GitHub_DateTime
  ): GitHub_ContributionsCollection!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the primary key from the database.
  databaseId: Int

  # The user's publicly visible profile email.
  email: String!

  # A list of users the given user is followed by.
  followers(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_FollowerConnection!

  # A list of users the given user is following.
  following(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_FollowingConnection!

  # Find gist by repo name.
  gist(
    # The gist name to find.
    name: String!
  ): GitHub_Gist

  # A list of gist comments made by this user.
  gistComments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_GistCommentConnection!

  # A list of the Gists the user has created.
  gists(
    # Filters Gists according to privacy.
    privacy: GitHub_GistPrivacy

    # Ordering options for gists returned from the connection
    orderBy: GitHub_GistOrder

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_GistConnection!

  # The hovercard information for this user in a given context
  hovercard(
    # The ID of the subject to get the hovercard in the context of
    primarySubjectId: ID
  ): GitHub_Hovercard!
  id: ID!

  # Whether or not this user is a participant in the GitHub Security Bug Bounty.
  isBountyHunter: Boolean!

  # Whether or not this user is a participant in the GitHub Campus Experts Program.
  isCampusExpert: Boolean!

  # Whether or not this user is a GitHub Developer Program member.
  isDeveloperProgramMember: Boolean!

  # Whether or not this user is a GitHub employee.
  isEmployee: Boolean!

  # Whether or not the user has marked themselves as for hire.
  isHireable: Boolean!

  # Whether or not this user is a site administrator.
  isSiteAdmin: Boolean!

  # Whether or not this user is the viewing user.
  isViewer: Boolean!

  # A list of issue comments made by this user.
  issueComments(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueCommentConnection!

  # A list of issues associated with this user.
  issues(
    # Ordering options for issues returned from the connection.
    orderBy: GitHub_IssueOrder

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # A list of states to filter the issues by.
    states: [GitHub_IssueState!]

    # Filtering options for issues returned from the connection.
    filterBy: GitHub_IssueFilters

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_IssueConnection!

  # Showcases a selection of repositories and gists that the profile owner has
  # either curated or that have been selected automatically based on popularity.
  itemShowcase: GitHub_ProfileItemShowcase!

  # The user's public profile location.
  location: String

  # The username used to login.
  login: String!

  # The user's public profile name.
  name: String

  # Find an organization by its login that the user belongs to.
  organization(
    # The login of the organization to find.
    login: String!
  ): GitHub_Organization

  # Verified email addresses that match verified domains for a specified organization the user is a member of.
  organizationVerifiedDomainEmails(
    # The login of the organization to match verified domains from.
    login: String!
  ): [String!]!

  # A list of organizations the user belongs to.
  organizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_OrganizationConnection!

  # A list of packages under the owner.
  packages(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Find packages by their names.
    names: [String]

    # Find packages in a repository by ID.
    repositoryId: ID

    # Filter registry package by type.
    packageType: GitHub_PackageType

    # Ordering of the returned packages.
    orderBy: GitHub_PackageOrder = {field: CREATED_AT, direction: DESC}
  ): GitHub_PackageConnection!

  # A list of repositories and gists this profile owner can pin to their profile.
  pinnableItems(
    # Filter the types of pinnable items that are returned.
    types: [GitHub_PinnableItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PinnableItemConnection!

  # A list of repositories and gists this profile owner has pinned to their profile
  pinnedItems(
    # Filter the types of pinned items that are returned.
    types: [GitHub_PinnableItemType!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PinnableItemConnection!

  # Returns how many more items this profile owner can pin to their profile.
  pinnedItemsRemaining: Int!

  # Find project by number.
  project(
    # The project number to find.
    number: Int!
  ): GitHub_Project

  # A list of projects under the owner.
  projects(
    # Ordering options for projects returned from the connection
    orderBy: GitHub_ProjectOrder

    # Query to search projects by, currently only searching by name.
    search: String

    # A list of states to filter the projects by.
    states: [GitHub_ProjectState!]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_ProjectConnection!

  # The HTTP path listing user's projects
  projectsResourcePath: GitHub_URI!

  # The HTTP URL listing user's projects
  projectsUrl: GitHub_URI!

  # A list of public keys associated with this user.
  publicKeys(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PublicKeyConnection!

  # A list of pull requests associated with this user.
  pullRequests(
    # A list of states to filter the pull requests by.
    states: [GitHub_PullRequestState!]

    # A list of label names to filter the pull requests by.
    labels: [String!]

    # The head ref name to filter the pull requests by.
    headRefName: String

    # The base ref name to filter the pull requests by.
    baseRefName: String

    # Ordering options for pull requests returned from the connection.
    orderBy: GitHub_IssueOrder

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_PullRequestConnection!

  # A list of repositories that the user owns.
  repositories(
    # If non-null, filters repositories according to privacy
    privacy: GitHub_RepositoryPrivacy

    # Ordering options for repositories returned from the connection
    orderBy: GitHub_RepositoryOrder

    # Array of viewer's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # current viewer owns.
    affiliations: [GitHub_RepositoryAffiliation]

    # Array of owner's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # organization or user being viewed owns.
    ownerAffiliations: [GitHub_RepositoryAffiliation] = [OWNER, COLLABORATOR]

    # If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # If non-null, filters repositories according to whether they are forks of another repository
    isFork: Boolean
  ): GitHub_RepositoryConnection!

  # A list of repositories that the user recently contributed to.
  repositoriesContributedTo(
    # If non-null, filters repositories according to privacy
    privacy: GitHub_RepositoryPrivacy

    # Ordering options for repositories returned from the connection
    orderBy: GitHub_RepositoryOrder

    # If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean

    # If true, include user repositories
    includeUserRepositories: Boolean

    # If non-null, include only the specified types of contributions. The
    # GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]
    contributionTypes: [GitHub_RepositoryContributionType]

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RepositoryConnection!

  # Find Repository.
  repository(
    # Name of Repository to find.
    name: String!
  ): GitHub_Repository

  # The HTTP path for this user
  resourcePath: GitHub_URI!

  # Replies this user has saved
  savedReplies(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # The field to order saved replies by.
    orderBy: GitHub_SavedReplyOrder = {field: UPDATED_AT, direction: DESC}
  ): GitHub_SavedReplyConnection

  # The GitHub Sponsors listing for this user.
  sponsorsListing: GitHub_SponsorsListing

  # This object's sponsorships as the maintainer.
  sponsorshipsAsMaintainer(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Whether or not to include private sponsorships in the result set
    includePrivate: Boolean = false

    # Ordering options for sponsorships returned from this connection. If left
    # blank, the sponsorships will be ordered based on relevancy to the viewer.
    orderBy: GitHub_SponsorshipOrder
  ): GitHub_SponsorshipConnection!

  # This object's sponsorships as the sponsor.
  sponsorshipsAsSponsor(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for sponsorships returned from this connection. If left
    # blank, the sponsorships will be ordered based on relevancy to the viewer.
    orderBy: GitHub_SponsorshipOrder
  ): GitHub_SponsorshipConnection!

  # Repositories the user has starred.
  starredRepositories(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Filters starred repositories to only return repositories owned by the viewer.
    ownedByViewer: Boolean

    # Order for connection
    orderBy: GitHub_StarOrder
  ): GitHub_StarredRepositoryConnection!

  # The user's description of what they're currently doing.
  status: GitHub_UserStatus

  # Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
  #
  topRepositories(
    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    # Ordering options for repositories returned from the connection
    orderBy: GitHub_RepositoryOrder!

    # How far back in time to fetch contributed repositories
    since: GitHub_DateTime
  ): GitHub_RepositoryConnection!

  # The user's Twitter username.
  twitterUsername: String

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The HTTP URL for this user
  url: GitHub_URI!

  # Can the viewer pin repositories and gists to the profile?
  viewerCanChangePinnedItems: Boolean!

  # Can the current viewer create new projects on this owner.
  viewerCanCreateProjects: Boolean!

  # Whether or not the viewer is able to follow the user.
  viewerCanFollow: Boolean!

  # Whether or not this user is followed by the viewer.
  viewerIsFollowing: Boolean!

  # A list of repositories the given user is watching.
  watching(
    # If non-null, filters repositories according to privacy
    privacy: GitHub_RepositoryPrivacy

    # Ordering options for repositories returned from the connection
    orderBy: GitHub_RepositoryOrder

    # Affiliation options for repositories returned from the connection. If none
    # specified, the results will include repositories for which the current
    # viewer is an owner or collaborator, or member.
    affiliations: [GitHub_RepositoryAffiliation]

    # Array of owner's affiliation options for repositories returned from the
    # connection. For example, OWNER will include only repositories that the
    # organization or user being viewed owns.
    ownerAffiliations: [GitHub_RepositoryAffiliation] = [OWNER, COLLABORATOR]

    # If non-null, filters repositories according to whether they have been locked
    isLocked: Boolean

    # Returns the elements in the list that come after the specified cursor.
    after: String

    # Returns the elements in the list that come before the specified cursor.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): GitHub_RepositoryConnection!

  # A URL pointing to the user's public website/blog.
  websiteUrl: GitHub_URI
}

# The possible durations that a user can be blocked for.
enum GitHub_UserBlockDuration {
  # The user was blocked for 1 day
  ONE_DAY

  # The user was blocked for 3 days
  THREE_DAYS

  # The user was blocked for 7 days
  ONE_WEEK

  # The user was blocked for 30 days
  ONE_MONTH

  # The user was blocked permanently
  PERMANENT
}

# Represents a 'user_blocked' event on a given user.
type GitHub_UserBlockedEvent implements GitHub_Node {
  # Identifies the actor who performed the event.
  actor: GitHub_Actor

  # Number of days that the user was blocked for.
  blockDuration: GitHub_UserBlockDuration!

  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!
  id: ID!

  # The user who was blocked.
  subject: GitHub_User
}

# The connection type for User.
type GitHub_UserConnection {
  # A list of edges.
  edges: [GitHub_UserEdge]

  # A list of nodes.
  nodes: [GitHub_User]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edit on user content
type GitHub_UserContentEdit implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # Identifies the date and time when the object was deleted.
  deletedAt: GitHub_DateTime

  # The actor who deleted this content
  deletedBy: GitHub_Actor

  # A summary of the changes for this edit
  diff: String

  # When this content was edited
  editedAt: GitHub_DateTime!

  # The actor who edited this content
  editor: GitHub_Actor
  id: ID!

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!
}

# A list of edits to content.
type GitHub_UserContentEditConnection {
  # A list of edges.
  edges: [GitHub_UserContentEditEdge]

  # A list of nodes.
  nodes: [GitHub_UserContentEdit]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_UserContentEditEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_UserContentEdit
}

# Represents a user.
type GitHub_UserEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_User
}

# The user's description of what they're currently doing.
type GitHub_UserStatus implements GitHub_Node {
  # Identifies the date and time when the object was created.
  createdAt: GitHub_DateTime!

  # An emoji summarizing the user's status.
  emoji: String

  # The status emoji as HTML.
  emojiHTML: GitHub_HTML

  # If set, the status will not be shown after this date.
  expiresAt: GitHub_DateTime

  # ID of the object.
  id: ID!

  # Whether this status indicates the user is not fully available on GitHub.
  indicatesLimitedAvailability: Boolean!

  # A brief message describing what the user is doing.
  message: String

  # The organization whose members can see this status. If null, this status is publicly visible.
  organization: GitHub_Organization

  # Identifies the date and time when the object was last updated.
  updatedAt: GitHub_DateTime!

  # The user who has this status.
  user: GitHub_User!
}

# The connection type for UserStatus.
type GitHub_UserStatusConnection {
  # A list of edges.
  edges: [GitHub_UserStatusEdge]

  # A list of nodes.
  nodes: [GitHub_UserStatus]

  # Information to aid in pagination.
  pageInfo: GitHub_PageInfo!

  # Identifies the total count of items in the connection.
  totalCount: Int!
}

# An edge in a connection.
type GitHub_UserStatusEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: GitHub_UserStatus
}

# Ordering options for user status connections.
input GitHub_UserStatusOrder {
  # The field to order user statuses by.
  field: GitHub_UserStatusOrderField!

  # The ordering direction.
  direction: GitHub_OrderDirection!
}

# Properties by which user status connections can be ordered.
enum GitHub_UserStatusOrderField {
  # Order user statuses by when they were updated.
  UPDATED_AT
}

# A hovercard context with a message describing how the viewer is related.
type GitHub_ViewerHovercardContext implements GitHub_HovercardContext {
  # A string describing this context
  message: String!

  # An octicon to accompany this context
  octicon: String!

  # Identifies the user who is related to this context.
  viewer: GitHub_User!
}

# A valid x509 certificate string
scalar GitHub_X509Certificate

type GithubUser {
  name: String
  avatarUrl: String
  login: String!
  url: String!
}

input GithubUserFilterInput {
  name: StringQueryOperatorInput
  avatarUrl: StringQueryOperatorInput
  login: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

input GithubUserFilterListInput {
  elemMatch: GithubUserFilterInput
}

type GraphQLSource implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  typeName: String
  fieldName: String
}

type GraphQLSourceConnection {
  totalCount: Int!
  edges: [GraphQLSourceEdge!]!
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  distinct(field: GraphQLSourceFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: GraphQLSourceFieldsEnum!): [GraphQLSourceGroupConnection!]!
}

type GraphQLSourceEdge {
  next: GraphQLSource
  node: GraphQLSource!
  previous: GraphQLSource
}

enum GraphQLSourceFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  typeName
  fieldName
}

input GraphQLSourceFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  typeName: StringQueryOperatorInput
  fieldName: StringQueryOperatorInput
}

type GraphQLSourceGroupConnection {
  totalCount: Int!
  edges: [GraphQLSourceEdge!]!
  nodes: [GraphQLSource!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input GraphQLSourceSortInput {
  fields: [GraphQLSourceFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum HeadingsMdx {
  h1
  h2
  h3
  h4
  h5
  h6
}

type History {
  lastModified: String!
  authors: [GithubUser!]!
}

input HistoryFilterInput {
  lastModified: StringQueryOperatorInput
  authors: GithubUserFilterListInput
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

type Mdx implements Node {
  rawBody: String!
  fileAbsolutePath: String!
  frontmatter: Frontmatter!
  body: String!
  excerpt(pruneLength: Int = 140, truncate: Boolean = false): String!
  headings(depth: HeadingsMdx): [MdxHeadingMdx]
  html: String
  mdxAST: JSON
  tableOfContents(maxDepth: Int): JSON
  timeToRead: Int
  wordCount: MdxWordCount
  childDocsPage: DocsPage
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type MdxConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  distinct(field: MdxFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: MdxFieldsEnum!): [MdxGroupConnection!]!
}

type MdxEdge {
  next: Mdx
  node: Mdx!
  previous: Mdx
}

enum MdxFieldsEnum {
  rawBody
  fileAbsolutePath
  frontmatter___title
  frontmatter___shortTitle
  frontmatter___overrideBreadcrumb
  frontmatter___overrideNav
  frontmatter___isRoot
  frontmatter___childrenOrder
  frontmatter___noBreadcrumb
  frontmatter___noTOC
  frontmatter___badge
  frontmatter___noSequenceLinks
  body
  excerpt @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___value @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  headings___depth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  html @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  mdxAST @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  tableOfContents @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  timeToRead @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  wordCount___paragraphs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  wordCount___sentences @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  wordCount___words @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___breadcrumb @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___breadcrumb___text @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___breadcrumb___path @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___title @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___shortTitle @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___isOrphan @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___noTOC @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___noSequenceLinks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___badge @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___originalPath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___history___lastModified @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___history___authors @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___history___authors___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___history___authors___avatarUrl @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___history___authors___login @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___history___authors___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___sideNav___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___path @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___preorder @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___lead @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childDocsPage___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

input MdxFilterInput {
  rawBody: StringQueryOperatorInput
  fileAbsolutePath: StringQueryOperatorInput
  frontmatter: FrontmatterFilterInput
  body: StringQueryOperatorInput
  excerpt: StringQueryOperatorInput
  headings: MdxHeadingMdxFilterListInput
  html: StringQueryOperatorInput
  mdxAST: JSONQueryOperatorInput
  tableOfContents: JSONQueryOperatorInput
  timeToRead: IntQueryOperatorInput
  wordCount: MdxWordCountFilterInput
  childDocsPage: DocsPageFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type MdxFrontmatter {
  title: String!
}

type MdxGroupConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type MdxHeadingMdx {
  value: String
  depth: Int
}

input MdxHeadingMdxFilterInput {
  value: StringQueryOperatorInput
  depth: IntQueryOperatorInput
}

input MdxHeadingMdxFilterListInput {
  elemMatch: MdxHeadingMdxFilterInput
}

input MdxSortInput {
  fields: [MdxFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type MdxWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input MdxWordCountFilterInput {
  paragraphs: IntQueryOperatorInput
  sentences: IntQueryOperatorInput
  words: IntQueryOperatorInput
}

type NavigationTree implements Node {
  root: JSON!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type NavigationTreeConnection {
  totalCount: Int!
  edges: [NavigationTreeEdge!]!
  nodes: [NavigationTree!]!
  pageInfo: PageInfo!
  distinct(field: NavigationTreeFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: NavigationTreeFieldsEnum!): [NavigationTreeGroupConnection!]!
}

type NavigationTreeEdge {
  next: NavigationTree
  node: NavigationTree!
  previous: NavigationTree
}

enum NavigationTreeFieldsEnum {
  root
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input NavigationTreeFilterInput {
  root: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type NavigationTreeGroupConnection {
  totalCount: Int!
  edges: [NavigationTreeEdge!]!
  nodes: [NavigationTree!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input NavigationTreeSortInput {
  fields: [NavigationTreeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

# Node Interface
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

type Query {
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, childMdx: MdxFilterInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, publicURL: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, context: SitePageContextFilterInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput, componentPath: StringQueryOperatorInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteSiteMetadataFilterInput, port: DateQueryOperatorInput, host: StringQueryOperatorInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  mdx(rawBody: StringQueryOperatorInput, fileAbsolutePath: StringQueryOperatorInput, frontmatter: FrontmatterFilterInput, body: StringQueryOperatorInput, excerpt: StringQueryOperatorInput, headings: MdxHeadingMdxFilterListInput, html: StringQueryOperatorInput, mdxAST: JSONQueryOperatorInput, tableOfContents: JSONQueryOperatorInput, timeToRead: IntQueryOperatorInput, wordCount: MdxWordCountFilterInput, childDocsPage: DocsPageFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Mdx
  allMdx(filter: MdxFilterInput, sort: MdxSortInput, skip: Int, limit: Int): MdxConnection!
  navigationTree(root: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): NavigationTree
  allNavigationTree(filter: NavigationTreeFilterInput, sort: NavigationTreeSortInput, skip: Int, limit: Int): NavigationTreeConnection!
  docsPage(breadcrumb: BreadcrumbSegmentFilterListInput, title: StringQueryOperatorInput, shortTitle: StringQueryOperatorInput, isOrphan: BooleanQueryOperatorInput, noTOC: BooleanQueryOperatorInput, noSequenceLinks: BooleanQueryOperatorInput, badge: StringQueryOperatorInput, originalPath: StringQueryOperatorInput, history: HistoryFilterInput, sideNav: NavigationTreeFilterInput, path: StringQueryOperatorInput, preorder: IntQueryOperatorInput, lead: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): DocsPage
  allDocsPage(filter: DocsPageFilterInput, sort: DocsPageSortInput, skip: Int, limit: Int): DocsPageConnection!
  buildMetadata(label: StringQueryOperatorInput, icon: StringQueryOperatorInput, context: BuildMetadataContextFilterInput, details: BuildMetadataEntryFilterListInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): BuildMetadata
  allBuildMetadata(filter: BuildMetadataFilterInput, sort: BuildMetadataSortInput, skip: Int, limit: Int): BuildMetadataConnection!
  graphQlSource(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, typeName: StringQueryOperatorInput, fieldName: StringQueryOperatorInput): GraphQLSource
  allGraphQlSource(filter: GraphQLSourceFilterInput, sort: GraphQLSourceSortInput, skip: Int, limit: Int): GraphQLSourceConnection!
  siteBuildMetadata(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, buildTime: DateQueryOperatorInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: SiteBuildMetadataSortInput, skip: Int, limit: Int): SiteBuildMetadataConnection!
  sitePlugin(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
  github: GitHub!
}

type Site implements Node {
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  host: String
  pathPrefix: String
  polyfill: Boolean
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteBuildMetadata implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    # MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    # documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to
    # "milliseconds" but you can also pass in as the measurement "years",
    # "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  buildTime
}

input SiteBuildMetadataFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  buildTime: DateQueryOperatorInput
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  siteMetadata___title
  siteMetadata___headerTitle
  siteMetadata___version
  siteMetadata___description
  siteMetadata___author
  siteMetadata___siteUrl
  siteMetadata___themeColor
  siteMetadata___msTileColor
  siteMetadata___github___owner
  siteMetadata___github___name
  siteMetadata___github___docsRoot
  siteMetadata___github___branch
  siteMetadata___socials___github
  siteMetadata___socials___discord
  port
  host
  pathPrefix
  polyfill
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: DateQueryOperatorInput
  host: StringQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  isCreatedByStatefulCreatePages: Boolean
  context: SitePageContext
  pluginCreator: SitePlugin
  pluginCreatorId: String
  componentPath: String
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageContext {
  id: String
  previous: String
  next: String
}

input SitePageContextFilterInput {
  id: StringQueryOperatorInput
  previous: StringQueryOperatorInput
  next: StringQueryOperatorInput
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  path
  component
  internalComponentName
  componentChunkName
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  isCreatedByStatefulCreatePages
  context___id
  context___previous
  context___next
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___pluginOptions___alias____lib
  pluginCreator___pluginOptions___alias____docs
  pluginCreator___pluginOptions___alias____design
  pluginCreator___pluginOptions___extensions
  pluginCreator___pluginOptions___outputPath
  pluginCreator___pluginOptions___emitSchema___src___generated___gatsby_introspection_json
  pluginCreator___pluginOptions___emitSchema___src___generated___gatsby_schema_graphql
  pluginCreator___pluginOptions___emitPluginDocuments___src___generated___gatsby_plugin_documents_graphql
  pluginCreator___pluginOptions___name
  pluginCreator___pluginOptions___short_name
  pluginCreator___pluginOptions___description
  pluginCreator___pluginOptions___homepage_url
  pluginCreator___pluginOptions___start_url
  pluginCreator___pluginOptions___background_color
  pluginCreator___pluginOptions___theme_color
  pluginCreator___pluginOptions___display
  pluginCreator___pluginOptions___icons
  pluginCreator___pluginOptions___icons___src
  pluginCreator___pluginOptions___icons___sizes
  pluginCreator___pluginOptions___icons___type
  pluginCreator___pluginOptions___cache_busting_mode
  pluginCreator___pluginOptions___include_favicon
  pluginCreator___pluginOptions___legacy
  pluginCreator___pluginOptions___theme_color_in_head
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___typeName
  pluginCreator___pluginOptions___fieldName
  pluginCreator___pluginOptions___url
  pluginCreator___pluginOptions___headers___Authorization
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___packageJson___name
  pluginCreator___packageJson___description
  pluginCreator___packageJson___version
  pluginCreator___packageJson___main
  pluginCreator___packageJson___license
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreatorId
  componentPath
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
  context: SitePageContextFilterInput
  pluginCreator: SitePluginFilterInput
  pluginCreatorId: StringQueryOperatorInput
  componentPath: StringQueryOperatorInput
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePlugin implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  resolve: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptions
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: SitePluginPackageJson
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  resolve
  name
  version
  pluginOptions___alias____lib
  pluginOptions___alias____docs
  pluginOptions___alias____design
  pluginOptions___extensions
  pluginOptions___outputPath
  pluginOptions___emitSchema___src___generated___gatsby_introspection_json
  pluginOptions___emitSchema___src___generated___gatsby_schema_graphql
  pluginOptions___emitPluginDocuments___src___generated___gatsby_plugin_documents_graphql
  pluginOptions___name
  pluginOptions___short_name
  pluginOptions___description
  pluginOptions___homepage_url
  pluginOptions___start_url
  pluginOptions___background_color
  pluginOptions___theme_color
  pluginOptions___display
  pluginOptions___icons
  pluginOptions___icons___src
  pluginOptions___icons___sizes
  pluginOptions___icons___type
  pluginOptions___cache_busting_mode
  pluginOptions___include_favicon
  pluginOptions___legacy
  pluginOptions___theme_color_in_head
  pluginOptions___path
  pluginOptions___typeName
  pluginOptions___fieldName
  pluginOptions___url
  pluginOptions___headers___Authorization
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___license
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___keywords
}

input SitePluginFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsFilterInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  packageJson: SitePluginPackageJsonFilterInput
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type SitePluginPackageJson {
  name: String
  description: String
  version: String
  main: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
  name: StringQueryOperatorInput
  description: StringQueryOperatorInput
  version: StringQueryOperatorInput
  main: StringQueryOperatorInput
  license: StringQueryOperatorInput
  dependencies: SitePluginPackageJsonDependenciesFilterListInput
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
  keywords: StringQueryOperatorInput
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

type SitePluginPluginOptions {
  alias: SitePluginPluginOptionsAlias
  extensions: [String]
  outputPath: String
  emitSchema: SitePluginPluginOptionsEmitSchema
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocuments
  name: String
  short_name: String
  description: String
  homepage_url: String
  start_url: String
  background_color: String
  theme_color: String
  display: String
  icons: [SitePluginPluginOptionsIcons]
  cache_busting_mode: String
  include_favicon: Boolean
  legacy: Boolean
  theme_color_in_head: Boolean
  path: String
  typeName: String
  fieldName: String
  url: String
  headers: SitePluginPluginOptionsHeaders
  pathCheck: Boolean
}

type SitePluginPluginOptionsAlias {
  _lib: String
  _docs: String
  _design: String
}

input SitePluginPluginOptionsAliasFilterInput {
  _lib: StringQueryOperatorInput
  _docs: StringQueryOperatorInput
  _design: StringQueryOperatorInput
}

type SitePluginPluginOptionsEmitPluginDocuments {
  src___generated___gatsby_plugin_documents_graphql: Boolean
}

input SitePluginPluginOptionsEmitPluginDocumentsFilterInput {
  src___generated___gatsby_plugin_documents_graphql: BooleanQueryOperatorInput
}

type SitePluginPluginOptionsEmitSchema {
  src___generated___gatsby_introspection_json: Boolean
  src___generated___gatsby_schema_graphql: Boolean
}

input SitePluginPluginOptionsEmitSchemaFilterInput {
  src___generated___gatsby_introspection_json: BooleanQueryOperatorInput
  src___generated___gatsby_schema_graphql: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsFilterInput {
  alias: SitePluginPluginOptionsAliasFilterInput
  extensions: StringQueryOperatorInput
  outputPath: StringQueryOperatorInput
  emitSchema: SitePluginPluginOptionsEmitSchemaFilterInput
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocumentsFilterInput
  name: StringQueryOperatorInput
  short_name: StringQueryOperatorInput
  description: StringQueryOperatorInput
  homepage_url: StringQueryOperatorInput
  start_url: StringQueryOperatorInput
  background_color: StringQueryOperatorInput
  theme_color: StringQueryOperatorInput
  display: StringQueryOperatorInput
  icons: SitePluginPluginOptionsIconsFilterListInput
  cache_busting_mode: StringQueryOperatorInput
  include_favicon: BooleanQueryOperatorInput
  legacy: BooleanQueryOperatorInput
  theme_color_in_head: BooleanQueryOperatorInput
  path: StringQueryOperatorInput
  typeName: StringQueryOperatorInput
  fieldName: StringQueryOperatorInput
  url: StringQueryOperatorInput
  headers: SitePluginPluginOptionsHeadersFilterInput
  pathCheck: BooleanQueryOperatorInput
}

type SitePluginPluginOptionsHeaders {
  Authorization: String
}

input SitePluginPluginOptionsHeadersFilterInput {
  Authorization: StringQueryOperatorInput
}

type SitePluginPluginOptionsIcons {
  src: String
  sizes: String
  type: String
}

input SitePluginPluginOptionsIconsFilterInput {
  src: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input SitePluginPluginOptionsIconsFilterListInput {
  elemMatch: SitePluginPluginOptionsIconsFilterInput
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteSiteMetadata {
  title: String
  headerTitle: String
  version: String
  description: String
  author: String
  siteUrl: String
  themeColor: String
  msTileColor: String
  github: SiteSiteMetadataGithub
  socials: SiteSiteMetadataSocials
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  headerTitle: StringQueryOperatorInput
  version: StringQueryOperatorInput
  description: StringQueryOperatorInput
  author: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
  themeColor: StringQueryOperatorInput
  msTileColor: StringQueryOperatorInput
  github: SiteSiteMetadataGithubFilterInput
  socials: SiteSiteMetadataSocialsFilterInput
}

type SiteSiteMetadataGithub {
  owner: String
  name: String
  docsRoot: String
  branch: String
}

input SiteSiteMetadataGithubFilterInput {
  owner: StringQueryOperatorInput
  name: StringQueryOperatorInput
  docsRoot: StringQueryOperatorInput
  branch: StringQueryOperatorInput
}

type SiteSiteMetadataSocials {
  github: String
  discord: String
}

input SiteSiteMetadataSocialsFilterInput {
  github: StringQueryOperatorInput
  discord: StringQueryOperatorInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}
